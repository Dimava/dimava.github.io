export default shapez;
const { Application, CHANGELOG, AnimationFrame, compressionPrefix, asyncCompressor, AtlasDefinition, atlasFiles, getLogoSprite, BackgroundResourcesLoader, BufferMaintainer, enableImageSmoothing, disableImageSmoothing, getBufferVramUsageBytes, getBufferStats, clearBufferBacklog, makeOffscreenBuffer, registerCanvas, freeCanvas, cachebust, MAX_MOVE_DISTANCE_PX, clickDetectorGlobals, ClickDetector, IS_DEBUG, SUPPORT_TOUCH, IS_MAC, THIRDPARTY_URLS, A_B_TESTING_LINK_TYPE, globalConfig, IS_MOBILE, getDeviceDPI, smoothenDpi, prepareHighDPIContext, resizeHighDPICanvas, resizeCanvas, resizeCanvasAndClear, DrawParameters, initDrawUtils, drawRotatedSprite, drawSpriteClipped, APPLICATION_ERROR_OCCURED, ExplainedResult, Factory, GameState, gMetaBuildingRegistry, gBuildingsByCategory, gComponentRegistry, gGameModeRegistry, gGameSpeedRegistry, gItemRegistry, initBuildingsByCategory, GLOBAL_APP, setGlobalApp, BUILD_OPTIONS, InputDistributor, InputReceiver, Loader, createLogger, serializeError, stringifyObjectContainingErrors, globalDebug, globalLog, globalWarn, globalError, logSection, compressU8, compressU8WHeader, decompressU8WHeader, compressX64, decompressX64, Dialog, DialogLoading, DialogOptionChooser, DialogWithForm, FormElement, FormElementInput, FormElementCheckbox, FormElementItemChooser, queryParamOptions, ReadWriteProxy, Rectangle, PROMISE_ABORTED, RequestChannel, RestrictionManager, RandomNumberGenerator, sha1, getNameOfProvider, CRC_PREFIX, computeCrc, STOP_PROPAGATION, Signal, SingletonFactory, ORIGINAL_SPRITE_SCALE, FULL_CLIP_RECT, BaseSprite, SpriteAtlasLink, AtlasSprite, RegularSprite, StaleAreaDetector, StateManager, TextualGameState, TrackedState, isAndroid, isIos, getPlatformName, make2DUndefinedArray, newEmptyMap, randomInt, accessNestedPropertyReverse, randomChoice, fastArrayDelete, fastArrayDeleteValue, fastArrayDeleteValueIfContained, arrayDelete, arrayDeleteValue, epsilonCompare, lerp, findNiceValue, findNiceIntegerValue, formatBigNumber, formatBigNumberFull, waitNextFrame, round1Digit, round2Digits, round3Digits, round4Digits, clamp, makeDivElement, makeDiv, makeButtonElement, makeButton, removeAllChildren, isSupportedBrowser, formatSecondsToTimeAgo, formatSeconds, round1DigitLocalized, formatItemsPerSecond, rotateFlatMatrix3x3, generateMatrixRotations, rotateDirectionalObject, safeModulo, smoothPulse, fillInLinkIntoTranslation, generateFileDownload, startFileChoose, getRomanNumber, enumDirection, enumInvertedDirections, enumDirectionToAngle, enumAngleToDirection, arrayAllDirections, Vector, mixVector, enumDirectionToVector, AchievementProxy, enumSavePriority, AutomaticSave, BaseItem, BeltPath, Blueprint, gBuildingVariants, registerBuildingVariant, getBuildingDataFromCode, buildBuildingCodeCache, getCodeFromBuildingData, MetaAnalyzerBuilding, enumBalancerVariants, MetaBalancerBuilding, arrayBeltVariantToRotation, beltOverlayMatrices, MetaBeltBuilding, MetaBlockBuilding, MetaComparatorBuilding, MetaConstantProducerBuilding, MetaConstantSignalBuilding, enumCutterVariants, MetaCutterBuilding, MetaDisplayBuilding, MetaFilterBuilding, MetaGoalAcceptorBuilding, MetaHubBuilding, MetaItemProducerBuilding, MetaLeverBuilding, enumLogicGateVariants, MetaLogicGateBuilding, enumMinerVariants, MetaMinerBuilding, MetaMixerBuilding, enumPainterVariants, MetaPainterBuilding, MetaReaderBuilding, enumRotaterVariants, MetaRotaterBuilding, MetaStackerBuilding, MetaStorageBuilding, enumTransistorVariants, MetaTransistorBuilding, MetaTrashBuilding, arrayUndergroundRotationVariantToMode, enumUndergroundBeltVariants, enumUndergroundBeltVariantToTier, MetaUndergroundBeltBuilding, enumVirtualProcessorVariants, MetaVirtualProcessorBuilding, arrayWireRotationVariantToType, wireOverlayMatrices, wireVariants, MetaWireBuilding, MetaWireTunnelBuilding, USER_INTERACT_MOVE, USER_INTERACT_ZOOM, USER_INTERACT_TOUCHEND, enumMouseButton, Camera, enumColors, enumColorToShortcode, enumShortcodeToColor, enumColorsToHexCode, enumColorMixingResults, Component, initComponentRegistry, curvedBeltLength, FAKE_BELT_ACCEPTOR_SLOT, FAKE_BELT_EJECTOR_SLOT_BY_DIRECTION, BeltComponent, enumBeltReaderType, BeltReaderComponent, enumClippedBeltUnderlayType, BeltUnderlaysComponent, ConstantSignalComponent, DisplayComponent, FilterComponent, GoalAcceptorComponent, HubComponent, ItemAcceptorComponent, ItemEjectorComponent, enumItemProcessorTypes, enumItemProcessorRequirements, ItemProcessorComponent, ItemProducerComponent, LeverComponent, enumLogicGateType, LogicGateComponent, MinerComponent, StaticMapEntityComponent, MODS_ADDITIONAL_STORAGE_ITEM_RESOLVER, StorageComponent, enumUndergroundBeltMode, UndergroundBeltComponent, enumWireType, enumWireVariant, WireComponent, WireTunnelComponent, enumPinSlotType, WiredPinsComponent, GameCore, DynamicTickrate, Entity, EntityComponentStorage, EntityManager, GameLoadingOverlay, enumGameModeIds, enumGameModeTypes, GameMode, initGameModeRegistry, initGameSpeedRegistry, GameSystem, MODS_ADDITIONAL_SYSTEMS, GameSystemManager, GameSystemWithFilter, getRandomHint, MOD_ITEM_PROCESSOR_SPEEDS, HubGoals, BaseHUDPart, DynamicDomAttach, GameHUD, HUDBaseToolbar, HUDBetaOverlay, HUDBlueprintPlacer, HUDBuildingPlacer, HUDBuildingPlacerLogic, HUDBuildingsToolbar, HUDCatMemes, HUDColorBlindHelper, MODS_ADDITIONAL_CONSTANT_SIGNAL_RESOLVER, HUDConstantSignalEdit, HUDChangesDebugger, HUDDebugInfo, HUDGameMenu, HUDInteractiveTutorial, HUDKeybindingOverlay, HUDLayerPreview, HUDLeverToggle, HUDMassSelector, HUDMinerHighlight, HUDModalDialogs, HUDPuzzleNextPuzzle, enumNotificationType, HUDNotifications, HUDPinnedShapes, HUDPuzzleBackToMenu, HUDPuzzleCompleteNotification, HUDPuzzleDLCLogo, HUDPuzzleEditorControls, HUDPuzzleEditorReview, HUDPuzzleEditorSettings, HUDPuzzlePlayMetadata, HUDPuzzlePlaySettings, HUDSandboxController, HUDScreenshotExporter, HUDSettingsMenu, HUDShapeTooltip, HUDShapeViewer, HUDShop, HUDStandaloneAdvantages, HUDStatistics, enumDisplayMode, statisticsUnitsSeconds, HUDShapeStatisticsHandle, HUDPartTutorialHints, HUDTutorialVideoOffer, HUDUnlockNotification, HUDVignetteOverlay, HUDWatermark, HUDWaypoints, HUDWireInfo, HUDWiresOverlay, HUDWiresToolbar, initItemRegistry, MODS_ADDITIONAL_ITEMS, itemResolverSingleton, typeItemSingleton, BooleanItem, BOOL_FALSE_SINGLETON, BOOL_TRUE_SINGLETON, isTrueItem, isTruthyItem, ColorItem, COLOR_ITEM_SINGLETONS, ShapeItem, keyToKeyCode, KEYCODES, KEYMAPPINGS, KEYCODE_LMB, KEYCODE_MMB, KEYCODE_RMB, getStringForKeyCode, Keybinding, KeyActionMapper, GameLogic, BaseMap, MODS_ADDITIONAL_SHAPE_MAP_WEIGHTS, MapChunk, MapChunkAggregate, CHUNK_OVERLAY_RES, MOD_CHUNK_DRAW_HOOKS, MapChunkView, MapView, defaultBuildingVariant, MetaBuilding, registerBuildingVariants, initMetaBuildingRegistry, initBuildingCodesAfterResourcesLoaded, PuzzleGameMode, PuzzleEditGameMode, PuzzlePlayGameMode, rocketShape, finalGameShape, generateLevelDefinitions, RegularGameMode, enumAnalyticsDataSource, ProductionAnalytics, layers, GameRoot, MODS_ADDITIONAL_SUB_SHAPE_DRAWERS, TOP_RIGHT, BOTTOM_RIGHT, BOTTOM_LEFT, TOP_LEFT, enumSubShape, enumSubShapeToShortcode, enumShortcodeToSubShape, createSimpleShape, ShapeDefinition, ShapeDefinitionManager, SoundProxy, BELT_ANIM_COUNT, BeltSystem, BeltReaderSystem, BeltUnderlaysSystem, ConstantProducerSystem, ConstantSignalSystem, MODS_ADDITIONAL_DISPLAY_ITEM_RESOLVER, MODS_ADDITIONAL_DISPLAY_ITEM_DRAW, DisplaySystem, FilterSystem, GoalAcceptorSystem, HubSystem, ItemAcceptorSystem, ItemEjectorSystem, MOD_ITEM_PROCESSOR_HANDLERS, MODS_PROCESSING_REQUIREMENTS, MODS_CAN_PROCESS, ItemProcessorSystem, ItemProcessorOverlaysSystem, ItemProducerSystem, LeverSystem, LogicGateSystem, MapResourcesSystem, MinerSystem, StaticMapEntitySystem, StorageSystem, UndergroundBeltSystem, WireNetwork, WireSystem, WiredPinsSystem, ZoneSystem, THEMES, THEME, applyGameTheme, BaseGameSpeed, FastForwardGameSpeed, GameTime, PausedGameSpeed, RegularGameSpeed, enumHubGoalRewards, enumHubGoalRewardsToContentUnlocked, LANGUAGES, Mod, ModInterface, ModMetaBuilding, MOD_SIGNALS, ModLoader, MODS, ACHIEVEMENTS, AchievementProviderInterface, Achievement, AchievementCollection, AdProviderInterface, AdinplayAdProvider, GamedistributionAdProvider, NoAdProvider, AnalyticsInterface, ClientAPI, ShapezGameAnalytics, GoogleAnalyticsImpl, NoAchievementProvider, NoGameAnalytics, SoundImplBrowser, StorageImplBrowser, StorageImplBrowserIndexedDB, PlatformWrapperImplBrowser, SteamAchievementProvider, StorageImplElectron, PlatformWrapperImplElectron, GameAnalyticsInterface, SOUNDS, MUSIC, SoundInstanceInterface, MusicInstanceInterface, SoundInterface, FILE_NOT_FOUND, StorageInterface, PlatformWrapperInterface, enumCategories, uiScales, scrollWheelSensitivities, movementSpeeds, autosaveIntervals, refreshRateOptions, ApplicationSettings, BaseSetting, EnumSetting, BoolSetting, RangeSetting, PuzzleSerializer, Savegame, compressObject, decompressObject, BaseSavegameInterface, savegameInterfaces, getSavegameInterface, enumLocalSavegameStatus, SavegameManager, SavegameSerializer, SavegameInterface_V1000, SavegameInterface_V1001, SavegameInterface_V1002, SavegameInterface_V1003, SavegameInterface_V1004, SavegameInterface_V1005, SavegameInterface_V1006, SavegameInterface_V1007, SavegameInterface_V1008, SavegameInterface_V1009, SavegameInterface_V1010, types, BasicSerializableObject, serializeSchema, deserializeSchema, verifySchema, extendSchema, globalJsonSchemaDefs, schemaToJsonSchema, BaseDataType, TypeInteger, TypePositiveInteger, TypePositiveIntegerOrString, TypeBoolean, TypeString, TypeVector, TypeTileVector, TypeNumber, TypePositiveNumber, TypeEnum, TypeEntity, TypeEntityWeakref, TypeClass, TypeClassData, TypeClassFromMetaclass, TypeMetaClass, TypeArray, TypeFixedClass, TypeKeyValueMap, TypeClassId, TypePair, TypeNullable, TypeStructuredObject, SerializerInternal, AboutState, ChangelogState, GAME_LOADING_STATES, gameCreationAction, GameCreationPayload, InGameState, KeybindingsState, LoginState, MainMenuState, MobileWarningState, ModsState, PreloadState, PuzzleMenuState, SettingsState, WegameSplashState, T, autoDetectLanguageId, matchDataRecursive, updateApplicationLanguage } = shapez;
export { Application, CHANGELOG, AnimationFrame, compressionPrefix, asyncCompressor, AtlasDefinition, atlasFiles, getLogoSprite, BackgroundResourcesLoader, BufferMaintainer, enableImageSmoothing, disableImageSmoothing, getBufferVramUsageBytes, getBufferStats, clearBufferBacklog, makeOffscreenBuffer, registerCanvas, freeCanvas, cachebust, MAX_MOVE_DISTANCE_PX, clickDetectorGlobals, ClickDetector, IS_DEBUG, SUPPORT_TOUCH, IS_MAC, THIRDPARTY_URLS, A_B_TESTING_LINK_TYPE, globalConfig, IS_MOBILE, getDeviceDPI, smoothenDpi, prepareHighDPIContext, resizeHighDPICanvas, resizeCanvas, resizeCanvasAndClear, DrawParameters, initDrawUtils, drawRotatedSprite, drawSpriteClipped, APPLICATION_ERROR_OCCURED, ExplainedResult, Factory, GameState, gMetaBuildingRegistry, gBuildingsByCategory, gComponentRegistry, gGameModeRegistry, gGameSpeedRegistry, gItemRegistry, initBuildingsByCategory, GLOBAL_APP, setGlobalApp, BUILD_OPTIONS, InputDistributor, InputReceiver, Loader, createLogger, serializeError, stringifyObjectContainingErrors, globalDebug, globalLog, globalWarn, globalError, logSection, compressU8, compressU8WHeader, decompressU8WHeader, compressX64, decompressX64, Dialog, DialogLoading, DialogOptionChooser, DialogWithForm, FormElement, FormElementInput, FormElementCheckbox, FormElementItemChooser, queryParamOptions, ReadWriteProxy, Rectangle, PROMISE_ABORTED, RequestChannel, RestrictionManager, RandomNumberGenerator, sha1, getNameOfProvider, CRC_PREFIX, computeCrc, STOP_PROPAGATION, Signal, SingletonFactory, ORIGINAL_SPRITE_SCALE, FULL_CLIP_RECT, BaseSprite, SpriteAtlasLink, AtlasSprite, RegularSprite, StaleAreaDetector, StateManager, TextualGameState, TrackedState, isAndroid, isIos, getPlatformName, make2DUndefinedArray, newEmptyMap, randomInt, accessNestedPropertyReverse, randomChoice, fastArrayDelete, fastArrayDeleteValue, fastArrayDeleteValueIfContained, arrayDelete, arrayDeleteValue, epsilonCompare, lerp, findNiceValue, findNiceIntegerValue, formatBigNumber, formatBigNumberFull, waitNextFrame, round1Digit, round2Digits, round3Digits, round4Digits, clamp, makeDivElement, makeDiv, makeButtonElement, makeButton, removeAllChildren, isSupportedBrowser, formatSecondsToTimeAgo, formatSeconds, round1DigitLocalized, formatItemsPerSecond, rotateFlatMatrix3x3, generateMatrixRotations, rotateDirectionalObject, safeModulo, smoothPulse, fillInLinkIntoTranslation, generateFileDownload, startFileChoose, getRomanNumber, enumDirection, enumInvertedDirections, enumDirectionToAngle, enumAngleToDirection, arrayAllDirections, Vector, mixVector, enumDirectionToVector, AchievementProxy, enumSavePriority, AutomaticSave, BaseItem, BeltPath, Blueprint, gBuildingVariants, registerBuildingVariant, getBuildingDataFromCode, buildBuildingCodeCache, getCodeFromBuildingData, MetaAnalyzerBuilding, enumBalancerVariants, MetaBalancerBuilding, arrayBeltVariantToRotation, beltOverlayMatrices, MetaBeltBuilding, MetaBlockBuilding, MetaComparatorBuilding, MetaConstantProducerBuilding, MetaConstantSignalBuilding, enumCutterVariants, MetaCutterBuilding, MetaDisplayBuilding, MetaFilterBuilding, MetaGoalAcceptorBuilding, MetaHubBuilding, MetaItemProducerBuilding, MetaLeverBuilding, enumLogicGateVariants, MetaLogicGateBuilding, enumMinerVariants, MetaMinerBuilding, MetaMixerBuilding, enumPainterVariants, MetaPainterBuilding, MetaReaderBuilding, enumRotaterVariants, MetaRotaterBuilding, MetaStackerBuilding, MetaStorageBuilding, enumTransistorVariants, MetaTransistorBuilding, MetaTrashBuilding, arrayUndergroundRotationVariantToMode, enumUndergroundBeltVariants, enumUndergroundBeltVariantToTier, MetaUndergroundBeltBuilding, enumVirtualProcessorVariants, MetaVirtualProcessorBuilding, arrayWireRotationVariantToType, wireOverlayMatrices, wireVariants, MetaWireBuilding, MetaWireTunnelBuilding, USER_INTERACT_MOVE, USER_INTERACT_ZOOM, USER_INTERACT_TOUCHEND, enumMouseButton, Camera, enumColors, enumColorToShortcode, enumShortcodeToColor, enumColorsToHexCode, enumColorMixingResults, Component, initComponentRegistry, curvedBeltLength, FAKE_BELT_ACCEPTOR_SLOT, FAKE_BELT_EJECTOR_SLOT_BY_DIRECTION, BeltComponent, enumBeltReaderType, BeltReaderComponent, enumClippedBeltUnderlayType, BeltUnderlaysComponent, ConstantSignalComponent, DisplayComponent, FilterComponent, GoalAcceptorComponent, HubComponent, ItemAcceptorComponent, ItemEjectorComponent, enumItemProcessorTypes, enumItemProcessorRequirements, ItemProcessorComponent, ItemProducerComponent, LeverComponent, enumLogicGateType, LogicGateComponent, MinerComponent, StaticMapEntityComponent, MODS_ADDITIONAL_STORAGE_ITEM_RESOLVER, StorageComponent, enumUndergroundBeltMode, UndergroundBeltComponent, enumWireType, enumWireVariant, WireComponent, WireTunnelComponent, enumPinSlotType, WiredPinsComponent, GameCore, DynamicTickrate, Entity, EntityComponentStorage, EntityManager, GameLoadingOverlay, enumGameModeIds, enumGameModeTypes, GameMode, initGameModeRegistry, initGameSpeedRegistry, GameSystem, MODS_ADDITIONAL_SYSTEMS, GameSystemManager, GameSystemWithFilter, getRandomHint, MOD_ITEM_PROCESSOR_SPEEDS, HubGoals, BaseHUDPart, DynamicDomAttach, GameHUD, HUDBaseToolbar, HUDBetaOverlay, HUDBlueprintPlacer, HUDBuildingPlacer, HUDBuildingPlacerLogic, HUDBuildingsToolbar, HUDCatMemes, HUDColorBlindHelper, MODS_ADDITIONAL_CONSTANT_SIGNAL_RESOLVER, HUDConstantSignalEdit, HUDChangesDebugger, HUDDebugInfo, HUDGameMenu, HUDInteractiveTutorial, HUDKeybindingOverlay, HUDLayerPreview, HUDLeverToggle, HUDMassSelector, HUDMinerHighlight, HUDModalDialogs, HUDPuzzleNextPuzzle, enumNotificationType, HUDNotifications, HUDPinnedShapes, HUDPuzzleBackToMenu, HUDPuzzleCompleteNotification, HUDPuzzleDLCLogo, HUDPuzzleEditorControls, HUDPuzzleEditorReview, HUDPuzzleEditorSettings, HUDPuzzlePlayMetadata, HUDPuzzlePlaySettings, HUDSandboxController, HUDScreenshotExporter, HUDSettingsMenu, HUDShapeTooltip, HUDShapeViewer, HUDShop, HUDStandaloneAdvantages, HUDStatistics, enumDisplayMode, statisticsUnitsSeconds, HUDShapeStatisticsHandle, HUDPartTutorialHints, HUDTutorialVideoOffer, HUDUnlockNotification, HUDVignetteOverlay, HUDWatermark, HUDWaypoints, HUDWireInfo, HUDWiresOverlay, HUDWiresToolbar, initItemRegistry, MODS_ADDITIONAL_ITEMS, itemResolverSingleton, typeItemSingleton, BooleanItem, BOOL_FALSE_SINGLETON, BOOL_TRUE_SINGLETON, isTrueItem, isTruthyItem, ColorItem, COLOR_ITEM_SINGLETONS, ShapeItem, keyToKeyCode, KEYCODES, KEYMAPPINGS, KEYCODE_LMB, KEYCODE_MMB, KEYCODE_RMB, getStringForKeyCode, Keybinding, KeyActionMapper, GameLogic, BaseMap, MODS_ADDITIONAL_SHAPE_MAP_WEIGHTS, MapChunk, MapChunkAggregate, CHUNK_OVERLAY_RES, MOD_CHUNK_DRAW_HOOKS, MapChunkView, MapView, defaultBuildingVariant, MetaBuilding, registerBuildingVariants, initMetaBuildingRegistry, initBuildingCodesAfterResourcesLoaded, PuzzleGameMode, PuzzleEditGameMode, PuzzlePlayGameMode, rocketShape, finalGameShape, generateLevelDefinitions, RegularGameMode, enumAnalyticsDataSource, ProductionAnalytics, layers, GameRoot, MODS_ADDITIONAL_SUB_SHAPE_DRAWERS, TOP_RIGHT, BOTTOM_RIGHT, BOTTOM_LEFT, TOP_LEFT, enumSubShape, enumSubShapeToShortcode, enumShortcodeToSubShape, createSimpleShape, ShapeDefinition, ShapeDefinitionManager, SoundProxy, BELT_ANIM_COUNT, BeltSystem, BeltReaderSystem, BeltUnderlaysSystem, ConstantProducerSystem, ConstantSignalSystem, MODS_ADDITIONAL_DISPLAY_ITEM_RESOLVER, MODS_ADDITIONAL_DISPLAY_ITEM_DRAW, DisplaySystem, FilterSystem, GoalAcceptorSystem, HubSystem, ItemAcceptorSystem, ItemEjectorSystem, MOD_ITEM_PROCESSOR_HANDLERS, MODS_PROCESSING_REQUIREMENTS, MODS_CAN_PROCESS, ItemProcessorSystem, ItemProcessorOverlaysSystem, ItemProducerSystem, LeverSystem, LogicGateSystem, MapResourcesSystem, MinerSystem, StaticMapEntitySystem, StorageSystem, UndergroundBeltSystem, WireNetwork, WireSystem, WiredPinsSystem, ZoneSystem, THEMES, THEME, applyGameTheme, BaseGameSpeed, FastForwardGameSpeed, GameTime, PausedGameSpeed, RegularGameSpeed, enumHubGoalRewards, enumHubGoalRewardsToContentUnlocked, LANGUAGES, Mod, ModInterface, ModMetaBuilding, MOD_SIGNALS, ModLoader, MODS, ACHIEVEMENTS, AchievementProviderInterface, Achievement, AchievementCollection, AdProviderInterface, AdinplayAdProvider, GamedistributionAdProvider, NoAdProvider, AnalyticsInterface, ClientAPI, ShapezGameAnalytics, GoogleAnalyticsImpl, NoAchievementProvider, NoGameAnalytics, SoundImplBrowser, StorageImplBrowser, StorageImplBrowserIndexedDB, PlatformWrapperImplBrowser, SteamAchievementProvider, StorageImplElectron, PlatformWrapperImplElectron, GameAnalyticsInterface, SOUNDS, MUSIC, SoundInstanceInterface, MusicInstanceInterface, SoundInterface, FILE_NOT_FOUND, StorageInterface, PlatformWrapperInterface, enumCategories, uiScales, scrollWheelSensitivities, movementSpeeds, autosaveIntervals, refreshRateOptions, ApplicationSettings, BaseSetting, EnumSetting, BoolSetting, RangeSetting, PuzzleSerializer, Savegame, compressObject, decompressObject, BaseSavegameInterface, savegameInterfaces, getSavegameInterface, enumLocalSavegameStatus, SavegameManager, SavegameSerializer, SavegameInterface_V1000, SavegameInterface_V1001, SavegameInterface_V1002, SavegameInterface_V1003, SavegameInterface_V1004, SavegameInterface_V1005, SavegameInterface_V1006, SavegameInterface_V1007, SavegameInterface_V1008, SavegameInterface_V1009, SavegameInterface_V1010, types, BasicSerializableObject, serializeSchema, deserializeSchema, verifySchema, extendSchema, globalJsonSchemaDefs, schemaToJsonSchema, BaseDataType, TypeInteger, TypePositiveInteger, TypePositiveIntegerOrString, TypeBoolean, TypeString, TypeVector, TypeTileVector, TypeNumber, TypePositiveNumber, TypeEnum, TypeEntity, TypeEntityWeakref, TypeClass, TypeClassData, TypeClassFromMetaclass, TypeMetaClass, TypeArray, TypeFixedClass, TypeKeyValueMap, TypeClassId, TypePair, TypeNullable, TypeStructuredObject, SerializerInternal, AboutState, ChangelogState, GAME_LOADING_STATES, gameCreationAction, GameCreationPayload, InGameState, KeybindingsState, LoginState, MainMenuState, MobileWarningState, ModsState, PreloadState, PuzzleMenuState, SettingsState, WegameSplashState, T, autoDetectLanguageId, matchDataRecursive, updateApplicationLanguage };
//# sourceMappingURL=data:application/json;base64,