import { ShapeDefinitionManager, ShapeItem, THEME, types } from "../shapez.js";
import { SzDefinition } from "./definition.js";
export class SzShapeItem extends ShapeItem {
    static getId() {
        return 'szItem';
    }
    // @ts-ignore
    definition;
    constructor(definition) {
        if (SzShapeItem.constructorCache.has(definition.getHash())) {
            return SzShapeItem.constructorCache.get(definition.getHash());
        }
        super(null);
        this.definition = definition;
        this.definition.getHash();
        SzShapeItem.constructorCache.set(definition.getHash(), this);
    }
    static constructorCache = new Map();
    static getSchema() {
        return types.string;
    }
    getItemType() {
        return 'shape';
    }
    equals(other) {
        return other.getItemType() == this.getItemType() && other.definition == this.definition;
    }
    drawItemCenteredClipped(x, y, parameters, diameter) {
        if (!parameters.visibleRect.containsCircle(x, y, diameter / 2))
            return;
        if (!diameter)
            throw new Error();
        this.drawItemCenteredImpl(x, y, parameters, diameter);
    }
    getBackgroundColorAsResource() {
        return THEME.map.resources.shape;
    }
    static deserialize(data) {
        // debugger;
        console.log('deserialize', data);
        if (data.length < 4)
            debugger;
        // this.definition = SzDefinition.fromShortKey(data);
        return new SzShapeItem(new SzDefinition(data));
    }
    serialize() {
        let h = this.definition.getHash();
        if (h.length < 4)
            debugger;
        // console.log('serialize', h);
        return h;
    }
    // deserialize(data: any, root?: GameRoot): string | void {
    // 	throw new Error("Method not implemented.");
    // }
    getAsCopyableKey() {
        throw new Error("Method not implemented.");
    }
    equalsImpl(other) {
        throw new Error("Method not implemented.");
    }
    drawFullSizeOnCanvas(context, size) {
        this.definition.drawFullSizeOnCanvas(context, size);
    }
    drawItemCenteredImpl(x, y, parameters, diameter) {
        this.definition.drawCentered(x, y, parameters, diameter);
    }
    static install(mod) {
        mod.modInterface.extendClass(ShapeDefinitionManager, ({ $old }) => ({
            getShapeItemFromDefinition(definition) {
                if (!(definition instanceof SzDefinition)) {
                    return $old.getShapeItemFromDefinition.call(this, definition);
                }
                return this.shapeKeyToItem[definition.getHash()] ??= new SzShapeItem(definition);
            }
        }));
        mod.modInterface.registerItem(SzShapeItem, data => SzShapeItem.deserialize(data));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFwZXN0L2l0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFrRCxzQkFBc0IsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMvSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHL0MsTUFBTSxPQUFPLFdBQVksU0FBUSxTQUFTO0lBQ3pDLE1BQU0sQ0FBQyxLQUFLO1FBQ1gsT0FBTyxRQUFRLENBQUM7SUFDakIsQ0FBQztJQUNELGFBQWE7SUFDYixVQUFVLENBQWdCO0lBQzFCLFlBQVksVUFBd0I7UUFDbkMsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1lBQzNELE9BQU8sV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUUsQ0FBQztTQUMvRDtRQUNELEtBQUssQ0FBQyxJQUFXLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxNQUFNLENBQUMsZ0JBQWdCLEdBQTZCLElBQUksR0FBRyxFQUFFLENBQUM7SUFFOUQsTUFBTSxDQUFDLFNBQVM7UUFDZixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNELFdBQVc7UUFDVixPQUFPLE9BQU8sQ0FBQztJQUNoQixDQUFDO0lBQ0QsTUFBTSxDQUFDLEtBQWU7UUFDckIsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFF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IERyYXdQYXJhbWV0ZXJzLCBNb2QsIFNoYXBlRGVmaW5pdGlvbiwgU2hhcGVEZWZpbml0aW9uTWFuYWdlciwgU2hhcGVJdGVtLCBUSEVNRSwgdHlwZXMgfSBmcm9tIFwiLi4vc2hhcGV6LmpzXCI7XHJcbmltcG9ydCB7IFN6RGVmaW5pdGlvbiB9IGZyb20gXCIuL2RlZmluaXRpb24uanNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3pTaGFwZUl0ZW0gZXh0ZW5kcyBTaGFwZUl0ZW0gaW1wbGVtZW50cyBTaGFwZUl0ZW0ge1xyXG5cdHN0YXRpYyBnZXRJZCgpIHtcclxuXHRcdHJldHVybiAnc3pJdGVtJztcclxuXHR9XHJcblx0Ly8gQHRzLWlnbm9yZVxyXG5cdGRlZmluaXRpb24hOiBTekRlZmluaXRpb247XHJcblx0Y29uc3RydWN0b3IoZGVmaW5pdGlvbjogU3pEZWZpbml0aW9uKSB7XHJcblx0XHRpZiAoU3pTaGFwZUl0ZW0uY29uc3RydWN0b3JDYWNoZS5oYXMoZGVmaW5pdGlvbi5nZXRIYXNoKCkpKSB7XHJcblx0XHRcdHJldHVybiBTelNoYXBlSXRlbS5jb25zdHJ1Y3RvckNhY2hlLmdldChkZWZpbml0aW9uLmdldEhhc2goKSkhO1xyXG5cdFx0fVxyXG5cdFx0c3VwZXIobnVsbCBhcyBhbnkpO1xyXG5cdFx0dGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcclxuXHRcdHRoaXMuZGVmaW5pdGlvbi5nZXRIYXNoKCk7XHJcblx0XHRTelNoYXBlSXRlbS5jb25zdHJ1Y3RvckNhY2hlLnNldChkZWZpbml0aW9uLmdldEhhc2goKSwgdGhpcyk7XHJcblx0fVxyXG5cdHN0YXRpYyBjb25zdHJ1Y3RvckNhY2hlOiBNYXA8c3RyaW5nLCBTelNoYXBlSXRlbT4gPSBuZXcgTWFwKCk7XHJcblxyXG5cdHN0YXRpYyBnZXRTY2hlbWEoKSB7XHJcblx0XHRyZXR1cm4gdHlwZXMuc3RyaW5nO1xyXG5cdH1cclxuXHRnZXRJdGVtVHlwZSgpIHtcclxuXHRcdHJldHVybiAnc2hhcGUnO1xyXG5cdH1cclxuXHRlcXVhbHMob3RoZXI6IEJhc2VJdGVtKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gb3RoZXIuZ2V0SXRlbVR5cGUoKSA9PSB0aGlzLmdldEl0ZW1UeXBlKCkgJiYgKG90aGVyIGFzIFN6U2hhcGVJdGVtKS5kZWZpbml0aW9uID09IHRoaXMuZGVmaW5pdGlvbjtcclxuXHR9XHJcblx0ZHJhd0l0ZW1DZW50ZXJlZENsaXBwZWQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHBhcmFtZXRlcnM6IERyYXdQYXJhbWV0ZXJzLCBkaWFtZXRlcj86IG51bWJlcik6IHZvaWQge1xyXG5cdFx0aWYgKCFwYXJhbWV0ZXJzLnZpc2libGVSZWN0LmNvbnRhaW5zQ2lyY2xlKHgsIHksIGRpYW1ldGVyISAvIDIpKSByZXR1cm47XHJcblx0XHRpZiAoIWRpYW1ldGVyKSB0aHJvdyBuZXcgRXJyb3IoKTtcclxuXHRcdHRoaXMuZHJhd0l0ZW1DZW50ZXJlZEltcGwoeCwgeSwgcGFyYW1ldGVycywgZGlhbWV0ZXIpO1xyXG5cdH1cclxuXHRnZXRCYWNrZ3JvdW5kQ29sb3JBc1Jlc291cmNlKCk6IHN0cmluZyB7XHJcblx0XHRyZXR1cm4gVEhFTUUubWFwLnJlc291cmNlcy5zaGFwZTtcclxuXHR9XHJcblxyXG5cclxuXHRzdGF0aWMgZGVzZXJpYWxpemUoZGF0YTogYW55KSB7XHJcblx0XHQvLyBkZWJ1Z2dlcjtcclxuXHRcdGNvbnNvbGUubG9nKCdkZXNlcmlhbGl6ZScsIGRhdGEpO1xyXG5cdFx0aWYgKGRhdGEubGVuZ3RoIDwgNCkgZGVidWdnZXI7XHJcblx0XHQvLyB0aGlzLmRlZmluaXRpb24gPSBTekRlZmluaXRpb24uZnJvbVNob3J0S2V5KGRhdGEpO1xyXG5cdFx0cmV0dXJuIG5ldyBTelNoYXBlSXRlbShuZXcgU3pEZWZpbml0aW9uKGRhdGEpKTtcclxuXHR9XHJcblx0c2VyaWFsaXplKCk6IHN0cmluZyB8IG51bWJlciB8IG9iamVjdCB7XHJcblx0XHRsZXQgaCA9IHRoaXMuZGVmaW5pdGlvbi5nZXRIYXNoKCk7XHJcblx0XHRpZiAoaC5sZW5ndGggPCA0KSBkZWJ1Z2dlcjtcclxuXHRcdC8vIGNvbnNvbGUubG9nKCdzZXJpYWxpemUnLCBoKTtcclxuXHRcdHJldHVybiBoO1xyXG5cdH1cclxuXHQvLyBkZXNlcmlhbGl6ZShkYXRhOiBhbnksIHJvb3Q/OiBHYW1lUm9vdCk6IHN0cmluZyB8IHZvaWQge1xyXG5cdC8vIFx0dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcblx0Ly8gfVxyXG5cclxuXHJcblx0Z2V0QXNDb3B5YWJsZUtleSgpOiBzdHJpbmcge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcblx0fVxyXG5cdGVxdWFsc0ltcGwob3RoZXI6IEJhc2VJdGVtKTogYm9vbGVhbiB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuXHR9XHJcblx0ZHJhd0Z1bGxTaXplT25DYW52YXMoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuXHRcdHRoaXMuZGVmaW5pdGlvbi5kcmF3RnVsbFNpemVPbkNhbnZhcyhjb250ZXh0LCBzaXplKTtcclxuXHR9XHJcblx0ZHJhd0l0ZW1DZW50ZXJlZEltcGwoeDogbnVtYmVyLCB5OiBudW1iZXIsIHBhcmFtZXRlcnM6IERyYXdQYXJhbWV0ZXJzLCBkaWFtZXRlcjogbnVtYmVyKTogdm9pZCB7XHJcblx0XHR0aGlzLmRlZmluaXRpb24uZHJhd0NlbnRlcmVkKHgsIHksIHBhcmFtZXRlcnMsIGRpYW1ldGVyKTtcclxuXHR9XHJcblxyXG5cclxuXHJcblx0c3RhdGljIGluc3RhbGwobW9kOiBNb2QpIHtcclxuXHJcblx0XHRtb2QubW9kSW50ZXJmYWNlLmV4dGVuZENsYXNzKFNoYXBlRGVmaW5pdGlvbk1hbmFnZXIsICh7ICRvbGQgfSkgPT4gKHtcclxuXHRcdFx0Z2V0U2hhcGVJdGVtRnJvbURlZmluaXRpb24odGhpczogU2hhcGVEZWZpbml0aW9uTWFuYWdlciwgZGVmaW5pdGlvbjogU2hhcGVEZWZpbml0aW9uKTogU2hhcGVJdGVtIHtcclxuXHRcdFx0XHRpZiAoIShkZWZpbml0aW9uIGluc3RhbmNlb2YgU3pEZWZpbml0aW9uKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICRvbGQuZ2V0U2hhcGVJdGVtRnJvbURlZmluaXRpb24uY2FsbCh0aGlzLCBkZWZpbml0aW9uKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuICh0aGlzLnNoYXBlS2V5VG9JdGVtIGFzIFJlY29yZDxzdHJpbmcsIFNoYXBlSXRlbT4pW2RlZmluaXRpb24uZ2V0SGFzaCgpXSA/Pz0gbmV3IFN6U2hhcGVJdGVtKGRlZmluaXRpb24pO1xyXG5cdFx0XHR9XHJcblx0XHR9KSk7XHJcblxyXG5cdFx0bW9kLm1vZEludGVyZmFjZS5yZWdpc3Rlckl0ZW0oU3pTaGFwZUl0ZW0sIGRhdGEgPT4gU3pTaGFwZUl0ZW0uZGVzZXJpYWxpemUoZGF0YSkpO1xyXG5cdH1cclxuXHJcbn1cclxuXHJcbiJdfQ==