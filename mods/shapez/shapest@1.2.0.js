shapez;
const { Application, CHANGELOG, AnimationFrame, compressionPrefix, asyncCompressor, AtlasDefinition, atlasFiles, getLogoSprite, BackgroundResourcesLoader, BufferMaintainer, enableImageSmoothing, disableImageSmoothing, getBufferVramUsageBytes, getBufferStats, clearBufferBacklog, makeOffscreenBuffer, registerCanvas, freeCanvas, cachebust, MAX_MOVE_DISTANCE_PX, clickDetectorGlobals, ClickDetector, IS_DEBUG, SUPPORT_TOUCH, IS_MAC, THIRDPARTY_URLS, A_B_TESTING_LINK_TYPE, globalConfig, IS_MOBILE, getDeviceDPI, smoothenDpi, prepareHighDPIContext, resizeHighDPICanvas, resizeCanvas, resizeCanvasAndClear, DrawParameters, initDrawUtils, drawRotatedSprite, drawSpriteClipped, APPLICATION_ERROR_OCCURED, ExplainedResult, Factory, GameState, gMetaBuildingRegistry, gBuildingsByCategory, gComponentRegistry, gGameModeRegistry, gGameSpeedRegistry, gItemRegistry, initBuildingsByCategory, GLOBAL_APP, setGlobalApp, BUILD_OPTIONS, InputDistributor, InputReceiver, Loader, createLogger, serializeError, stringifyObjectContainingErrors, globalDebug, globalLog, globalWarn, globalError, logSection, compressU8, compressU8WHeader, decompressU8WHeader, compressX64, decompressX64, Dialog, DialogLoading, DialogOptionChooser, DialogWithForm, FormElement, FormElementInput, FormElementCheckbox, FormElementItemChooser, queryParamOptions, ReadWriteProxy, Rectangle, PROMISE_ABORTED, RequestChannel, RestrictionManager, RandomNumberGenerator, sha1, getNameOfProvider, CRC_PREFIX, computeCrc, STOP_PROPAGATION, Signal, SingletonFactory, ORIGINAL_SPRITE_SCALE, FULL_CLIP_RECT, BaseSprite, SpriteAtlasLink, AtlasSprite, RegularSprite, StaleAreaDetector, StateManager, TextualGameState, TrackedState, isAndroid, isIos, getPlatformName, make2DUndefinedArray, newEmptyMap, randomInt, accessNestedPropertyReverse, randomChoice, fastArrayDelete, fastArrayDeleteValue, fastArrayDeleteValueIfContained, arrayDelete, arrayDeleteValue, epsilonCompare, lerp, findNiceValue, findNiceIntegerValue, formatBigNumber, formatBigNumberFull, waitNextFrame, round1Digit, round2Digits, round3Digits, round4Digits, clamp, makeDivElement, makeDiv, makeButtonElement, makeButton, removeAllChildren, isSupportedBrowser, formatSecondsToTimeAgo, formatSeconds, round1DigitLocalized, formatItemsPerSecond, rotateFlatMatrix3x3, generateMatrixRotations, rotateDirectionalObject, safeModulo, smoothPulse, fillInLinkIntoTranslation, generateFileDownload, startFileChoose, getRomanNumber, enumDirection, enumInvertedDirections, enumDirectionToAngle, enumAngleToDirection, arrayAllDirections, Vector, mixVector, enumDirectionToVector, AchievementProxy, enumSavePriority, AutomaticSave, BaseItem, BeltPath, Blueprint, gBuildingVariants, registerBuildingVariant, getBuildingDataFromCode, buildBuildingCodeCache, getCodeFromBuildingData, MetaAnalyzerBuilding, enumBalancerVariants, MetaBalancerBuilding, arrayBeltVariantToRotation, beltOverlayMatrices, MetaBeltBuilding, MetaBlockBuilding, MetaComparatorBuilding, MetaConstantProducerBuilding, MetaConstantSignalBuilding, enumCutterVariants, MetaCutterBuilding, MetaDisplayBuilding, MetaFilterBuilding, MetaGoalAcceptorBuilding, MetaHubBuilding, MetaItemProducerBuilding, MetaLeverBuilding, enumLogicGateVariants, MetaLogicGateBuilding, enumMinerVariants, MetaMinerBuilding, MetaMixerBuilding, enumPainterVariants, MetaPainterBuilding, MetaReaderBuilding, enumRotaterVariants, MetaRotaterBuilding, MetaStackerBuilding, MetaStorageBuilding, enumTransistorVariants, MetaTransistorBuilding, MetaTrashBuilding, arrayUndergroundRotationVariantToMode, enumUndergroundBeltVariants, enumUndergroundBeltVariantToTier, MetaUndergroundBeltBuilding, enumVirtualProcessorVariants, MetaVirtualProcessorBuilding, arrayWireRotationVariantToType, wireOverlayMatrices, wireVariants, MetaWireBuilding, MetaWireTunnelBuilding, USER_INTERACT_MOVE, USER_INTERACT_ZOOM, USER_INTERACT_TOUCHEND, enumMouseButton, Camera, enumColors, enumColorToShortcode, enumShortcodeToColor: enumShortcodeToColor$1, enumColorsToHexCode, enumColorMixingResults, Component, initComponentRegistry, curvedBeltLength, FAKE_BELT_ACCEPTOR_SLOT, FAKE_BELT_EJECTOR_SLOT_BY_DIRECTION, BeltComponent, enumBeltReaderType, BeltReaderComponent, enumClippedBeltUnderlayType, BeltUnderlaysComponent, ConstantSignalComponent, DisplayComponent, FilterComponent, GoalAcceptorComponent, HubComponent, ItemAcceptorComponent, ItemEjectorComponent, enumItemProcessorTypes, enumItemProcessorRequirements, ItemProcessorComponent, ItemProducerComponent, LeverComponent, enumLogicGateType, LogicGateComponent, MinerComponent, StaticMapEntityComponent, MODS_ADDITIONAL_STORAGE_ITEM_RESOLVER, StorageComponent, enumUndergroundBeltMode, UndergroundBeltComponent, enumWireType, enumWireVariant, WireComponent, WireTunnelComponent, enumPinSlotType, WiredPinsComponent, GameCore, DynamicTickrate, Entity, EntityComponentStorage, EntityManager, GameLoadingOverlay, enumGameModeIds, enumGameModeTypes, GameMode, initGameModeRegistry, initGameSpeedRegistry, GameSystem, MODS_ADDITIONAL_SYSTEMS, GameSystemManager, GameSystemWithFilter, getRandomHint, MOD_ITEM_PROCESSOR_SPEEDS, HubGoals, BaseHUDPart, DynamicDomAttach, GameHUD, HUDBaseToolbar, HUDBetaOverlay, HUDBlueprintPlacer, HUDBuildingPlacer, HUDBuildingPlacerLogic, HUDBuildingsToolbar, HUDCatMemes, HUDColorBlindHelper, MODS_ADDITIONAL_CONSTANT_SIGNAL_RESOLVER, HUDConstantSignalEdit, HUDChangesDebugger, HUDDebugInfo, HUDGameMenu, HUDInteractiveTutorial, HUDKeybindingOverlay, HUDLayerPreview, HUDLeverToggle, HUDMassSelector, HUDMinerHighlight, HUDModalDialogs, HUDPuzzleNextPuzzle, enumNotificationType, HUDNotifications, HUDPinnedShapes, HUDPuzzleBackToMenu, HUDPuzzleCompleteNotification, HUDPuzzleDLCLogo, HUDPuzzleEditorControls, HUDPuzzleEditorReview, HUDPuzzleEditorSettings, HUDPuzzlePlayMetadata, HUDPuzzlePlaySettings, HUDSandboxController, HUDScreenshotExporter, HUDSettingsMenu, HUDShapeTooltip, HUDShapeViewer, HUDShop, HUDStandaloneAdvantages, HUDStatistics, enumDisplayMode, statisticsUnitsSeconds, HUDShapeStatisticsHandle, HUDPartTutorialHints, HUDTutorialVideoOffer, HUDUnlockNotification, HUDVignetteOverlay, HUDWatermark, HUDWaypoints, HUDWireInfo, HUDWiresOverlay, HUDWiresToolbar, initItemRegistry, MODS_ADDITIONAL_ITEMS, itemResolverSingleton, typeItemSingleton, BooleanItem, BOOL_FALSE_SINGLETON, BOOL_TRUE_SINGLETON, isTrueItem, isTruthyItem, ColorItem, COLOR_ITEM_SINGLETONS, ShapeItem, keyToKeyCode, KEYCODES, KEYMAPPINGS, KEYCODE_LMB, KEYCODE_MMB, KEYCODE_RMB, getStringForKeyCode, Keybinding, KeyActionMapper, GameLogic, BaseMap, MODS_ADDITIONAL_SHAPE_MAP_WEIGHTS, MapChunk, MapChunkAggregate, CHUNK_OVERLAY_RES, MOD_CHUNK_DRAW_HOOKS, MapChunkView, MapView, defaultBuildingVariant, MetaBuilding, registerBuildingVariants, initMetaBuildingRegistry, initBuildingCodesAfterResourcesLoaded, PuzzleGameMode, PuzzleEditGameMode, PuzzlePlayGameMode, rocketShape, finalGameShape, generateLevelDefinitions, RegularGameMode, enumAnalyticsDataSource, ProductionAnalytics, layers, GameRoot, MODS_ADDITIONAL_SUB_SHAPE_DRAWERS, TOP_RIGHT, BOTTOM_RIGHT, BOTTOM_LEFT, TOP_LEFT, enumSubShape, enumSubShapeToShortcode, enumShortcodeToSubShape, createSimpleShape, ShapeDefinition, ShapeDefinitionManager, SoundProxy, BELT_ANIM_COUNT, BeltSystem, BeltReaderSystem, BeltUnderlaysSystem, ConstantProducerSystem, ConstantSignalSystem, MODS_ADDITIONAL_DISPLAY_ITEM_RESOLVER, MODS_ADDITIONAL_DISPLAY_ITEM_DRAW, DisplaySystem, FilterSystem, GoalAcceptorSystem, HubSystem, ItemAcceptorSystem, ItemEjectorSystem, MOD_ITEM_PROCESSOR_HANDLERS, MODS_PROCESSING_REQUIREMENTS, MODS_CAN_PROCESS, ItemProcessorSystem, ItemProcessorOverlaysSystem, ItemProducerSystem, LeverSystem, LogicGateSystem, MapResourcesSystem, MinerSystem, StaticMapEntitySystem, StorageSystem, UndergroundBeltSystem, WireNetwork, WireSystem, WiredPinsSystem, ZoneSystem, THEMES, THEME, applyGameTheme, BaseGameSpeed, FastForwardGameSpeed, GameTime, PausedGameSpeed, RegularGameSpeed, enumHubGoalRewards, enumHubGoalRewardsToContentUnlocked, LANGUAGES, Mod: Mod$1, ModInterface, ModMetaBuilding, MOD_SIGNALS, ModLoader, MODS, ACHIEVEMENTS, AchievementProviderInterface, Achievement, AchievementCollection, AdProviderInterface, AdinplayAdProvider, GamedistributionAdProvider, NoAdProvider, AnalyticsInterface, ClientAPI, ShapezGameAnalytics, GoogleAnalyticsImpl, NoAchievementProvider, NoGameAnalytics, SoundImplBrowser, StorageImplBrowser, StorageImplBrowserIndexedDB, PlatformWrapperImplBrowser, SteamAchievementProvider, StorageImplElectron, PlatformWrapperImplElectron, GameAnalyticsInterface, SOUNDS, MUSIC, SoundInstanceInterface, MusicInstanceInterface, SoundInterface, FILE_NOT_FOUND, StorageInterface, PlatformWrapperInterface, enumCategories, uiScales, scrollWheelSensitivities, movementSpeeds, autosaveIntervals, refreshRateOptions, ApplicationSettings, BaseSetting, EnumSetting, BoolSetting, RangeSetting, PuzzleSerializer, Savegame, compressObject, decompressObject, BaseSavegameInterface, savegameInterfaces, getSavegameInterface, enumLocalSavegameStatus, SavegameManager, SavegameSerializer, SavegameInterface_V1000, SavegameInterface_V1001, SavegameInterface_V1002, SavegameInterface_V1003, SavegameInterface_V1004, SavegameInterface_V1005, SavegameInterface_V1006, SavegameInterface_V1007, SavegameInterface_V1008, SavegameInterface_V1009, SavegameInterface_V1010, types, BasicSerializableObject, serializeSchema, deserializeSchema, verifySchema, extendSchema, globalJsonSchemaDefs, schemaToJsonSchema, BaseDataType, TypeInteger, TypePositiveInteger, TypePositiveIntegerOrString, TypeBoolean, TypeString, TypeVector, TypeTileVector, TypeNumber, TypePositiveNumber, TypeEnum, TypeEntity, TypeEntityWeakref, TypeClass, TypeClassData, TypeClassFromMetaclass, TypeMetaClass, TypeArray, TypeFixedClass, TypeKeyValueMap, TypeClassId, TypePair, TypeNullable, TypeStructuredObject, SerializerInternal, AboutState, ChangelogState, GAME_LOADING_STATES, gameCreationAction, GameCreationPayload, InGameState, KeybindingsState, LoginState, MainMenuState, MobileWarningState, ModsState, PreloadState, PuzzleMenuState, SettingsState, WegameSplashState, T, autoDetectLanguageId, matchDataRecursive, updateApplicationLanguage } = shapez;

var flipper = "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDcuMS1jMDAwIDc5LmRhYmFjYmIsIDIwMjEvMDQvMTQtMDA6Mzk6NDQgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCAyMy4wIChNYWNpbnRvc2gpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOkZDMkFGQkY5NkUyQTExRUM5QUY0OTQyNUQyODU2NURGIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOkZDMkFGQkZBNkUyQTExRUM5QUY0OTQyNUQyODU2NURGIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6RkMyQUZCRjc2RTJBMTFFQzlBRjQ5NDI1RDI4NTY1REYiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6RkMyQUZCRjg2RTJBMTFFQzlBRjQ5NDI1RDI4NTY1REYiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz43izVKAAATMklEQVR42uzd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";

var flip_white = "";

var rotate31 = "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";

var rotate32 = "";

var rotate81 = "iVBORw0KGgoAAAANSUhEUgAAAKAAAACgCAYAAACLz2ctAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADr8AAA6/ATgFUyQAADmvSURBVHhe7Z1nlFzHld9rkIHJmAAMBhkgQIAAg6gVqWQSJhUoUVqJoiivZK+1XlvyJ3+yv698/E17fI7XctDx8Wp91lrtai1RtEmtGMSgQDGIJAKJRIRBGgCTM8IAaN/frb7dr990eK/7dc8AnD9OnUF3v1Dv1r/uvXXrVj03j3nMYx7zmMc8ZgN16b/ziIGn/u8zqdGxcbdo4ULX2triHvnsp+blWCbmBRcRzz3/Yqrn1Gk3MDDkRkfH3KVLl9zCBQtcfX29knDVqg73T7/xtXl5xsS8wCLgf/31j1KnTp1xg4ND7sqVK+769RsulUrpbwsW1LlFixa5FStWuI6Odrdl8yb3+Fe+OC/XiJgXVAl8/3/8Zer48VNubGzMTU9fyxAvjAWiDZcsWeLa21e6XXfscE989cvzso2AeSEVwQ/+6oep99475PD3rl+/rt9BtAXi+y2oWyCfUu76jRvuhvwGMevq6tzixYtcZ0eH+9CH7nJf+sPPz8u3BJDiPPLgZ089kzrZc9qNjU8o+SDXQiHesmXLXVNjk2tpaXHNUhoaGtzSpUuVmJDw6tVp1z8w6A4feT99pXkUw3wPzYNnfv5c6uDBw+7U6TMy2Lis30GwFSvqXVNTs1u2fLmSURjnpq9Nu8mJCTc+Pi7+4WV3QzQixzI42blju/v2t745L+MiqLlwnn762dTFvn43NDTkpqRxb4hDXwpon1qA29xI3XCXL192ExOTQqirGUItF9K1tXW4+oZ6Id+i9BlwULSeDExGx0bd2OiokhB4wq4QbSnHyyClrgxR1+q5o2DBQu/jNorGx89tb2tze/Z8suIK1uwJf/zjJ1NnzvW6gf5BNy4a4+rVK+7atexoshiSaYcoF5lZF0iwZMlSNbmtK1eKj7ck/UsWkPTSpSk3MjLsxmWwcu3atfQvs4+kSMx16FT4uLgcdMjm5ia3pqvLfePrj5d9k6oTEHN25Mgx13v+gpuchHjT0mClSRdE5TKMeoGZ9Vq8eLH4eU1uZdtKEfqKgg16XUg3IR1reFg0+9SkknK2UU0NyrV9+Gm562hvd1u2bnRf/cqXYt+wejUU/Nf/9pepM2fOqnny5iwe8QyVyTHOybn1w89bUd/gVormq5e/6vcVgvqD10QDjrrBwcGMKZ4tVJN8QRgRG8Q1uW3rZvetfxXP561aLb/75/9Zg7eXLl/KId5C8SW8M98kI8ql8gClB+LVFCYuAAOIkZER0c5X+Ua/556MeDG71BVNWEpcXItA9fDQgHQ6McXT0+lfPBgxNzfLIGbZsrzPVCvSlAuiATwfmn5qairH1aDuTU2Nbvu2rbFImPgTv/jSr1PvvLPfnew5pdNVRj5mDDBhq1atcmu6u12bNKyOJsWvKI341YzSmBCGAceBA/vdmTNn1C81nxTCNTWL39cq9SxAmHygkSYnJ8UUD+roOGiK28SMb96y1a1bu06eXa4ZeK5EGqJKBDb1AeGuiLxGR0fcxb4+d/78efV5LUaKhcAv3HH7Nvcn3/xGpMokWuPnX3g5tVfId+rMOXXKIR8NRwO2i5/Q3b3WrVmzxrW1tykZqTCObSnE0QxRD4Vn9OYzZ067N19/XQV6/brv0dSroaHRtbS2lja9eTAtmo+GwR+00AwgNLNlyxa3845dbrV0xEVC8jjPVgxJXacY6JxKQpEbM0MXhIDHjx93Fy9e0I7M75jjzo72yIH4eJItglde+W3qrbf2uh4xu5fTZhehrBChr1+/3m3ffrv0/s2uo6NDv6OiNKyRsFjBbOf7PlyiXItCvagfvtrRo0dcb29v2vz6hlxO+ERMJYQh5BK3cbkHdUmlrqcHXZ6A/E3JP0aRTaIpCNMgh3D94paoz11JsbaivtQfd4IOSmiGTgYBISfPSGwUrfncsz//jj54ESQ2E7LvwHte80lFjHxUcsOGDW6bkG/Dxo1qzpaKNuSB4jZqKcS5Hj0Vv+/06VPu3Lmz2qMNCBStBznKIR/gHBs9L5dRIlN3AFM1MjzqTp86LdrjQob0lSBpOZYC96P9eL7GxkZt1y1bb1MLh+wAA87+/gH39DPPmvUuiEQI+N+//4PUyZP4fFPauFQSE7Zp02Z3u5Bv7dq1SkZ60GyD+jG7cV603qmeHjc2muvDMEBC8xHvQ9DlgnNxPRrqG92ypb7TAfzM/oF+sRQ9ooEH1FyXi1qTLwzfzg1u3bp14tevVbnxnF7Gl8RHvJA+sjAqJuAP/+bvU8dPnFSNEvT5Nm3a5Hbs2KEDDrRJvsaMIsAoMo7aEAgGk9gn/t7x48ekl/ZnCMBonEFRg/RqRr9JdBY0X700ECEKtEOdNY6MIHvPnXMnRW4jw8NzKnCdD8Xki5xaxRTj2/MXEw2Q6+DQsP6/GCoi4LPPvZg6frxHEzTJkaOiS5cuUY23bft2t2r1ao2Yl0u+pIF/wmwFmu+caEB6KYQAS5Z4k2KDo6SAqaoXLYhfuSht0qkHTnxPz0l35izzzdl63IygcxErxSf04SrcjRtucnLKvfjSr4o+WEUEJOOjr69ferDPFmGapqOj022//Xa3evUqdVbzES0q+ZLkKA08NYVZ6NVGJ0Rijb5wkWgqMR/1KxpUgFHrFwVcC78XEmIZrDOi9RgE0RkqNcXVRFRZID/ipaYBkS0Dk9HRUf1cCGUTENN79qxoERnxcjPifM0trTLa3S4+wXrVfOWSj0MiPndk4PD39p5zJ46fcEPS8Ob3cR9NGpBRrw2QkgYaFV+Jgm+JDJAZg59zYoqPHD6iDWWj5bmCqOQDKJtgB+P56FRTU8VnhMqS9i9/+Uqqp+eU+H1j6vcB/KaNMiJiVERvyDfDEZV81QDZNz2ibS5csJgVjZ1SQpBilbTpDQPNQPipvkFMcVrLQjiC1idOHHdnz9TGFHPfqCUO0OjhjHHIuEisSzGURcATQr6+/kG9IVgs/lNHZ4eOemnMsBaJ+kAxnzkyGPWeO3tWHP+z2uCefJ4UjU2N2mGqST4DWTWEeIJ+MSRkAHdMBkV9Fy+qpq4GCcshVRwwPTc2NpoZUGER0Yr41cUQm4DPPPNc6vTps9KofqaDIHGrmN7NQj5iQeYDGKI+dDVkQ0PiCJ84dswdP3FCB0s3bqRDLqqRGrTDmFmsNiA5mrZR7hs095CQsNCRo0d0ZH7tGv5gciSs9rNpfHNkxA3LqNd8WZ6NTJnPPVJ8yWpsAhLvGxokdOBHvQh09eou1y0jX3yAch62WvJBMH19F5V8/X19GoODlAhnmfZOEiLyj9KrhUWLFrvlQkDipPwfeVEnJvcZkDA1aCGtmwX4spoLKfVmQAoI4rfIoKQUYkn+uedfSl2UHnp12hqyThM1u9esUU0SNmNRyFgt8gEEQpJBX9+FtMb2pldDI0KA+vrq+n35gEyCsy1GfuRJaObkyZMBP7VyEpajEOKCzjM6MqoyNveGsFZb+0r9fzHEImBPz+l0zM8LZplov47OTtexqnNGyKUWD14INBwBZ6baTp9isJTNSsFFQGsHR6S1BqT386k+6G0kxH/CDzyhGrt6/mCSMB8W/8/qa+aXddKlEJmAL774qxRTK6TjcBMaDt9vTdcazXGrtSYx5CMQ9RseHpaGPOkGBgYygvE+2HJ1jJcGpsdqCauvHxWLPyh1CXYENB8DpjNnz6VNse84YcxGx8kHfD7Wwnjz60fBWJhWsYyfenhPyUpGboFTp866oaERdy0dP0PFtre3uU4Z/TK6CwqkVsLJdx+yTa6LH3LhQq8GeI18HEtD+1Fo7U0vCMtI66OuQHYUTl0ZUeKzBkeVQdRKvlFgC7IY7FlsFf+6va20+QWRCdh73gedbb4XB57UKgRowuP7Wgmn0H1SUj8ycvou9rtLU1k/ijricxGLW8y8bI0bMd/90MAaqhBnXeeK08dAOshHcHp6OtcM17repTAp/h8JHaRkUU8zvyTfRkEkAj751DOpQbRfeoSD+ejE9xMCWgpOrQTDfYrdy/skYxoWCDbeEmloyFdr01uqvpmOsSK73JNnIF6Jabt82Q/4Sl1ntjAqch4ZRdbTWk/ML1nRjz762UiVjdQSp2Tw4QO4vjExGZAPLYgAayWYKPehiqzpJePETAJYIuYObWPauhaIKhfqhFvAXLqdQ2hjQsxacJnAXAP1wtcOpuXjmjU1Fw8+BxGJgH39TJZnI9zNzS2a+UD60lwiH0AopNZfT2XJB6h3rTVfdEjdFuYm6aIFadQ5yj0FAyZCR/ylvtSfWHBzhPifoWSLYH5xMK0XYnLb2tpci4x8McW1IGCce0A0RrpLZWAUJByDEZYKkC6OsHieuKUQ8h0X/q5QoS6YLzS2jSIBpozGTDo7J0ng5kBAGygx70vuY0tLs36OgpIEPN+bmzpO7A8HMzj4mEuAdLgGhDeCHYReSrCUBFAcfPzEOIVF9UGTbvAZH1NuYnw873lFiw40mMIaks8+jGHAkW/ScFH+lLbZBh2FBI+JiWyoCB+2UQj4mU8/FLnCJQk4LCy31WIAzYcJTkIwUU6Pew+Ox0clGRYNYoA87FgwOjKseXiDAwMzCmlahQrnhdf5Any08fERNzScPTbftfMWjh+Sa48O6ygy25DkJzbqwiV8qrlIQDoeo3QSPUxrLxFt3dDYoP+PiqIEJPGAWQSyWwGCaGtrV8FUqv2qQT7AOTQaOYksB4CMaEWEBAlx7i9fmlIyximkSrEXYBh0TkaqaMF855Uql+W6WBgjH3Vly9/V0oHwpRYsKF/O1SIu0206ShcNHhwkLV++TBRUdP8PFCXgwOCQm5okR81/pmHZI2WFmOFKHPpqkc9A3cjM2b5tu9uwgdV4LRr7AwiLxi6nyNl6jSAquZ4VruE7zhKV73qp89q13ZrGT2NzTFxUi3wAPhAsD7sN5Doi6zgoyiJs/NVALI1lhvhXlQRyq00+wPmENFibwsKo24SI7EbA4Ik5YBoa/xAtnq9A4ErrwDXyXTtYqAN1QUtTN+q7dctWXdBFlIFjiL3SyFFJSL0rrXspYEnwYadEC9rAieetlw6z58F/FOvmBQ9++eXfpF565Tfu3LleNcE81LZt29xH7rvPdXauUuHFQVSZJCk8BHNFzOOY9NSR4SGNWWE2MB9X04HT9IFqXu0zZmVCXA8LLwCIslbMOgFjA3XFf2O+WbOZ5Vi+wz8mS8i0biEskGO5LoFodltlTQUFQtoAisJImOlOCFlMPsV+SwrIiGfdv3+f27t3rw7qkBHm9+67d7s//ZN/FqsSBQ9+6qmfp1759asy1PaLSkg8/ch997vdu3a5xjypV8UQVS7VECACQ0D4amTITIu/xS5WnliecEwv4huSrMrxDA6OHzumaVE42yBMQKtrmIAQhyD9rt27dUagGLjCAhk5mibkL3INuzeMLiF1oZBMLYhnQG4MPt5443V3+NAh8WN9iI7Mlw/fe7f7ymPx3hBQ0ASPyE2uXsma3+XL612zmN9FMVOYoh5aLSFyXRqVuCC7e7J8cFVnp+sSJ79rdZcvXat1FR+JFRTWtwYX2IRRrK78BplWrmyVRmG6skgRS4LpJZuI2CUEy39P2sBKLqolt0KAD2REMfvB4Mn4QfilVIfLh4IE1LnfdPiFZySutkJuEsf0RpVNrYUYBnePMlOSlrUKPVv8d3ER9Zk5jnr5RV6zKyeABkTrBbNfLAD98EMPxq5gQYkPD5N8YARcIL5JozqZ5pskhdkmH6AOpEYtXixmbpE3hexqEKwbZCO5AVMdLKzfwPQGmaiESZOF/3O9couv1xLV4mFZzYbsIB0zIMEMc/Z5bIwZ/zPkJeCzz76YmhKGW+oVI0rbsqKUlrg5IWZ6wUJ5zsVuqQiTnMEGGQgER/sInhmLixfP5xTb2NJMEaTRVPu0jwx5yMBBduUU8/3mityNgAzQDLgryKsc5H0qn4eWHSXi9zEtxHrWmxFR9QSNjMPPNJhmTQdmIbzpmVTfJ1gIJJspAmgqFrnjB/rPlWnAfJpvNsGzMv9rgzOAf80uYOUgPwH1zUDe/OIb0QtJmqQn3mwop+nQPISaOjpW6f+NAFm/L7cAjmGpJQFwSlZWc4c8lQLykTRBGMvcMzotHRb3rBzkJeAYBEyvn1XBCgEJ4M613lgM1LLcmkKezlWdbuttW93adWs1pldoVMx3yAet193d7TZt3qyjaGR1q0G137h/IY91PLQ0A5A9e+IFoA15CUhMyxxMCAfDaYCbRaiVdhH/zPVunZBv586d7vbbd7itW7fqZpvhwnYk/MaeOLfddpsuUS20L87NDrSehV8MjA8InJeLGVL6h1+8kHr11dfd+QsXhfE31CnfIQ1w//0f1V5uiCLgKG2QZENVfKVQXejxxLympEP6pAEm3n3HNJAswC4LvLyav/h+QU0JkdGo4edM4rlrTXJmkd55+x2dBWEeGBD7u+++e90Tj5f3dtAZGpD4zpWr2QHIQg3BNM/5AUg1mgKNT0IAJnV1V5fOhKzfsCmn8F1X1xrXupKN12/VKIEfhKH5yIu07HiA+1Gu/wdmSIv8ruAIh109eT9aqV2OagEaF1LkK9QzXPS1qnkKXYsg+xXRaJfFn2EVnRbRcsFCBjWxPuRhCQFoRSvBAYiVWxU8O6EXvwd4dtRfX79ctHyiBLzkruk2W/4zJsYPQOIlH9QKNhJFQJAEwhAkJWRCyhCFUVuwMJIjzjk5QU7bmJqWcCHbg3O5Dk435pdAdLCcPt2ji8gvXrzoyGzm2kZY6oMMjaRB3IxEpcPBDZ6PZzMQ/9vzYPkvLZxx4n/6i++nDh85qkmWCIq500e/8Kjr7FydEVwUAUaVcZzGQAOGj0cYNDikmhACQBoIMx1wI/Ldg/NUk6UTEJQtAaBBWWCNWWU5J73cAsJ2vZ/+5CcZrcxokIEa2Sy8XYlkUsx3cDs2CojzzMWQ1HWigOm3999/37391u91j21kB+6/78PuX/7pH5ddkRknfve7f5E6duKk9PhpNburVnW5Rx75rFvZ5vf5iPLQceQSR4hhAkIczALZKGxv1t/fp0H0KdGAnoDpA/MiN44XBqSy8BOE4g1PxPdshEv5L9/7Xvpo/xxGQl3nK6RtbGjUl/LwalN2jyW4ze+lnrlYxwmi1O9JAotw8OAht/edtzVP1Or4j/d80n39j75adkVyHDtyAHtOnXIjuo+eTy1q72h3mzdvibwEM65M4giRY4PHU0dSpt4/elR3GeX/TBOpmVVzcblI8XO5ONb5CsSmqFYl9iXfLZURrm42LnIBb775pv41UB/ORVtg2tmyTNeIDA5po3E9ZkYIXajfGnoWtPdFeYazZ8/oPoEcT6fLN4oGcWRXCSAbg9Pzvef09VzIDVCv27dvdX/3tz8q+UKaQsjxAXEwc0bAIiQWTIfXrBZCjeSRAURjP72enhPaYHw2/ysJYGYIw0BqXkvVKwWS2PWRT1grA+Sn50pDcS57Ux879r7bt/cd98Ybb7j9+/fr3tB0EiPtKen4v//9m+61119zv5dj3vr9G+71137n9so5HMu1rF1qDasj/DDTC9jeDotQCXIIiN+H6bUHZQCCOYkyAKk1+agj5pbtzNgyDuLxHb4b9aV3VlLQcuazcV3IossnRbPxbmBAeIrCMgV8PaxEMHOZ8ygMjtCKdBISXQ/s3+f27dvrt2GT787KQObdA/vdoYMH3ZnTp12ffHfxYp+S8vChg+7okSPqZtj0V63BM5DIe/lSLgEbhIBkwlSCHBP82GOP/9mZM+dU9cs9VfutXbvOdXV1aaMUQiXki2NGODZ4PObA7/9na1N9+joT43Qcemcws2RmQYD5vhciif8noleB0wCAIDPTcjYvfu7ceSWdv4/PeFmydIluA2LbbBgJAX+5HqEu1lOgTcfEt+J1YbxXmTW2kMzO8ZpnWs/hHtybOpgM4siuElAnljNgbdDoRsLVXavcN77+REWVyNGAV69eC4VgFrjlIljTBPlQIxnkBfcO3551FpCDhfM4/gSIC5WVMjgoVFrkXBbhB7UgDYEpupFuAEgB0ZmKQgsyAuY8Bi2trXKPVhkNN/uXElInrmUkhHxqmmVkiaYjwGumnfxLe8sAx+JPMsDCxbBjagnq7HMhr2bIB5iirRQhAnKD7PYQOMzhqaUgZpd8dTrKrCdNLD0oQGP5kIwMQNLvL2EkT+PzHOHC91by/aZrctMPybUoECDdP1UuvvhguF0HTcgruugAK9s63EohO9OYWJTgKxrw6yAX2tAalutg1njzAO4E96RdcDdmi4DcE01M4N7uz3OzPLdS5BJQWH4jPdfJDWjYQu+0nU3yGVhJxjZxJMsaCREQMxhk9EyKaTafllIMpX6PCmSF7IyQkBGT3dIi2hDzLZ2G8A6kzRA6fW/O43hN/mUbubSQ1Ye8NCWExTWqPQHpHHQWdoawulpHqRQhDcgI0t8AQSoBpeQjYBKo9LqYQHZA2LB+vZi6Fm1wgJCUhOJfTYpfhfmw72sNnpFBET4iZhoS2iIkkhfkAD0O8qEhMdkMaBYvzoZpbki9iWt69yjbPrUCHQDy2+643Jt3AtKRKkUOAW0kCRAIDYoZrgaSECB1RAPyPmLy9ojR8R3wJPRxPHyXKKYrCkHLrTfnIU+yY5qbxU8U/1CJJiREm/A9+yo3sPBfrU5A7lIvqkb9+FtL8gEIGB4B42pAwkqRwy6fBZ3uYdKQ9FAImPTzJilAbwqWaW8kJSpzbfnLb/iA/hmi3bMQCTnfSiWggzDCxszaiJoBE/+vV/Ixyi3c6Su9fzkg7EQg3gZf1EF9Zalrpch5UraBMPlzExpUHfGEkp2SaMAgIAu+CTGyocGhTGAXQL7lolV4FQKLguLcuxgJIRALmCoF9UMD4hsySIGEXvMVrmOSsosDNN90YAAC2Alr8ZLS8eFSyBDw5Zd/m/IE9MLHAUYDmkmrFEkIz5ugLDn4P1NcvA+Et5DbbAGdBicehx/TVv4z5BJRCSjE8ZahMhJyLe0k4gsSxjH/dS5CU9cCbgx1Z6OquPvA5EOmZfD/sPUmdG7CAITeXil5Kj0fBK9gRCRF6uLFC1p4/y8CMuHoNNGK5foMEDBuHYJED2KBmEeVS0LpadQrCflUE2hAZB30AQkTJYEMAWE5NzC5IxR6aN2CuUU+AwQhKk8uHq8JMOGgnQhlYH7xp5KGyQWNRQ4gU3PkDGqAOsJA52YDcsYyBgeoyCApjZ0hIA3oBZi9idcc5ZvgJMiXDwiCES5vbhroD5pecfCFdIyG7XUMperAecESBVwREg6K2edlOBR2OmWnKKbTqklGdmHwiiJaXSsFz4FlDN7Ty7kKBGQRkj2XJ6CRsDpEio00SShMZZGIwEyCaT/qumz5MvWrMJOlYNfKdj7/XVQw6GEKDS3I9m9KxMFB0cjDmcycONfLRVjmPmjNzl7B2apqA9mw/UgwPgwvmOtOAgECshNn1sb7G80h8gkQgRFmTMwfJhhtY8AsEJKx0WSxunMdtAlZHlNCIrbttSyXqI0LISjUB7IRrIWQwyNsPs7G42N6fd07Jgby1duem9kI/taKgPp8OjjNPgNWUYPoCSDXBAc0IICAlLkCyEZB8wzK6Je1G6ZlqKePzrN+OZr249yJiTHN9CB5VHfC15dFR4PNGQejBcjxqhCRDS65JtePowkLdRrOVz9dlxCkv6wBICD3DdafZ12U0CAswy71LdJqFiCIhXKjYlqk1kDDsOAIohD3I8cOASEcTO6SJcvkbzTth18zKYOHUTGfXA9TzmaTmE4NyKvAi7c0OyF0rlqlWTCQ0e5p12ctMW9tCk7iF0MpWXPdIBFqAYLPXgMGCUiEpPJYKMhqQFGxuWpWGlF+RiSlBFNL0JDasEIatCGCoX4amScZNILG5hoMXHT0Kn/5jOYi7RytSnYKL7SRi6fP8AhL4Z4P3aN7ULPhZZCABjQFvhLaopgMVdZzSMZBMA9tO8cCakkoqtI4qCGrAeX6vuQKXSST/s/cAGRhfxLifpAGmE+yiCTQCAREw125PKUjabsG8CQUrSj+JeTE9ARJmCFKWibM50Kyy0LisJlFI7NnXmNjs04TmokOY64Sz8Az2QBEoY+PdUyYgF7QYfKl/84hQEDCHZhfa3B6I6YX369Ug3KO9yNZupnd18+gpllI6Ldey25SrkLHzKfJxGf2kj59+rROBVooiO+JP/rk1JWajMrsST6UqutcgFqHgAaEFMSGWSeUBAIaUG4Q5p8IaC4JiYannoRg/LIBX2GEAQGNGMXqjEBJbYIwWQ2aO+JX/02ubyYe+AD3Mp1hsSAsxCP0gktgx5nmIzNas3NuYvIBnot3MKcfT+HllUz9MwTE1uckOyIgKXNJUIvTAwzIA0kMmAMyXgqZuSAgHYm3wVga/hvrf4kf2jUgKoVjuCfk490d/hX7noCsRQlqSTQx5laXsMp1yN+DxHEL+YvU0+rH/bl2sJPUEgHuJY5si+W5y1wgX7AGaBP/4pZs4BjQMDRQlPoSVKWB7XyIAmFYeNW1Zk1mwRHXpKDR+L1t5Urdeo2kUiOCZSwHAXHwHzUwPYSGZLZkZhkYKFxYfUdCrRGQZ6NzsFPDXGiTJJEhYL7H4vlNCLUAjR0umD4rwAdis9pPiaCEiKYdiHUGwwqQiMaFfOzzt379el2Mjw+HtuN1C2u7u3Vx/urVXXos4HzISOyR+wNIjXYeHxvX11wQKC9cfOwxX2EkznWsk7BXNXUJaug4IMBuQfZyEJaq8iL9/0qRJaDY9JwRJHeYhfUHpXDteu7Cc0hnpRQgDWteON8IyHlkJbPLJ1qQt0Ft33672yJkZMPJnTt36UtnNm/Zoun0RgDOZ9sNFh7ZzIteX66NFrRGL6vI+faM3I/tz1ipF8z4rhWy8k1/ofB+YRIIEDCsQcz5TIrryYD6zKyTCCj9v5LQc7mG/wh4bjQhviAvjtm8ebPujLr7zjvdzjvucJs2bdZNmtDIJiP+so/0po2blLiYbs3KRluLyYxTIFWw8B3X4XpkSqOd2ZsGP7TWUPKFBxx526A8BLoTN4ncjLMGRruENjBJVtBe6iNJA7FSq1DhfWYs/CFLmsU/LJXE1LKRkM2g0PBci+9JFOWaRrwg+SgsLkJL3nnnXao5161bp69Z7ezocLy6qlDBxLe3dyjZIXa48D1rXfTlhXL9raJ9+T7YAaICjVoJ/LNCk+x94V7c+e1CyFz1R3/709TvXntDp45gNz1v967d7s6779YRYhhR5BBHWBxpfl4hUC/ME/6RrXSLC691/NYd/D9ug4ZBnXTx0wRvTB/X2ZR88cUg+A1XAHIE3QEDWhBtTEdj7Yi9vBBQX//uEb8FSCkECVhKvvnAFOW7Bw64d955W9cmE34h0/yj93/YPf74lyoTniBzgb/78ZOpV3/3hghxQgXCMsddu3e5u+7yBAw3VJIEtKPKJSDfa6PKbywdDPqIQdCwaDoasxT5/LF+IJTvOO4X/J7PhIYohe4P7Bn8sfk3UuKqjPh1TU6onvw/KgGNfEZvI3Ec0Knee+9d9/Zbb8kAaUTvDx/uv+9e97UnHisswIjIXOD//OSp1G9ffUNYPqZCYtOdO3bd4e4WAuLfhBsh9DEvwufkQ/CIcghoDc/sBduoMUNCLI3vg6Au6l/JPZjLLFY3fmPkSdDZm/iZ+/pxfQrXjAqrP9N2jOT5f1xo3SIQMEw+UA4BkSubJr355huaNcT90ch/8OF73De+Xv6+gIbMBZ588unUb159XVg+qr0SHwhH/K6771FfJ9xgoY95ET4nH4JHxCUg9YRsJIGe6+11gwP+takQMh8BrXDTYjWTo7QuFnzuXtOdGWjQiMFrcz0+U7gv9QrPC5Ntc+zYMXfkyFGdRuQZMLF0cuaTecFNIVlxHUw6mogQDdlAfIcWIhGCgRL+pAXHQT7ygXIIiHvBa1lfe+13ugCMeuIj3/uhu9w//+M/KibGSMh0X1T9wsBoB/nRwEFBGgrIKgeFBJoUrMERyrHjx3WTH7Y5Y/tY5mj5Plz4numzgf4B11+ksD0am12eOXPGHT16VF9LwPa0+EDcNygT+wzpaCyIMiqmCt+Jz97EpmWRc176PxHAoXKX9P+KA/JFOzIavNXIdQN4JmSfBDIERJ0HJ5gRKlkQQWGDKvMqFmhgFiWxPS/+CdoQ7YKAwoXv4xQEjKYlKYFt4E72nBRyX5yh3bg2c9NssYap2rd3n9u3f787dOig7nqF2aJeHAc4l8ZUOWpJa+VSkFuGSaux28C5Rr4kAS9IJzNXw/OiCgTUHQQCSzC5EQ3BzUzgUeQEIgm0QlAvNibH/E4GMmO0x6LNxdyUVeiIco2gHCDdqJi/wYFBJT3f2e8kItABDh8+7A4efE9M7VF38sQJd1y08tGjR/QvnYTRcbDRCG0sqIsyCvdKIFgA5y1cADEWakikGuQDyALTnSsT1qZEzxwvhiwBVQOKQNKfuYmm4aR7bkk5CahgaYEmAyWgND4mDx8JICScc3wrslHyl5bCRXxd/N3GJtvByouHe7EwmzUezPNaIgPEHBbNi6k+KwUTTxSBgRDTcf19/aoFe3p69LerAe2JtcG0lcoq8Yf7sE0wWUSJkd5rGlSDfECJLvewOCnwz560Bkxn7hrTuAlzpgg/w8oiqBXxDNSPRFBIiKYG1IE1wWwQiWOer7S1FSgr291KKS0yKGA3BWvYIHSXqgCJWKxNOlZff5+a4eBv/MX04g+y8TiDD+so1BNZ+6SH0rE82sCskcGTgkGFtFPg+2qAjsJif+uQPCIpbUkgQ8AHH/hEHWY4yPIbN9IxrRLdq9bkA75+vmEM1IOGIUzBKDNOIexCJ0TjY1bx/6zBETzLPQnJQBoagN9IamWwQXa2mVeOpQ7WWHyP2aZYXSEd1yG9zI7LB56RwopFJSA3FnAOdYaAnpjxwzlxQODeEnEVUg861yuv/KYEM0oj5+l17UL6/zz4tWuY4eK9azbIVy54pnxQMktD4lMS6sCMGqF4Pk3Hast9DzAEhKRoYDQfn60DEL4JxumMSIBj0CY0qC4hKCE/62QUSwCgDjZNCAo8VmLAPeMVFUZAboc7QakUOQRcuFgElhYImkCX4+WkY+fiViIfftvICEs9x4R8XrA8H0SCeKRpMUfrGyGtmYSkpIeZpgSQirll4qjMOxsJDQx0/Cv8Sy8f1bpBQKkPxXxACKhz2CtW1KQNeAbb/d/AZqaJE5AH44F4JhGxCtd2xQzjliGfNLCGW8Z5P1x2oRPgGZEJiaAcNzw8JAMLRrST6SNCkOOZZWF7EEt4CObwedMp1xNzjpuQMWlFQOdAw6oGlPpSJ9tfEBJHuUalYJtmPyjLanRM8FUZmFWKnNrjVxixELh/cD/iuxlBvUvVnd/R9IzqgpoMmKAv9vW5Q4cO6bty35JCXLAgRH6ktkEw9v/zmtBvFQKZ0YoU6+yFYHUn3EEdzCXgOivkephgtFItFAFjAzpNcLdcogJsWlkpcgjIvsQWFtCGwcSEFiXPFSD4Ug0YBWiQpdKQpHTh6wXNDNeg8THL7EPDG4t4OyafSyFLQjRhixJRX2ojmtE2TioFOj8bQ05P+wERzwtxCRVxTUywvRC7msBVQAPahvXaMUQ5XbnsX9lVCUIEXKI3s5ug9mmAnMVKcwDwjqB5qQXfpcC51qgNDf4dHw2NDWLiPEGQAQ2Pr4fA1exIIa0/CiAhVoV9n8mchoCEiSB5sXpzXw320sjiHljMjfMgHfPTTelYJXUPdppqAFlYtMDnBnoLyZvkK0UOARnp2Bt+ADfhXWlh0zSboG4InN5YqCFpwKjgfNVW8uy6i33zStfa0qzmE01lswAUPZb7xeC814T+dQ0kHTAIyVfnMLA8kC8YDuJ5/ba+rWrGc+pURXAflBOWImiGGbhVilwCao9CQP4zIRh9Q3bEHl8LIGxNKE0TYyYb4rsLXNML2Yc3mpp5wUybhl4ITJMFg6kz/w1SqpZKn18Kvs65U3yFYFo3X4iHQQfrUBiN01alrpUUuA/7AfqBSJYyvBCoUuQQkLR1GiGjZsUEExurdqQ9KhAEAlDNFxBEUuD6XBtBM4rF1LGBOES0OCAFbaZaSU1lsv4x1yOli2WZFPYDBJAeP5K1IUwb8rlWQOaMvH3oKGvuJyan3AsvvlyRAEIEXObtfFqr4AMiBIj4QUOQjDqaFce/icGEvhBniQ7QIGFS9FONivYTWeP2XJqa1Kk74rEQgJG0vvxaO0C8Xf8rhRJQeBEepGGCWZhfCXIIuOfBT9QRp7IHY4pnSm4wVzRgObCGpVQKa3RN1JARqu2ZEr50ueTQDi+mlzgjU3f4gVyHToAmXr16jY5+gyQo5z5xwT3QuLy4kr92T+8mJEhAoL5FOhRDD2delN6eQPvVHJADH4oGtaSFJIjINXyISrSgWof814xKDk9iH/Lh1WKkl1FvrgvZmINmaSZZ2WjCWpAuDKbj0LwM1uz+zFFXOhCZQUBYbqEYCIhQIKH6PHMMxchEfZV80qC6gfjIkKbGQ8KkoCY4TZ5CiEoWyEy6PelexP7smmgcBkatrS36N6j9aglG75CfkXBwIIIfWAlmEFBZLiNhA1Nx7CSaZMMlgWKN7mNook3GxzRTGhLqRuLyfxYu2aaUSaBYPQxRSMh1yEC3jBeDRSLIe0TbJKXF4wLi4wMulYFq8HkmJwpMS0bETA0oN/EjYX8TTAy5bvg8cwEIn0L1qGO4bSEfWntCyEeyqE8gva6jSTQg87lsxauaRjTkbDRmGDyHajrWAcuAxwd8/YMxHz88NOxOHD+uxdal1BpKQFFO4VDMuBDwhV+WPxKeQcCG+hUigOBA5IZOPSWVAVsJgoLXRhNNrS92TteV36en2eV0QpeX2gqy9I86o4EvSCOSKEqGs8/Tq/58t9WxEGhgAtW2DNTmeakXe2OzmIpX5vPmdDpYrUFdICBuQDAEhPxYblAuZhCwvn55Tg8kDIDZwkeZSyBWyUwFb+02gWC+LusO9eMaPjJS8Sz2PIzsGb2Ni1mGhPiGuhsqMTfRNmhL8+1iQ87hNF+8pg4Wf8jM761QR810aWjQuelgsgF1Y0N1UvuDG2LWCtQD18yScg0opkQJ+MADn6hbsZy3dfufWIug8R5hes5ewbMMzAC9kYl5Ogygs5Aqfvly7vSV5efpCF8ESeNh2tCQY6INGaQMDfbrwiOymyEjWiZLSE9KK9b4bGhEPYwkQPMoxf+0abRw4br5vqf4e17LEBF/y+cMphMA5Bg2UE8iC6UcMPeuBEzLG6CYeCdzuZhBQMCEvC3R5MG9ms1mCc8FGAE7OjqVXDY69IkTaYLoMQ1uw4YNusnPmjXdql3Mh4FMkIwOhsnGPxweHtQNIv0+fWNqpgnjcAzmG+3DOZCE+WjIz70zxL7Gu0fG5RoD/lVeecqQvlGJvzML56mPKvekM3my++exLfSChK8lGAk3NzVrzoABWTBAKhd5CYhW0QVKAgRAzyRZk5upPGYZNAAFn4T42Nq161xLi9RZBAQZKBCD3rp+/Tq3e/eduoMV+/xt3LTJtbe36blB7YWmo6PpwnLewjQ8LJrRv3qLMixaksICd0jIuTQE2SlBx9wIDXm5TuHC25QKlTEd+OFO2OBP7ycuh0/nyh2J1gpmTXhm6/B0YkzwL196pSxm5CVgS1OjOvggQ0AdiCSzEiopQDimprZt3+5u37FTNV1nZ4duj7Zu/Xq3Y+dOId2dus1Zh3zHvn9strRbyLhl61b9zpJFrUF5XsjIijeIhuZHC7JrqS8jSgyOZ9DAfDHFCA1oFK5RacGccx/q57V9h+uQ56POswHqgv9HNrb5gcgLl2dqojw/MG9U84c//OvvPPTwZ/8M08MNaBq0CRPhfpfO8qaawghfwRowCrg/hZ5I3cgQaUsnC6zp7nZbNm9xW7Z4ktGAXJu/HMsxHL8iHfJgbpdr8axWwgj+xvUhNdc0TaCEkd/Cz2T1jFXkulybRobYWKSurjWivTeLG7FGNRDHGfLVNx/iyLcQeE4Gb2yBgt8KkEF7+0r3k5/8/Xf0ixgoyKI//4/fSx17/4TuKE/FMXMf/ehHRfhrpdGyoY9yke9sfIxiKCXo4O/F6sdxlIzJFX9vQMwsOx8wOsb/soFXPr/3Dz7yEfcRKYDf6ai27wyNw7lYDTRhGBmSaf0K13HhogX61nd8VjYwYsPKDil8piMFERwYFUP4vHLAc504cdy9+tvf6o4P3Jd9snfv2un+9bf/RWxSFDzhf/7gf6fefnu/jhQRFpPgH//EJ9WMYQIqeU9EoTMrJWBU2HX4S+NRGGBgbkk/I9zBQAQ/zkhIzzdCYdrZOQzYNWgYzWJhoCKagXPy1de/UsKXfJ2Ec/ieQSCa2WJv/EVbowzC59WSgDwXb6j/9a9+pbs+IBfqs+22Le7f/dt/E5sUBU/46ZNPp37961e1MQArve7/2MdE8HeoGQtmxkZFqdrVmoCA/1MgEJrLZ7rkxgLJSiE1ig3S+Y7MaWQQhF3HzrNzw9D3rMlzklCr5jsPCeVq2qi+hLKx86CWBCQkxYZLv3v1Vd0xjA7KvdesWe0+/rH73Gc+/VAsEhZkEWsO6HnmN7A6y7+/4jLS1u/iIFatqohCDUXjotUhBZrGNA/p7/i+3eLzbdiwyW3cyIblbaqdgoWgMaNUMqbJnib8k6/gQ5P4S5yPeBoj2nDhWlyT/ViCmtKIHS61hJ8AWKpvDOCvYWyMac6R9KfoKEjAhx96oK65pSknHNPPBpBTkzMmzEshKvmYKstbRCOZVspXwg1SrIThieeFahsY4XNRbOUZv0HIYPGDF7/dr9dQ/jkpGqC2Ir9hLTgO35lr2VoTI1e4cE6cwnW4XqmSBKgfHYTYK3Lg/sBPcZZeLRhGUTvaKiwPmkViY0w+Q4aoiEq+uQIEXAocY40OCSGjai1IGSqZ35SsWY0W5T5zFTwDLgja3p4HToxPTKSPiI6iBOSVAitWZBMgmRQnKMsoEc1TCrcC+XhO/EMGJ4yYGZgEC9/R+3HOOd80khU+832+a9+s4Fm8H5w7Ih8fn3TPvfBiLPNYUir//j98N3X27DkVMLjttm3u3ns/rD5RMG8wHxIReYSGS6pxw9eBeOQQMvvB9NrUJG9oz9X+kIw8OUwSZpsFQ2i9W4lwYeDKMBZ4843X3YEDB7QT0lFJmv3wvXfH2j2/qAYE7G8S3MOOBqHn+2m52jrAtQTP19/f744cPuT27dvr9ks5cGC/CnxG2b9Pt+Y9LMcSG7POequCzkUn8wvtsxuss1fM2Fi8eeGSBOxavUpulk2/IeiKRuBvFDNcEWZJi+DP8Iwnjh9zx46973rPnXMDBKmlpzNHGyx0Rn5jj+j3jx7VQietumxmGWj+1tZWGdnXZwhIpCRxAj7x1S/VBad+bFdQ0piIj1UF3GuWyAeYYmJXU96GPjQ0rOYGUubT+HzHbxwDaU+f6tFzMd+3OtiJlkX7PmXMx0sZiPzDL56PbBpLEhC0t7XoqiiAsIn3DI8Ma0MlboZnkXgGZjT8RpXsFejNKR2QkawPo2SL3zvZi5FjaQCm5D4IBEQxNclgBDkgA7iAnzw8PJo+ojQiEZCJdxxtGoGb0DDMm5K8CSETwSxrvSBI+PTzuVk/l9Fsc0uzT3oIFMIRENMsBCQka2auZQ5VA4yAGXTVN7BazxOQaUjW4kRFJAL+k689Vke+nU2/YYZ5ZwaZxImY4TlCPAM5eOz+GTS7EJCt1tg3JliY2dBYafoZ8P2wDOHR8q0K/EDeLmDhGPYNTFwDgtWrOjWgaloQ34iNG4mBWSOVhTlGPsDjhJ+J58bxRtDBQqcMP4KeW4FIbiaQG8iMEWaYTkqnZbD25M+ejiSByATcsH6d2PtGt1BuAlg3QZiCAcmtHnaYR2FAPPIGfIaU5wbbdfT19ev/SyEyAT/3uU/VrRItuDigBUlO6O3tzQQi5/HBA/4vGpA8RSwEwAXplzFCFEQmINi0ab1Ov9ioj1jghfPnNTsWh30eHzxAOkIx7B5mM0CYYeKBP//5cyXNcCwCfvELj9R1tJOK5APTmN6h4WHdtJug7LwW/OABwhGMZtlAMDuGwciFi336/2KIRUCwceM6GfWQkLpQzTBasPdcr76wj5vO44MHiOfDMVkzTBhqcHBI/18MsQn4lce+WNfd3S1Op58DZIE34RheyEembGJxwZsYdEysASU8mr4VQTRA8yiFhPwfEIZiKe8vXyy+XDM2AcHGjes184GbIWBCMRcunNe9SyYm/Eq6Dyo8+fy+hMyGfBDcEhQRAXkGI8wMAZ6bXfRHRoonqZZFwEc//+m6devW6kZG2Hxuhg/Ie3KZlGcY/sEm4Y30C2aS2wZuroNwDKbYJitofiYpyCEthrIICLZu2eQ6NTjtRz70dkbDLFThpS7BaawPGrwWzF0ucKsD14u9JIPPyhob3kFdDGUT8MEHPl63betmMcXNqgW5MaaYFzcfPXrU+4MfkOmoefgNy7GCNjWLUkI58VqxYiibgODLX360br2YYhuQQEJGxbymnjIyMqrvYZvHrQ00Pel5LPC3N42ilFj919TYoJ8LoSICgm9/65t1a9euSafk+H2lyQY5fOg9zRAmawZ/qFpmiHvOY/ZAu6L5LojbRX6AZQGRvsfU7YMPfrJoA1VMQHDXnbtd95quzBCcShEDOnzokL5lknnB6Wu8cy5ZEs6Tb/bBtFtv7zmNgKB4bNDFzrUdHW36/2JIhICf+fSeurvu2uU6O9ozgUgqgh949P2jQsL3ZHTc6y4Fdi2tFPPkm31gbskFsIGnJSij/VhLxHKOUkiEgIDQzD337HZdXawh8SNjpupYH3Hs/WNu//79YpIPq6qGiOUOULjuXCHfXKpLLQC5GO2SCUUWFMR7990D7vQp4r9+KhZ5sMHpurXd7uGH95QUTuLSe/Jnz6QOvHvQnT9PKMb3CIbivHWc7Ry6ulbrVmMkMrJDgM0dzgUYmdh85+DBg2JWzugrHQDz36tWd4lj7Ud1duzExJgu2Lc9UnBD2Mnqzjvv1Odl8bZfvnqTEzVNvivSproQq79ftR+7ghH94DdkwjpyUvfuunuXe2jPA7UnIPh/T/8i9c7eA+7ChQs6P0zDUDnMMxnETNnQOMuWiqYMLPksBmvwWoBNztmNXkfx6VxHlqaS9+Y37szWBYLawnTtbNKhWCuxSswPgVndhgO3pIb1rwZU+xFYFgKyWSkkJPTCoIPfADmB69Z2uR07trkvPPq5SA9cNalAwqNHj6nJZXrOAtMQCS2BRoGQtSRWKVhd6M0I1kgFrAOF64vZodhxHl4TciybDJlffLNDSSjPyvx/UDY8HyEXdsjacfs298UvRCMfqHrr//BvfpzqOXVG185OTWU1hWEuErASQEbWlPAX2H4wtyJ4LvbJbmxqcKtF42/dvNE98sinYwmxJq3/3PMvCglPiUnuF39pRAYhfgNH8xvmApIiny/ZKalbiYC4F5RFixaqBasX/7atvVU139ee+EpZAqxp6z//wkup3t4Lrq9/wLG2GN9J3z2SY75mB5UQMMU/eQ5G9kHygcUZAs6NjlYWpOrIB9IxyGAVHKskKV/6w89X9GCzKhVyxXJ8LW23wmScC9oyXx2oO8/AUs7wckxGzeoPpj/flJDKswxDTa4MHB98oPjsxjzmMY95zGMe85jHPOZRGM79fz4+BwIQgHp/AAAAAElFTkSuQmCC";

var rotate82 = "";

var splitter1 = "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";

var tut_painter2 = "";

function base64ToPng(s) {
    return `data:image/png;base64,${s}`;
}
const RESOURCES = {
    flipper: base64ToPng(flipper),
    flip_white: base64ToPng(flip_white),
    rotate31: base64ToPng(rotate31),
    rotate32: base64ToPng(rotate32),
    rotate81: base64ToPng(rotate81),
    rotate82: base64ToPng(rotate82),
    splitter1: base64ToPng(splitter1),
    tut_painter2: base64ToPng(tut_painter2),
};
console.log(RESOURCES);
function ExtendSuperclass(mod, cls, makeSubclass) {
    mod.modInterface.extendClass(cls, (old) => {
        if (cls.isPrototypeOf(makeSubclass))
            return makeSubclass;
        return makeSubclass(old).prototype;
    });
}
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, subclass: O): void;
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, cls: C, subclass: O): void;
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, cls: C, subclass: (old: { $old: T }) => O): void;
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, cls: C, subclass?: O | ((old: { $old: T }) => O)): void {
// 	let superclass: C;
// 	let creator: (old: { $old: T }) => O;
// 	function superOverride(X) {
// 		let P = X.__proto__;
// 		let x = X.prototype;
// 		let p = x.__proto__;
// 		console.log({p,x,P,X})
// 		let xd = Object.getOwnPropertyDescriptors(x);
// 		delete xd.constructor;
// 		Object.defineProperties(p, xd);
// 		x.__proto__ = p.__proto__;
// 	}
// }

const var22 = 'two-two-balancer';
class Balancer22 {
    static install(mod) {
        // @ts-ignore
        enumBalancerVariants[var22] = var22;
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaBalancerBuilding, var22, {
            name: "2-2 balancer",
            description: "...The only balancer you ever need",
            tutorialImageBase64: RESOURCES.splitter1,
            regularSpriteBase64: RESOURCES.splitter1,
            blueprintSpriteBase64: RESOURCES.splitter1,
            dimensions: new Vector(1, 1),
            additionalStatistics(root) {
                const speed = root.hubGoals.getProcessorBaseSpeed(enumItemProcessorTypes.balancer);
                return [[T.ingame.buildingPlacement.infoTexts.speed, formatItemsPerSecond(speed)]];
            },
            isUnlocked(root) {
                return true;
            },
        });
        // Extend instance methods
        mod.modInterface.extendClass(MetaBalancerBuilding, ({ $old }) => ({
            updateVariants(entity, rotationVariant, variant) {
                if (variant === var22) {
                    entity.components.ItemEjector.setSlots([
                        { pos: new Vector(0, 0), direction: enumDirection.top },
                        { pos: new Vector(0, 0), direction: enumDirection.right },
                    ]);
                    entity.components.ItemAcceptor.setSlots([
                        { pos: new Vector(0, 0), direction: enumDirection.bottom },
                        { pos: new Vector(0, 0), direction: enumDirection.left },
                    ]);
                    entity.components.BeltUnderlays.underlays = [
                        { pos: new Vector(0, 0), direction: enumDirection.right },
                        { pos: new Vector(0, 0), direction: enumDirection.top },
                    ];
                }
                else {
                    $old.updateVariants.call(this, entity, rotationVariant, variant);
                }
            },
            getAvailableVariants(root) {
                return [var22];
            },
        }));
    }
}

var SzInfo;
(function (SzInfo) {
    (function (color_1) {
        color_1.list = [
            { name: 'red', style: 'red', code: 'r', combo: 'rrr' },
            { name: 'orange', style: 'orange', code: 'o', combo: 'grr' },
            { name: 'yellow', style: 'yellow', code: 'y', combo: 'ggr' },
            { name: 'green', style: 'green', code: 'g', combo: 'ggg' },
            { name: 'lawngreen', style: 'lawngreen', code: 'l', combo: 'bgg' },
            { name: 'cyan', style: 'cyan', code: 'c', combo: 'bbg' },
            { name: 'blue', style: 'blue', code: 'b', combo: 'bbb' },
            { name: 'purple', style: 'purple', code: 'v', combo: 'bbr' },
            { name: 'pink', style: 'pink', code: 'p', combo: 'brr' },
            { name: 'black', style: 'black', code: 'k' },
            { name: 'grey', style: 'grey', code: 'u' },
            { name: 'white', style: 'white', code: 'w', combo: 'bgr' },
            { name: 'cover', style: 'sz-cover', code: 'j' },
            { name: 'none', style: 'none', code: '-' },
        ];
        Object.assign(globalThis, { list: color_1.list });
        color_1.colorList = color_1.list.map(e => e.name);
        color_1.byName = Object.fromEntries(color_1.list.map(e => [e.name, e]));
        color_1.byChar = Object.fromEntries(color_1.list.map(e => [e.code, e]));
        color_1.byCombo = Object.fromEntries(color_1.list.filter(e => e.combo).map(e => [e.combo, e]));
        Object.assign(color_1.byName, color_1.byCombo);
        function exampleLayer(color) {
            let i = 0;
            return new SzLayer({
                quads: [
                    { shape: 'circle', from: i, to: i += 6, color },
                    { shape: 'square', from: i, to: i += 6, color },
                    { shape: 'circle', from: i, to: i += 6, color },
                    { shape: 'square', from: i, to: i += 6, color },
                ],
                areas: [
                    { shape: 'sector', from: 0, to: 24, color },
                ]
            });
        }
        color_1.exampleLayer = exampleLayer;
    })(SzInfo.color || (SzInfo.color = {}));
    (function (quad_1) {
        quad_1.list = [
            { name: 'circle', code: 'C', combo: 'C', spawn: 'sz!l!z|q!C-0o|a!su0o|c!' },
            { name: 'square', code: 'R', combo: 'R', spawn: 'sz!l!z|q!R-0c,R-co|a!su0o|c!' },
            { name: 'star', code: 'S', combo: 'S', spawn: 'sz!l!z|q!S-4c,S-ck,S-ks|a!su0o|c!' },
            { name: 'windmill', code: 'W', combo: 'W', spawn: 'sz!l!z|q!S-4c,S-ck,S-ks|a!su0o|c!' },
            {
                name: 'cover', code: 'J',
                path(ctx, { from, to }) {
                    ctx.arc(0, 0, 1.15, from, to);
                },
            }, {
                name: 'clover', code: 'L',
                path(ctx, { from, to }) {
                    ctx.rotate(from);
                    // export const extraShapes: Record<string, (ctx: SzContext2D, quad: SzLayerQuad) => void> = {
                    // 	clover(ctx: SzContext2D) {
                    // 		// begin({ size: 1.3, path: true, zero: true });
                    const inner = 0.5;
                    const inner_center = 0.45;
                    ctx.ctx.lineTo(0, inner);
                    ctx.ctx.bezierCurveTo(0, 1, inner, 1, inner_center, inner_center);
                    ctx.ctx.bezierCurveTo(1, inner, 1, 0, inner, 0);
                    // 	},
                }
            }, {
                name: '', code: '',
                // 	star8(ctx: SzContext2D, { from, to }: SzLayerQuad) {
                // 		const r = 1.22 / 2, R = 1.22, d = (n: number) => from * (1 - n) + to * n;
                // 		ctx
                // 			.lineToR(r, d(0))
                // 			.lineToR(R, d(0.25))
                // 			.lineToR(r, d(0.5))
                // 			.lineToR(R, d(0.75))
                // 			.lineToR(r, d(1))
                // 	},
            }, {
                name: '', code: '',
                // 	rhombus(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	plus(ctx: SzContext2D, { from, to }: SzLayerQuad) {
                // 		const r = 0.4, R = 1.0, d = (n: number) => from * (1 - n) + to * n;
                // 		const rr = (r1: number, r2: number) => (r1 * r1 + r2 * r2) ** 0.5
                // 		const at = (a: number, b: number) => Math.atan2(b, a) / Math.PI * 2;
                // 		const tor = (r: number, R: number) => [rr(r, R), d(at(r, R))] as const;
                // 		ctx
                // 			.lineToR(...tor(R, 0))
                // 			.lineToR(...tor(R, r))
                // 			.lineToR(...tor(r, r))
                // 			.lineToR(...tor(r, R))
                // 			.lineToR(...tor(0, R))
                // 	},
            }, {
                name: '', code: '',
                // 	saw(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	sun(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	leaf(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	diamond(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	mill(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	halfleaf(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	yinyang(ctx: SzContext2D) {
                // 	},
            }, {
                name: '', code: '',
                // 	octagon(ctx: SzContext2D) {
                // 	},
            },
        ];
        while (quad_1.list.find(e => !e.name)) {
            quad_1.list.splice(quad_1.list.findIndex(e => !e.name), 1);
        }
        quad_1.named4 = {
            circleSpawn: 'CuCuCuCu',
            squareSpawn: 'RuRuRuRu',
            starSpawn: 'SuSuSuSu',
            windmillSpawn: 'WuWuWuWu',
            circleBottom: '--CuCu--',
            circle: "CuCuCuCu",
            circleHalf: "----CuCu",
            rect: "RuRuRuRu",
            rectHalf: "RuRu----",
            circleHalfRotated: "Cu----Cu",
            circleQuad: "Cu------",
            circleRed: "CrCrCrCr",
            rectHalfBlue: "RbRb----",
            circlePurple: "CpCpCpCp",
            starCyan: "ScScScSc",
            fish: "CgScScCg",
            blueprint: "CbCbCbRb:CwCwCwCw",
            rectCircle: "RpRpRpRp:CwCwCwCw",
            watermelon: "--Cg----:--Cr----",
            starCircle: "SrSrSrSr:CyCyCyCy",
            starCircleStar: "SrSrSrSr:CyCyCyCy:SwSwSwSw",
            fan: "CbRbRbCb:CwCwCwCw:WbWbWbWb",
            monster: "Sg----Sg:CgCgCgCg:--CyCy--",
            bouquet: "CpRpCp--:SwSwSwSw",
            logo: "RuCw--Cw:----Ru--",
            target: "CrCwCrCw:CwCrCwCr:CrCwCrCw:CwCrCwCr",
            speedometer: "Cg----Cr:Cw----Cw:Sy------:Cy----Cy",
            // spikedBall: "CcSyCcSy:SyCcSyCc:CcSyCcSy:SyCcSyCc",
            spikedBall: "CcSyCcSy:SyCcSyCc:CcSyCcSy",
            compass: "CcRcCcRc:RwCwRwCw:Sr--Sw--:CyCyCyCy",
            plant: "Rg--Rg--:CwRwCwRw:--Rg--Rg",
            rocket: "CbCuCbCu:Sr------:--CrSrCr:CwCwCwCw",
            mill: "CwCwCwCw:WbWbWbWb",
            star: "SuSuSuSu",
            circleStar: "CwCrCwCr:SgSgSgSg",
            clown: "WrRgWrRg:CwCrCwCr:SgSgSgSg",
            windmillRed: "WrWrWrWr",
            fanTriple: "WpWpWpWp:CwCwCwCw:WpWpWpWp",
            fanQuadruple: "WpWpWpWp:CwCwCwCw:WpWpWpWp:CwCwCwCw",
            bird: "Sr------:--Cg--Cg:Sb--Sb--:--Cw--Cw",
            scissors: "Sr------:--CgCgCg:--Sb----:Cw--CwCw",
        };
        quad_1.named6 = {
            circleSpawn: '6CuCuCuCuCuCu',
            squareSpawn: '6RuRuRuRuRuRu',
            starSpawn: '6SuSuSuSuSuSu',
            windmillSpawn: '6WuWuWuWuWuWu',
            circleBottom: '6----CuCuCu--',
            circle: "6CuCuCuCuCuCu",
            circleHalf: "6------CuCuCu",
            rect: "6RuRuRuRuRuRu",
            rectHalf: "6RuRuRu------",
            circleHalfRotated: "6Cu------CuCu",
            circleQuad: "6CuCu--------",
            circleRed: "6CrCrCrCrCrCr",
            rectHalfBlue: "6RbRbRb------",
            circlePurple: "6CpCpCpCpCpCp",
            starCyan: "6ScScScScScSc",
            fish: "6CgCgScScCgCg",
            blueprint: "6CbCbCbCbCbRb:6CwCwCwCwCwCw",
            rectCircle: "6RpRpRpRpRpRp:6CwCwCwCwCwCw",
            watermelon: "6--CgCg------:6--CrCr------",
            starCircle: "6SrSrSrSrSrSr:6CyCyCyCyCyCy",
            starCircleStar: "6SrSrSrSrSrSr:6CyCyCyCyCyCy:6SwSwSwSwSwSw",
            fan: "6CbCbRbRbCbCb:6CwCwCwCwCwCw:6WbWbWbWbWbWb",
            monster: "6Sg--------Sg:6CgCgCgCgCgCg:6--CyCyCyCy--",
            bouquet: "6CpCpRpCpCp--:6SwSwSwSwSwSw",
            logo: "6RwCuCw--CwCu:6------Ru----",
            target: "6CrCwCrCwCrCw:6CwCrCwCrCwCr:6CrCwCrCwCrCw:6CwCrCwCrCwCr",
            speedometer: "6CgCb----CrCy:6CwCw----CwCw:6Sc----------:6CyCy----CyCy",
            spikedBall: "6CcSyCcSyCcSy:6SyCcSyCcSyCc:6CcSyCcSyCcSy:6SyCcSyCcSyCc",
            compass: "6CcRcRcCcRcRc:6RwCwCwRwCwCw:6----Sr----Sb:6CyCyCyCyCyCy",
            plant: "6Rg--Rg--Rg--:6CwRwCwRwCwRw:6--Rg--Rg--Rg",
            rocket: "6CbCuCbCuCbCu:6Sr----------:6--CrCrSrCrCr:6CwCwCwCwCwCw",
            mill: "6CwCwCwCwCwCw:6WbWbWbWbWbWb",
            star: "6SuSuSuSuSuSu",
            circleStar: "6CwCrCwCrCwCr:6SgSgSgSgSgSg",
            clown: "6WrRgWrRgWrRg:6CwCrCwCrCwCr:6SgSgSgSgSgSg",
            windmillRed: "6WrWrWrWrWrWr",
            fanTriple: "6WpWpWpWpWpWp:6CwCwCwCwCwCw:6WpWpWpWpWpWp",
            fanQuadruple: "6WpWpWpWpWpWp:6CwCwCwCwCwCw:6WpWpWpWpWpWp:6CwCwCwCwCwCw",
            bird: "6Sr----------:6--CgCg--CgCg:6Sb----Sb----:6--CwCw--CwCw",
            scissors: "6Sr----------:6--CgCgCgCgCg:6----Sb------:6CwCw--CwCwCw",
        };
        quad_1.named = {
            circleSpawn: 'sz!l!z|q!C-0o|a!su0o|c!',
            squareSpawn: 'sz!l!z|q!R-0c,R-co|a!su0o|c!',
            starSpawn: 'sz!l!z|q!S-4c,S-ck,S-ks|a!su0o|c!',
            windmillSpawn: 'sz!l!z|q!W-06,W-6c,W-ci,W-io|a!su0o|c!',
            circle1: 'sz!l!z|q!C-0o|a!su0o|c!',
            circleHalfLeft: 'sz!l!z|q!C-co|a!su0o|c!',
            square2: 'sz!l!z|q!R-0c,R-co|a!su0o|c!',
            squareHalfRight: 'sz!l!z|q!R-0c|a!su0o|c!',
            squareHalfTop2: 'sz!l!z|q!R-6c,R-ci|a!su6i|c!',
            circleHalfTop2: 'sz!l!z|q!C-06,C-io|a!suiu|c!',
            circleQuad1: 'sz!l!z|q!C-ou|a!su0o|c!',
            circleRed: 'sz!l!z|q!C-0o|a!sr0o|c!',
            // squarehalfLeftBlue: 'sz!l!z|q!R-co|a!sb0o|c!',
            // circlePurple: 'sz!l!z|q!C-0o|a!sv0o|c!',
            blueprint: 'sz!l!z|q!C-06,C-6c,C-ci,R-io|a!sb0o|c!:l!z|q!C-06,C-6c,C-ci,C-io|a!sw0o|c!',
            square3TopBlue: 'sz!l!z|q!R-ks|a!sbks|c!',
            star3Cyan: 'sz!l!z|q!S-4c,S-ck,S-ks|a!sc0o|c!',
            squid: 'sz!l!z|q!S-6c,S-ci,C-iu|a!sc6i,sgiu|c!',
            diamond: 'sz!l!z|q!R-03,R-lo|a!sclr|c!',
            palm: 'sz!l!z|q!S-02,S-24,S-46,S-ik,S-km,S-mo|a!sgiu|c!:l!z|q!R-ae|a!soae|c!:l!z|q!C-6i|a!sp6i|c!',
            counter: 'sz!l!z|q!C-iu|a!sr26,sgim,symq|c!:l!z|q!R-26,R-im,R-mq|a!swiu|c!:l!z|q!S-04|a!su04|c!:l!z|q!C-iu|a!suiu|c!',
            window: 'sz!l!z|q!R-06,R-6c,R-ci,R-io|a!sc0o|c!:l!z|q!R-28,R-8e,R-ek,R-kq|a!so0o|c!:l!z|q!R-4a,R-ag,R-gm,R-ms|a!sy0o|c!:l!z|q!R-06,R-6c,R-ci,R-io|a!sw0o|c!',
            splikeball48: 'sz!l!z|q!C-02,S-24,C-46,S-68,C-8a,S-ac,C-ce,S-eg,C-gi,S-ik,C-km,S-mo|a!sc02,sy24,sc46,sy68,sc8a,syac,scce,syeg,scgi,syik,sckm,symo|c!:l!z|q!S-02,C-24,S-46,C-68,S-8a,C-ac,S-ce,C-eg,S-gi,C-ik,S-km,C-mo|a!sy02,sc24,sy46,sc68,sy8a,scac,syce,sceg,sygi,scik,sykm,scmo|c!:l!z|q!C-02,S-24,C-46,S-68,C-8a,S-ac,C-ce,S-eg,C-gi,S-ik,C-km,S-mo|a!sc02,sy24,sc46,sy68,sc8a,syac,scce,syeg,scgi,syik,sckm,symo|c!:l!z|q!S-02,C-24,S-46,C-68,S-8a,C-ac,S-ce,C-eg,S-gi,C-ik,S-km,C-mo|a!sy02,sc24,sy46,sc68,sy8a,scac,syce,sceg,sygi,scik,sykm,scmo|c!',
        };
        quad_1.byName = Object.fromEntries(quad_1.list.map(e => [e.name, e]));
        quad_1.byChar = Object.fromEntries(quad_1.list.map(e => [e.code, e]));
        function exampleLayer(shape) {
            let i = 0;
            return new SzLayer({
                quads: [
                    { shape, from: i, to: i += 6, color: 'grey' },
                    { shape, from: i, to: i += 6, color: 'grey' },
                    { shape, from: i, to: i += 6, color: 'grey' },
                    { shape, from: i, to: i += 6, color: 'grey' },
                ],
                areas: [
                    { shape: 'sector', from: 0, to: 24, color: 'grey' },
                ],
            });
        }
        quad_1.exampleLayer = exampleLayer;
        // Object.entries(extraShapes).map(([k, v]) => list.push({ name: k } as any));
        quad_1.quadList = quad_1.list.map(e => e.name);
    })(SzInfo.quad || (SzInfo.quad = {}));
    (function (area) {
        area.list = [
            { name: 'sector', code: 's' },
            { name: 'whole', code: 'w' },
        ];
        area.byName = Object.fromEntries(area.list.map(e => [e.name, e]));
        area.byChar = Object.fromEntries(area.list.map(e => [e.code, e]));
    })(SzInfo.area || (SzInfo.area = {}));
    let s = Array(100).fill(0).map((e, i) => i.toString(36)).join('').slice(0, 36);
    s += s.slice(10).toUpperCase();
    SzInfo.nToChar = s.split('');
    SzInfo.charToN = Object.fromEntries(SzInfo.nToChar.map((e, i) => [e, i]));
    /* old:

    
export const shape4svg = {
    R: "M 0 0 L 1 0 L 1 1 L 0 1 Z",
    C: "M 0 0 L 1 0 A 1 1 0 0 1 0 1 Z",
    S: "M 0 0 L 0.6 0 L 1 1 L 0 0.6 Z",
    W: "M 0 0 L 0.6 0 L 1 1 L 0 1 Z",
    "-": "M 0 0",
}
function dotPos(l, a) {
    return `${l * Math.cos(Math.PI / a)} ${l * Math.sin(Math.PI / a)}`;
}

function sinPiBy(a) {
    return Math.sin(Math.PI / a);
}
function cosPiBy(a) {
    return Math.cos(Math.PI / a);
}
let shape6long = 1 / cosPiBy(6);

export const shape6svg = {
    R: `M 0 0 L 1 0 L ${dotPos(shape6long, 6)} L ${dotPos(1, 3)} Z`,
    C: `M 0 0 L 1 0 A 1 1 0 0 1 ${dotPos(1, 3)} Z`,
    S: `M 0 0 L 0.6 0 L ${dotPos(shape6long, 6)} L ${dotPos(0.6, 3)} Z`,
    W: `M 0 0 L 0.6 0 L ${dotPos(shape6long, 6)} L ${dotPos(1, 3)} Z`,
    "-": "M 0 0",
}



registerCustomShape({
    id: "rhombus",
    code: "B",
    ...customDefaults,
    draw({ dims, innerDims, layer, quad, context, color, begin }) {
        begin({ size: 1.2, path: true, zero: true });
        const rad = 0.001;
        // with rounded borders
        context.arcTo(0, 1, 1, 0, rad);
        context.arcTo(1, 0, 0, 0, rad);
    },
});

registerCustomShape({
    id: "plus",
    code: "P",
    ...customDefaults,
    draw: "M 0 0 L 1.1 0 1.1 0.5 0.5 0.5 0.5 1.1 0 1.1 z",
    tier: 3,
});

registerCustomShape({
    id: "saw",
    code: "Z",
    ...customDefaults,
    draw({ dims, innerDims, layer, quad, context, color, begin }) {
        begin({ size: 1.1, path: true, zero: true });
        const inner = 0.5;
        context.lineTo(inner, 0);
        context.bezierCurveTo(inner, 0.3, 1, 0.3, 1, 0);
        context.bezierCurveTo(
            1,
            inner,
            inner * Math.SQRT2 * 0.9,
            inner * Math.SQRT2 * 0.9,
            inner * Math.SQRT1_2,
            inner * Math.SQRT1_2
        );
        context.rotate(Math.PI / 4);
        context.bezierCurveTo(inner, 0.3, 1, 0.3, 1, 0);
        context.bezierCurveTo(
            1,
            inner,
            inner * Math.SQRT2 * 0.9,
            inner * Math.SQRT2 * 0.9,
            inner * Math.SQRT1_2,
            inner * Math.SQRT1_2
        );
    },
    tier: 3,
});

registerCustomShape({
    id: "sun",
    code: "U",
    ...customDefaults,
    spawnColor: "yellow",
    draw({ dims, innerDims, layer, quad, context, color, begin }) {
        begin({ size: 1.3, path: true, zero: true });
        const PI = Math.PI;
        const PI3 = ((PI * 3) / 8) * 0.75;
        const c = 1 / Math.cos(Math.PI / 8);
        const b = c * Math.sin(Math.PI / 8);

        context.moveTo(0, 0);
        context.rotate(Math.PI / 2);
        context.arc(c, 0, b, -PI, -PI + PI3);
        context.rotate(-Math.PI / 4);
        context.arc(c, 0, b, -PI - PI3, -PI + PI3);
        context.rotate(-Math.PI / 4);
        context.arc(c, 0, b, PI - PI3, PI);
    },
});

registerCustomShape({
    id: "leaf",
    code: "F",
    ...customDefaults,
    draw: "M 0 0 v 0.5 a 0.5 0.5 0 0 0 0.5 0.5 h 0.5 v -0.5 a 0.5 0.5 0 0 0 -0.5 -0.5 z",
});

registerCustomShape({
    id: "diamond",
    code: "D",
    ...customDefaults,
    draw: "M 0 0 l 0 0.5 0.5 0.5 0.5 0 0 -0.5 -0.5 -0.5 z",
});

registerCustomShape({
    id: "mill",
    code: "M",
    ...customDefaults,
    draw: "M 0 0 L 0 1 1 1 Z",
});

// registerCustomShape({
//     id: "halfleaf",
//     code: "H",
//     ...customDefaults,
//     draw: "100 M 0 0 L 0 100 A 45 45 0 0 0 30 30 A 45 45 0 0 0 100 0 Z",
// })

registerCustomShape({
    id: "yinyang",
    code: "Y",
    ...customDefaults,
    // draw({ dims, innerDims, layer, quad, context, color, begin }) {
    //     begin({ size: 1/(0.5+Math.SQRT1_2), path: true });

    //     /** @type{CanvasRenderingContext2D} * /
    //     let ctx = context;

    //     with (ctx) { with (Math) {
    //     ////////////////////////
    //     // draw mostly in [0,1]x[0,1] square
    //     // draw: "100 M 0 50 A 50 50 0 1 1 85 85 A 121 121 0 0 1 -85 85 A 50 50 0 0 0 0 50",
    //     moveTo(0, 0.5);
    //     arc(0.5, 0.5, 0.5, PI, PI/4)
    //     arc(0, 0, 0.5+SQRT1_2, PI/4, PI/4+PI/2, 0)
    //     arc(-0.5, 0.5, 0.5, 3*PI/4, 0, 1)

    //     moveTo(0.6, 0.5)
    //     arc(0.5, 0.5, 0.1, 0, 2*PI)
    //     }}

    // },
    draw:
        "120.71 M 0 50 A 50 50 0 1 1 85.355 85.355 A 120.71 120.71 0 0 1 -85.355 85.355 A 50 50 0 0 0 0 50 Z M 40 50 A 10 10 0 1 0 40 49.99 Z",
    tier: 4,
});

registerCustomShape({
    id: "octagon",
    code: "O",
    ...customDefaults,
    draw: "M 0 0 L 0 1 0.4142 1 1 0.4142 1 0 Z",
});

    
    */
})(SzInfo || (SzInfo = {}));
class SzLayerCut {
    shape = 'line';
    color = 'black';
    from = 0;
    to = 0;
    constructor(source) {
        Object.assign(this, source);
    }
    clone() { return new SzLayerCut(this); }
    get smallRadius() {
        return 0.0001;
    }
    pathInside(ctx) {
        switch (this.shape) {
            case 'line': {
                ctx.lineToR(0.5, this.from);
                ctx.lineToR(this.smallRadius, this.from);
                return;
            }
            default: {
                throw this;
            }
        }
    }
    pathOutsize(ctx) {
        switch (this.shape) {
            case 'line': {
                ctx.lineToR(this.smallRadius, this.from);
                ctx.lineToR(0.5, this.from);
                return;
            }
            default: {
                throw this;
            }
        }
    }
    getHash() {
        // fixme
        return ``;
    }
    static fromShortKey(e) {
        // fixme
        return new SzLayerCut({});
    }
}
class SzLayerQuad {
    shape = 'circle';
    color = 'none';
    from = 0;
    to = 0;
    constructor(source) {
        Object.assign(this, source);
        {
            this.color = 'none';
        }
    }
    clone() { return new SzLayerQuad(this); }
    outerPath(ctx, layer) {
        switch (this.shape) {
            case 'circle': {
                ctx.arc(0, 0, 1, this.from, this.to);
                return;
            }
            case 'square': {
                ctx.lineToR(1, this.from);
                // 6 -> Math.SQRT2, 12 -> 1
                let a = this.to - this.from;
                let ar = a * (Math.PI / 24);
                let R = a <= 6 ? 1 / Math.cos(ar) : 1;
                ctx.lineToR(R, (this.from + this.to) / 2);
                ctx.lineToR(1, this.to);
                return;
            }
            case 'star': {
                ctx.lineToR(0.6, this.from);
                ctx.lineToR(Math.SQRT2, (this.from + this.to) / 2);
                ctx.lineToR(0.6, this.to);
                return;
            }
            case 'windmill': {
                ctx.lineToR(1, this.from);
                let a = this.to - this.from;
                let ar = a * (Math.PI / 24);
                let R = a <= 6 ? 1 / Math.cos(ar) : 1;
                ctx.lineToR(R, (this.from + this.to) / 2);
                ctx.lineToR(0.6, this.to);
                // let originX = -quadrantHalfSize;
                // let originY = quadrantHalfSize - dims;
                // const moveInwards = dims * 0.4;
                // context.moveTo(originX, originY + moveInwards);
                // context.lineTo(originX + dims, originY);
                // context.lineTo(originX + dims, originY + dims);
                // context.lineTo(originX, originY + dims);
                // context.closePath();
                // context.fill();
                // context.stroke();
                break;
            }
            default: {
                ctx.saved(ctx => {
                    if (this.shape == 'cover') {
                        ctx.scale(1 / layer.layerScale());
                    }
                    SzInfo.quad.byName[this.shape].path(ctx, this);
                });
                return;
            }
        }
    }
    getHash() {
        return `${SzInfo.quad.byName[this.shape].code}${SzInfo.color.byName[this.color].code}${SzInfo.nToChar[this.from]}${SzInfo.nToChar[this.to]}`;
    }
    static fromShortKey(e) {
        return new SzLayerQuad({
            shape: SzInfo.quad.byChar[e[0]].name,
            color: SzInfo.color.byChar[e[1]].name,
            from: SzInfo.charToN[e[2]],
            to: SzInfo.charToN[e[3]],
        });
    }
}
class SzLayerArea {
    shape = 'sector';
    color = 'black';
    from = 0;
    to = 0;
    constructor(source) {
        Object.assign(this, source);
    }
    clone() { return new SzLayerArea(this); }
    outerPath(ctx) {
        switch (this.shape) {
            case 'whole': {
                ctx.beginPath();
                ctx.arc(0, 0, 5, 0, 24);
                ctx.closePath();
                return;
            }
            case 'sector': {
                if (this.from == 0 && this.to == 24) {
                    ctx.beginPath();
                    ctx.arc(0, 0, 5, 0, 24);
                    ctx.closePath();
                    return;
                }
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.arc(0, 0, 5, this.from, this.to);
                ctx.closePath();
                return;
            }
            default: {
                throw this;
            }
        }
    }
    clip(ctx) {
        this.outerPath(ctx);
        ctx.clip();
    }
    fill(ctx) {
        this.outerPath(ctx);
        ctx.fillStyle = SzInfo.color.byName[this.color].style;
        ctx.fill();
    }
    getHash() {
        return `${SzInfo.area.byName[this.shape].code}${SzInfo.color.byName[this.color].code}${SzInfo.nToChar[this.from]}${SzInfo.nToChar[this.to]}`;
    }
    static fromShortKey(e) {
        return new SzLayerArea({
            shape: SzInfo.area.byChar[e[0]].name,
            color: SzInfo.color.byChar[e[1]].name,
            from: SzInfo.charToN[e[2]],
            to: SzInfo.charToN[e[3]],
        });
    }
}
const testTemplate = {
    cuts: [
        { from: 10, to: 10, shape: 'line', color: 'blue' },
        { from: 14, to: 14, shape: 'line', color: 'blue' },
    ],
    quads: [
        { shape: 'square', color: 'green', from: 2, to: 4 },
        { shape: 'circle', color: 'pink', from: 5, to: 19 },
        { shape: 'square', color: 'green', from: 20, to: 22 },
    ],
    areas: [
        { shape: 'sector', color: 'red', from: 11, to: 13 },
    ],
};
class SzLayer {
    layerIndex = 0;
    cuts = [];
    quads = [];
    areas = [];
    static createTest() {
        let l = new SzLayer(testTemplate);
        l.areas.map(e => {
            let r = (Math.random() - 0.5) * 8;
            e.from += r;
            e.to += r;
        });
        console.error('test layer', l);
        return l;
    }
    constructor(source, layerIndex) {
        if (source) {
            this.cuts = (source.cuts ?? []).map(e => new SzLayerCut(e));
            this.quads = (source.quads ?? []).map(e => new SzLayerQuad(e));
            this.areas = (source.areas ?? []).map(e => new SzLayerArea(e));
            if (source.layerIndex) {
                this.layerIndex = source.layerIndex;
            }
        }
        if (layerIndex != null) {
            this.layerIndex = layerIndex;
        }
        this.cuts = [];
        return this.normalize();
    }
    layerScale(layerIndex) {
        layerIndex ??= this.layerIndex;
        return 0.9 - 0.22 * layerIndex;
    }
    drawCenteredLayerScaled(ctx, layerIndex) {
        ctx.saved(ctx => {
            ctx.scale(this.layerScale(layerIndex));
            this.drawCenteredNormalized(ctx);
        });
    }
    drawCenteredNormalized(ctx) {
        ctx.saved(ctx => {
            this.clipShapes(ctx);
            // this.quads.forEach(q => ctx.saved(ctx => this.fillQuad(q, ctx)));
            this.cuts.forEach(c => ctx.saved(ctx => this.strokeCut(c, ctx)));
            this.areas.forEach(a => ctx.saved(ctx => this.fillArea(a, ctx)));
        });
        ctx.saved(ctx => this.drawQuadOutline(ctx, true));
    }
    strokeCut(cut, ctx) {
        ctx.lineWidth = 0.05;
        ctx.strokeStyle = cut.color;
        ctx.beginPath();
        if (cut.shape == 'line') {
            ctx.rotate(cut.from);
            ctx.moveTo(0, 0);
            ctx.lineTo(0, 1);
            ctx.stroke();
        }
        else {
            throw this;
        }
    }
    fillQuad(quad, ctx) {
        ctx.fillStyle = SzInfo.color.byName[quad.color].style;
        if (quad.color == 'cover')
            ;
        ctx.beginPath();
        ctx.moveTo(0, 0);
        quad.outerPath(ctx, this);
        ctx.fill();
    }
    fillArea(area, ctx) {
        ctx.lineWidth = 0.05;
        ctx.strokeStyle = ctx.fillStyle = SzInfo.color.byName[area.color].style;
        area.clip(ctx);
        ctx.fill();
    }
    fullQuadPath(ctx, withCuts) {
        ctx.beginPath();
        for (let i = 0; i < this.quads.length; i++) {
            let prev = i > 0 ? this.quads[i - 1] : this.quads.slice(-1)[0];
            let quad = this.quads[i];
            if (withCuts || quad.from != prev.to % 24)
                ctx.lineTo(0, 0);
            quad.outerPath(ctx, this);
        }
        ctx.closePath();
    }
    drawQuadOutline(ctx, withCuts) {
        this.fullQuadPath(ctx, withCuts);
        ctx.lineWidth = 0.05;
        ctx.strokeStyle = 'orange';
        ctx.stroke();
    }
    clipShapes(ctx) {
        this.fullQuadPath(ctx);
        ctx.clip();
    }
    clone() {
        return new SzLayer(this);
    }
    isNormalized() {
        for (let i = 0; i < this.quads.length; i++) {
            let next = this.quads[i];
            let prev = this.quads[i - 1] || this.quads[this.quads.length - 1];
            if (next.from < 0 || next.from >= 24)
                return false;
            if (next.from >= next.to)
                return false;
            if (i == 0) {
                if (prev.to > 24 && prev.to % 24 > next.from)
                    return false;
            }
            else {
                if (prev.to > next.from)
                    return false;
            }
        }
        for (let i = 0; i < this.areas.length; i++) {
            let next = this.areas[i];
            let prev = this.areas[i - 1] || this.areas[this.areas.length - 1];
            if (next.from < 0 || next.from >= 24)
                return false;
            if (next.from >= next.to)
                return false;
            if (i == 0) {
                if (prev.to > 24 && prev.to % 24 > next.from)
                    return false;
            }
            else {
                if (prev.to > next.from)
                    return false;
            }
            if (prev.to % 24 == next.from && prev.color == next.color) {
                if (prev != next)
                    return false;
                if (next.from != 0)
                    return false;
            }
        }
        let places = Array(24).fill('');
        let paints = Array(24).fill('');
        for (let q of this.quads) {
            for (let i = q.from; i < q.to; i++) {
                if (places[i % 24])
                    return false;
                places[i % 24] = q.shape;
            }
        }
        for (let a of this.areas) {
            for (let i = a.from; i < a.to; i++) {
                if (!places[i % 24])
                    return false;
                if (paints[i % 24])
                    return false;
                paints[i % 24] = a.color;
            }
        }
        // fixme: cuts check;
        return true;
    }
    normalize() {
        if (this.isNormalized())
            return this;
        for (let i = 0; i < this.quads.length; i++) {
            let q = this.quads[i];
            if (q.from > q.to) {
                this.quads.splice(i, 1);
                i--;
                continue;
            }
            if (q.from >= 24) {
                q.from -= 24;
                q.to -= 24;
            }
        }
        this.quads.sort((a, b) => a.from - b.from);
        let places = Array(24).fill('');
        let paints = Array(24).fill('');
        for (let q of this.quads) {
            for (let i = q.from; i < q.to; i++) {
                places[i % 24] = q.shape;
            }
        }
        for (let a of this.areas) {
            for (let i = a.from; i < a.to; i++) {
                paints[i % 24] = a.color;
            }
        }
        for (let i = 0; i < 24; i++)
            if (!places[i])
                paints[i] = '';
        this.areas = [];
        let last;
        for (let i = 0; i < 24; i++) {
            if (!paints[i])
                continue;
            if (last && last.color == paints[i] && last.to == i) {
                last.to++;
            }
            else {
                this.areas.push(last = new SzLayerArea({
                    color: paints[i], from: i, to: i + 1, shape: 'sector',
                }));
            }
        }
        if (this.areas.length > 1) {
            let last = this.areas[this.areas.length - 1];
            if (last.color == this.areas[0].color && last.to % 24 == this.areas[0].from) {
                this.areas[this.areas.length - 1].to += this.areas[0].to;
                this.areas.splice(0, 1);
            }
        }
        // fixme: cuts
        if (!this.isNormalized()) {
            Object.assign(globalThis, { layer: this });
            console.error('Layer failed to normalize properly!', this);
            debugger;
        }
        return this;
    }
    isEmpty() {
        return this.quads.length == 0;
    }
    getQuadAtSector(s) {
        let s1 = (s + 0.5) % 24, s2 = s1 + 24;
        return this.quads.find(q => (q.from < s1 && q.to > s1) || (q.from < s2 && q.to > s2));
    }
    canStackWith(upper) {
        if (!upper)
            return true;
        for (let i = 0; i < 24; i++) {
            let q1 = this.getQuadAtSector(i);
            let q2 = upper.getQuadAtSector(i);
            if (q1 && q2)
                return false;
        }
        return true;
    }
    stackWith(upper) {
        if (!upper)
            return this.clone();
        return new SzLayer({
            areas: this.areas.concat(upper.areas),
            quads: this.quads.concat(upper.quads),
            cuts: this.cuts.concat(upper.cuts),
        });
    }
    rotate(rot) {
        this.areas.map(e => { e.from += rot; e.to += rot; });
        this.cuts.map(e => { e.from += rot; });
        this.quads.map(e => { e.from += rot; e.to += rot; });
        return this.normalize();
    }
    cloneFilteredByQuadrants(includeQuadrants) {
        const good = (n) => includeQuadrants.includes((~~(n / 6)) % 4);
        let allowed = Array(48).fill(0).map((e, i) => good(i + 0.5));
        function convert(old) {
            let filled = Array(48).fill(0).map((e, i) => old.from < i + 0.5 && i + 0.5 < old.to);
            let last = old.clone();
            last.to = -999;
            let list = [];
            for (let i = 0; i < 48; i++) {
                if (!filled[i])
                    continue;
                if (!allowed[i])
                    continue;
                if (last.to != i) {
                    last = old.clone();
                    last.from = i;
                    last.to = i + 1;
                    list.push(last);
                }
                else {
                    last.to++;
                }
            }
            return list;
        }
        return new SzLayer({
            areas: this.areas.flatMap(convert),
            quads: this.quads.flatMap(convert),
            cuts: this.cuts.flatMap(convert),
        });
    }
    cloneAsCover() {
        function convert(quad) {
            return new SzLayerQuad({
                color: 'cover',
                shape: 'cover',
                from: quad.from, to: quad.to,
            });
        }
        return new SzLayer({
            quads: this.quads.flatMap(convert),
        }).paint('cover').normalize();
    }
    removeCover() {
        this.quads = this.quads.filter(e => e.shape != 'cover');
        return this;
    }
    filterPaint(paint) {
        return paint.map((e, i) => {
            let quad = this.getQuadAtSector(i);
            return quad && quad.shape == 'cover' ? null : e;
        });
    }
    paint(paint) {
        if (!Array.isArray(paint))
            paint = Array(24).fill(paint);
        paint.map((color, i) => {
            if (color) {
                this.areas.push(new SzLayerArea({
                    color,
                    from: i, to: i + 1,
                    shape: 'sector',
                }));
            }
        });
        return this.normalize();
    }
    static fromShapezHash(hash, err = true) {
        if (hash[0] == '6')
            hash = hash.slice(1);
        if (hash.length != 8 && hash.length != 12) {
            if (!err)
                return null;
            throw new Error(`Invalid shape hash: ${hash}`);
        }
        let angle = 24 / (hash.length / 2);
        return new SzLayer({
            areas: hash.match(/../g).map((s, i) => {
                if (s[0] == '-')
                    return null;
                return new SzLayerArea({
                    shape: 'sector',
                    color: SzInfo.color.byChar[s[1]].name,
                    from: i * angle,
                    to: (i + 1) * angle,
                });
            }).filter(e => e),
            quads: hash.match(/../g).map((s, i) => {
                if (s[0] == '-')
                    return null;
                return new SzLayerQuad({
                    shape: SzInfo.quad.byChar[s[0]].name,
                    color: SzInfo.color.byChar[s[1]].name,
                    from: i * angle,
                    to: (i + 1) * angle,
                });
            }).filter(e => e),
            cuts: [],
        });
    }
    getHash() {
        for (let qn of [4, 6]) {
            let qw = 24 / qn;
            if (!this.quads.every(e => e.from % qw == 0 && e.to - e.from == qw))
                continue;
            if (!this.areas.every(e => e.from % qw == 0 && e.to % qw == 0))
                continue;
            let data = Array.from({ length: qn }, (_, i) => ({ shape: '-', color: '-' }));
            for (let q of this.quads) {
                data[q.from / qw].shape = SzInfo.quad.byName[q.shape].code;
            }
            for (let a of this.areas) {
                for (let i = a.from / qw; i < a.to / qw; i++) {
                    data[i % qn].color = SzInfo.color.byName[a.color].code;
                }
            }
            return data.map(({ shape, color }) => shape == '-' ? '--' : shape + color).join('');
        }
        return `l!z|q!${this.quads.map(e => e.getHash()).join(',')}|a!${this.areas.map(e => e.getHash()).join(',')}|c!${this.cuts.map(e => e.getHash()).join(',')}`;
    }
    static fromShortKey(key) {
        if (key.startsWith('sz!')) {
            key = key.slice(3);
        }
        if (key.startsWith('l!z|')) {
            let layer = new SzLayer();
            for (let part of key.split('|')) {
                if (part.startsWith('q!')) {
                    let strs = part.slice('q!'.length).split(',');
                    layer.quads = strs.map(e => SzLayerQuad.fromShortKey(e));
                }
                if (part.startsWith('a!')) {
                    let strs = part.slice('a!'.length).split(',');
                    layer.areas = strs.map(e => SzLayerArea.fromShortKey(e));
                }
                if (part.startsWith('c!')) {
                    let strs = part.slice('c!'.length).split(',');
                    layer.cuts = strs.map(e => SzLayerCut.fromShortKey(e));
                }
            }
            return layer;
        }
        return SzLayer.fromShapezHash(key);
    }
}

const PI12 = -Math.PI / 12;
class SzContext2D {
    static fromCanvas(cv) {
        let ctx = cv.getContext('2d');
        ctx.scale(cv.width / 2, cv.height / 2);
        ctx.translate(1, 1);
        ctx.rotate(-Math.PI / 2);
        ctx.scale(1 / 1.15, 1 / 1.15);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        return new SzContext2D(ctx);
    }
    clear() {
        this.ctx.clearRect(-2, -2, 4, 4);
    }
    ctx;
    constructor(ctx) {
        this.ctx = ctx;
    }
    get lineWidth() { return this.ctx.lineWidth; }
    set lineWidth(v) { this.ctx.lineWidth = v; }
    get strokeStyle() { return this.ctx.strokeStyle; }
    set strokeStyle(v) { this.ctx.strokeStyle = v; }
    get fillStyle() { return this.ctx.fillStyle; }
    set fillStyle(v) {
        this.ctx.fillStyle = v || 'black';
        if (v == 'sz-cover') {
            let gradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, 2);
            let c1 = '#00000000';
            let c2 = '#00000033';
            let n = 20;
            for (let i = 1; i < n; i++) {
                gradient.addColorStop((i - 0.01) / n, i % 2 ? c2 : c1);
                gradient.addColorStop((i + 0.01) / n, i % 2 ? c1 : c2);
            }
            this.ctx.fillStyle = gradient;
        }
        if (v == 'none') {
            let gradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, 2);
            let c1 = 'red';
            let c2 = 'blue';
            let n = 20;
            for (let i = 0; i <= n; i++) {
                gradient.addColorStop(i / n, i % 2 ? c2 : c1);
            }
            this.ctx.fillStyle = gradient;
            // this.ctx.fillStyle = 'transparent';
        }
    }
    get globalAlpha() { return this.ctx.globalAlpha; }
    set globalAlpha(v) { this.ctx.globalAlpha = v; }
    createGradientFill(source) {
        if (source.type == 'none') {
            return source.color;
        }
        if (source.type == 'radial10') {
            let g = this.ctx.createRadialGradient(0, 0, 0, 0, 0, 2);
            const n = 10;
            g.addColorStop(0, source.color);
            for (let i = 0; i < n; i++) {
                g.addColorStop((i + 0.5) / n, source.secondaryColor);
                g.addColorStop((i + 1) / n, source.color);
            }
            return g;
        }
        throw 0;
    }
    beginPath() { this.ctx.beginPath(); return this; }
    closePath() { this.ctx.closePath(); return this; }
    stroke() { this.ctx.stroke(); return this; }
    fill() { this.ctx.fill(); return this; }
    clip() { this.ctx.clip(); return this; }
    save() { this.ctx.save(); return this; }
    restore() { this.ctx.restore(); return this; }
    scale(x, y = x) {
        this.ctx.scale(x, y);
        return this;
    }
    rotate(angle) {
        this.ctx.rotate(-angle * PI12);
        return this;
    }
    moveTo(x, y) {
        // log({ move: { x: +x.toFixed(3), y: +y.toFixed(3) } });
        this.ctx.moveTo(y, x);
        return this;
    }
    moveToR(r, a) {
        this.moveTo(-r * Math.sin(a * PI12), r * Math.cos(a * PI12));
        return this;
    }
    lineTo(x, y) {
        // log({ line: { x: +x.toFixed(3), y: +y.toFixed(3) } })
        this.ctx.lineTo(y, x);
        return this;
    }
    lineToR(radius, direction) {
        this.lineTo(-radius * Math.sin(direction * PI12), radius * Math.cos(direction * PI12));
        return this;
    }
    rToXY(radius, direction) {
        return [-radius * Math.sin(direction * PI12), radius * Math.cos(direction * PI12)];
    }
    arc(cx, cy, radius, from, to, dir) {
        this.ctx.arc(cx, cy, radius, -from * PI12, -to * PI12, dir);
        return this;
    }
    fillRect(x, y, w, h) {
        this.ctx.fillRect(x, y, w, h);
        return this;
    }
    saved(f) {
        this.save();
        f(this);
        this.restore();
    }
}

const colorCharList = ['r', 'g', 'b', '-'];
const colorStringList = colorCharList.flatMap(a => colorCharList.flatMap(b => colorCharList.map(c => `${a}${b}${c}`)));
const colorStringEnum = Object.fromEntries(colorStringList.map(e => [e, e]));
class SzColorItem extends BaseItem {
    color;
    static getId() {
        return "sz-color";
    }
    static getSchema() {
        return types.enum(colorStringEnum);
    }
    serialize() {
        return this.color;
    }
    deserialize(data) {
        this.color = data;
    }
    getItemType() {
        return "color";
    }
    getAsCopyableKey() {
        return this.color;
    }
    equalsImpl(other) {
        return this.color === other.color;
    }
    constructor(color) {
        super();
        color = color.replace(/(-)(\w)/, '$2$1').replace(/(-)(\w)/, '$2$1');
        this.color = color;
    }
    cachedSprite;
    getBackgroundColorAsResource() {
        return THEME.map.resources[SzInfo.color.byChar[this.color[0]].name];
    }
    drawFullSizeOnCanvas(context, size) {
        // if (!this.cachedSprite) {
        // 	this.cachedSprite = Loader.getSprite("sprites/colors/" + this.color + ".png");
        // }
        // this.cachedSprite.drawCentered(context, size / 2, size / 2, size);
    }
    drawItemCenteredImpl(x, y, parameters, diameter) {
        const dpi = smoothenDpi(globalConfig.shapesSharpness * parameters.zoomLevel);
        const key = diameter + "/" + dpi + "/" + this.color;
        const canvas = parameters.root.buffers.getForKey({
            key: "shapedef",
            subKey: key,
            w: diameter,
            h: diameter,
            dpi,
            redrawMethod: this.internalGenerateShapeBuffer.bind(this),
        });
        parameters.context.drawImage(canvas, x - diameter / 2, y - diameter / 2, diameter, diameter);
    }
    internalGenerateShapeBuffer(canvas, ctx, w, h, dpi) {
        // prepare context
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.lineWidth = 0.05;
        ctx.translate((w * dpi) / 2, (h * dpi) / 2);
        ctx.scale((dpi * w) / 2.3, (dpi * h) / 2.3);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.strokeStyle = THEME.items.outline;
        ctx.lineWidth = THEME.items.outlineWidth / 10;
        ctx.rotate(-Math.PI / 2);
        ctx.fillStyle = THEME.items.circleBackground;
        ctx.beginPath();
        ctx.arc(0, 0, 1.15, 0, 2 * Math.PI);
        ctx.fill();
        new SzContext2D(ctx).saved(ctx => {
            ctx.fillStyle = '#00000022';
            for (let c of this.color) {
                ctx.fillStyle = { r: 'red', g: 'green', b: 'blue', '-': '#eeeeee44' }[c];
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 0.05;
                ctx.beginPath().arc(0, 0.5, 0.3, 0, 24).fill().stroke();
                ctx.rotate(8);
            }
        });
    }
    static fromColor(color) {
        let c = enumColorToShortcode[color];
        return new SzColorItem(c + c + c);
    }
    splitColor() {
        let c = '-';
        let s = this.color.replace(/[^-]/, C => (c = C, '-'));
        const color = { r: 'red', g: 'green', b: 'blue', '-': '-' }[c];
        let item = s == '---' ? null : new SzColorItem(s);
        return [color, item];
    }
    fillFromColor(other) {
        let aaa = this.color, bbb = other.color;
        // aaa,bbb => a,aab,bb-
        // aa-,bbb => -,aab,bb-
        // a--,bbb => -,ab-,bb-
        aaa = aaa.includes('-') ? aaa.replace('-', bbb[0]) : aaa.slice(1) + bbb[0];
        bbb = bbb.slice(1) + '-';
        console.log(`split: `, this.color, other.color, '=>', aaa, bbb);
        return [new SzColorItem(aaa), bbb == '---' ? null : new SzColorItem(bbb)];
    }
    splitIntoColors() {
        const toc = (c) => SzInfo.color.byChar[c].name;
        let s = this.color.split('').filter(e => e != '-');
        if (s.length == 0)
            return ['grey', null];
        if (s.length == 1)
            return [toc(s[0]), null];
        if (s.length == 2)
            return [toc(s[0]), toc(s[1])];
        s = s.sort();
        let c = SzInfo.color.byCombo[s.sort().join('')].name;
        return [c, c];
    }
    static install(mod) {
        mod.modInterface.registerItem(SzColorItem, data => new SzColorItem(data));
    }
}

class SzDefinition extends BasicSerializableObject {
    static getId() {
        return "sz-definition";
    }
    static createTest() {
        return new SzDefinition({
            layers: [SzLayer.createTest()],
        });
    }
    constructor(data, clone = false) {
        super();
        if (typeof data == 'string')
            return SzDefinition.fromShortKey(data);
        if (data?.layers)
            this.layers = data.layers.map((e, i) => new SzLayer(e, i));
        if (!this.layers.every(e => e.isNormalized())) {
            this.layers = SzDefinition.createTest().layers;
        }
        // console.log(this.getHash())
        if (clone)
            return;
        if (SzDefinition.definitionCache.has(this.getHash())) {
            return SzDefinition.definitionCache.get(this.getHash());
        }
        console.log(this.getHash());
    }
    layers = [];
    cachedHash = '';
    bufferGenerator;
    getClonedLayers() {
        throw new Error("Method not implemented.");
    }
    isEntirelyEmpty() {
        return this.layers.every(e => e.isEmpty());
    }
    getHash() {
        if (this.cachedHash)
            return this.cachedHash;
        if (!this.layers.length)
            debugger;
        return this.cachedHash = 'sz!' + this.layers.map(e => e.getHash()).join(':');
    }
    drawFullSizeOnCanvas(context, size) {
        this.internalGenerateShapeBuffer(null, context, size, size, 1);
    }
    generateAsCanvas(size = 120) {
        const [canvas, context] = makeOffscreenBuffer(size, size, {
            smooth: true,
            label: "definition-canvas-cache-" + this.getHash(),
            reusable: false,
        });
        this.internalGenerateShapeBuffer(canvas, context, size, size, 1);
        return canvas;
    }
    cloneFilteredByQuadrants(includeQuadrants) {
        let layers = this.layers.map(e => e.cloneFilteredByQuadrants(includeQuadrants)).filter(e => !e.isEmpty());
        return new SzDefinition({ layers });
    }
    cloneRotateCW() {
        return new SzDefinition({
            layers: this.layers.map(l => l.clone().rotate(6))
        });
    }
    cloneRotate24(n) {
        return new SzDefinition({
            layers: this.layers.map(l => l.clone().rotate(n))
        });
    }
    cloneRotateCCW() {
        return new SzDefinition({
            layers: this.layers.map(l => l.clone().rotate(24 - 6))
        });
    }
    cloneRotate180() {
        return new SzDefinition({
            layers: this.layers.map(l => l.clone().rotate(12))
        });
    }
    cloneAndStackWith(upper) {
        let bottom = this.clone(e => e.removeCover()).layers;
        let top = upper.clone().layers;
        let dh = 0;
        while (!bottom.every((l, i) => {
            return l.canStackWith(top[i - dh]);
        }))
            dh++;
        let overlap = bottom.length - dh;
        let newLayers = bottom.map((l, i) => {
            return l.stackWith(top[i + dh]);
        }).concat(top.slice(overlap));
        return new SzDefinition({ layers: newLayers.slice(0, 4) });
    }
    cloneAndPaintWith(color) {
        let rawPaints = Array(24).fill(color);
        return this.clone((l, i, a) => {
            let paints = a.slice(i).reduceRight((v, e) => e.filterPaint(v), rawPaints);
            return l.removeCover().paint(paints);
        });
    }
    cloneAndPaintWith4Colors(colors) {
        let rawPaints = Array.from({ length: 24 }, (e, i) => {
            return colors[i % 6];
        });
        return this.clone((l, i, a) => {
            let paints = a.slice(i).reduceRight((v, e) => e.filterPaint(v), rawPaints);
            return l.removeCover().paint(paints);
        });
    }
    cloneAndMakeCover() {
        return new SzDefinition({ layers: this.layers.map(e => e.cloneAsCover()) });
    }
    clone(layerMapper) {
        if (layerMapper) {
            return new SzDefinition({
                layers: this.layers.map(e => e.clone()).flatMap((e, i, a) => {
                    return layerMapper(e, i, a) || [];
                }).filter(e => !e.isEmpty())
            });
        }
        return new SzDefinition(this, true);
    }
    static getSchema() {
        return types.string;
    }
    serialize() {
        return this.getHash();
    }
    deserialize(data, root) {
        console.log('deser', this);
    }
    // inherited
    drawCentered(x, y, parameters, diameter) {
        const dpi = smoothenDpi(globalConfig.shapesSharpness * parameters.zoomLevel);
        if (!this.bufferGenerator) {
            this.bufferGenerator = this.internalGenerateShapeBuffer.bind(this);
        }
        const key = diameter + "/" + dpi + "/" + this.cachedHash;
        const canvas = parameters.root.buffers.getForKey({
            key: "shapedef",
            subKey: key,
            w: diameter,
            h: diameter,
            dpi,
            redrawMethod: this.bufferGenerator,
        });
        parameters.context.drawImage(canvas, x - diameter / 2, y - diameter / 2, diameter, diameter);
    }
    internalGenerateShapeBuffer(canvas, ctx, w, h, dpi) {
        // prepare context
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.lineWidth = 0.05;
        ctx.translate((w * dpi) / 2, (h * dpi) / 2);
        ctx.scale((dpi * w) / 2.3, (dpi * h) / 2.3);
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.strokeStyle = THEME.items.outline;
        ctx.lineWidth = THEME.items.outlineWidth / 10;
        ctx.rotate(-Math.PI / 2);
        ctx.fillStyle = THEME.items.circleBackground;
        ctx.beginPath();
        ctx.arc(0, 0, 1.15, 0, 2 * Math.PI);
        ctx.fill();
        let sCtx = new SzContext2D(ctx);
        this.layers.forEach((l, i) => l.drawCenteredLayerScaled(sCtx, i));
    }
    static rawHashMap = new Map();
    static getHashfromRawHash(hash) {
        if (!this.rawHashMap.has(hash)) {
            this.rawHashMap.set(hash, hash.startsWith('sz!') ? SzDefinition.fromShortKey(hash).getHash() :
                SzDefinition.fromRawShape(hash).getHash());
        }
        return this.rawHashMap.get(hash);
    }
    static fromRawShape(shapeDefinition) {
        if (typeof shapeDefinition != 'string')
            shapeDefinition = shapeDefinition.getHash();
        return new SzDefinition({
            layers: shapeDefinition.split(':').map(e => SzLayer.fromShortKey(e))
        });
    }
    static definitionCache = new Map();
    static fromShortKey(key) {
        if (!this.definitionCache.has(key)) {
            this.definitionCache.set(key, new SzDefinition({
                layers: key.split(':').map(e => SzLayer.fromShortKey(e))
            }));
        }
        return this.definitionCache.get(key);
    }
    compute_ANALYZE(root) {
        let firstQuad = this.layers[0].quads[0];
        if (firstQuad.from != 0)
            return [null, null];
        let definition = new SzDefinition({ layers: [SzInfo.quad.exampleLayer(firstQuad.shape)] });
        // @ts-expect-error
        let color = enumShortcodeToColor[SzInfo.color.byName[firstQuad.color].code];
        return [
            COLOR_ITEM_SINGLETONS[color],
            root.shapeDefinitionMgr.getShapeItemFromDefinition(definition),
        ];
    }
    static install(mod) {
        mod.modInterface.extendObject(ShapeDefinition, ({ $old }) => ({
            fromShortKey: SzDefinition.fromShortKey.bind(SzDefinition)
        }));
        mod.modInterface.extendClass(LogicGateSystem, ({ $old }) => ({
            compute_ANALYZE(parameters) {
                let item = parameters[0];
                if (!item || item.getItemType() !== "shape") {
                    // Not a shape
                    return [null, null];
                }
                let def = item.definition;
                if (def instanceof SzDefinition) {
                    return def.compute_ANALYZE(this.root);
                }
                return $old.compute_ANALYZE.call(this, parameters);
            }
        }));
    }
}

class SzShapeItem extends ShapeItem {
    static getId() {
        return 'szItem';
    }
    // @ts-ignore
    definition;
    constructor(definition) {
        if (SzShapeItem.constructorCache.has(definition.getHash())) {
            return SzShapeItem.constructorCache.get(definition.getHash());
        }
        super(null);
        this.definition = definition;
        this.definition.getHash();
        SzShapeItem.constructorCache.set(definition.getHash(), this);
    }
    static constructorCache = new Map();
    static getSchema() {
        return types.string;
    }
    getItemType() {
        return 'shape';
    }
    equals(other) {
        return other.getItemType() == this.getItemType() && other.definition == this.definition;
    }
    drawItemCenteredClipped(x, y, parameters, diameter) {
        if (!parameters.visibleRect.containsCircle(x, y, diameter / 2))
            return;
        if (!diameter)
            throw new Error();
        this.drawItemCenteredImpl(x, y, parameters, diameter);
    }
    getBackgroundColorAsResource() {
        return THEME.map.resources.shape;
    }
    static deserialize(data) {
        // debugger;
        // console.log('deserialize', data);
        if (data.length < 4)
            debugger;
        // this.definition = SzDefinition.fromShortKey(data);
        return new SzShapeItem(new SzDefinition(data));
    }
    serialize() {
        let h = this.definition.getHash();
        if (h.length < 4)
            debugger;
        // console.log('serialize', h);
        return h;
    }
    // deserialize(data: any, root?: GameRoot): string | void {
    // 	throw new Error("Method not implemented.");
    // }
    getAsCopyableKey() {
        throw new Error("Method not implemented.");
    }
    equalsImpl(other) {
        throw new Error("Method not implemented.");
    }
    drawFullSizeOnCanvas(context, size) {
        this.definition.drawFullSizeOnCanvas(context, size);
    }
    drawItemCenteredImpl(x, y, parameters, diameter) {
        this.definition.drawCentered(x, y, parameters, diameter);
    }
    static install(mod) {
        mod.modInterface.extendClass(ShapeDefinitionManager, ({ $old }) => ({
            getShapeItemFromDefinition(definition) {
                if (!(definition instanceof SzDefinition)) {
                    return $old.getShapeItemFromDefinition.call(this, definition);
                }
                return this.shapeKeyToItem[definition.getHash()] ??= new SzShapeItem(definition);
            }
        }));
        mod.modInterface.registerItem(SzShapeItem, data => SzShapeItem.deserialize(data));
    }
}

class PainterOverride extends MetaPainterBuilding {
    static processPayload(payload) {
        const shapeItem = payload.items.get(0);
        const colorItem = payload.items.get(1);
        function push(v) { payload.outItems.push(v); }
        const paint = (si, color) => this.root.shapeDefinitionMgr.getShapeItemFromDefinition(this.root.shapeDefinitionMgr.shapeActionPaintWith(si.definition, color));
        if (shapeItem instanceof ShapeItem || shapeItem instanceof SzShapeItem) {
            if (colorItem instanceof ColorItem) {
                push({ item: paint(shapeItem, colorItem.color), requiredSlot: 0 });
            }
            else {
                let [color, outColor] = colorItem.splitColor();
                push({ item: paint(shapeItem, color), requiredSlot: 0 });
                if (outColor)
                    push({ item: outColor, requiredSlot: 1, doNotTrack: true });
            }
        }
        else if (shapeItem instanceof SzColorItem) {
            if (colorItem instanceof SzColorItem) {
                let [c1, c2] = shapeItem.fillFromColor(colorItem);
                push({ item: c1, requiredSlot: 0 });
                if (c2)
                    push({ item: c2, requiredSlot: 1, doNotTrack: true });
            }
        }
    }
    static processPayload2(payload) {
        function push(v) { payload.outItems.push(v); }
        const paint = (si, color) => !color ? si :
            this.root.shapeDefinitionMgr.getShapeItemFromDefinition(this.root.shapeDefinitionMgr.shapeActionPaintWith(si.definition, color));
        const shapeItem1 = payload.items.get(0);
        const shapeItem2 = payload.items.get(1);
        const colorItem = payload.items.get(2);
        if (colorItem instanceof ColorItem) {
            push({ item: paint(shapeItem1, colorItem.color) });
            push({ item: shapeItem1 });
            return;
        }
        let [c1, c2] = colorItem.splitIntoColors();
        push({ item: paint(shapeItem1, c1) });
        push({ item: paint(shapeItem2, c2) });
    }
    static install(mod) {
        MOD_ITEM_PROCESSOR_HANDLERS.painter = this.processPayload;
        MOD_ITEM_PROCESSOR_HANDLERS.painterDouble = this.processPayload2;
        mod.modInterface.extendClass(MetaPainterBuilding, ({ $old }) => ({
            updateVariants(entity, rotationVariant, variant) {
                $old.updateVariants.call(this, entity, rotationVariant, variant);
                if (!entity.components.BeltUnderlays) {
                    entity.addComponent(new BeltUnderlaysComponent({ underlays: [] }));
                }
                entity.components.BeltUnderlays.underlays = [];
                if (variant == defaultBuildingVariant || variant == enumPainterVariants.mirrored) {
                    let x = variant == defaultBuildingVariant;
                    let { top, bottom, left, right } = enumDirection;
                    entity.components.ItemEjector.setSlots([
                        { pos: new Vector(1, 0), direction: right },
                        { pos: new Vector(1, 0), direction: x ? bottom : top },
                    ]);
                    entity.components.ItemAcceptor.setSlots([
                        { pos: new Vector(0, 0), direction: left },
                        { pos: new Vector(1, 0), direction: x ? top : bottom, filter: "color" },
                    ]);
                    entity.components.BeltUnderlays.underlays = [
                        { pos: new Vector(1, 0), direction: x ? bottom : top },
                    ];
                }
            },
        }));
        // mod.modInterface.addVariantToExistingBuilding
    }
}

const var41 = defaultBuildingVariant;
const var42 = enumRotaterVariants.ccw;
const var180 = enumRotaterVariants.rotate180;
const var31 = 'rotator-three-right';
const var32 = 'rotator-three-left';
const var81 = 'rotator-8-right';
const var82 = 'rotator-8-left';
class Rotator3 {
    static process_rotate31_cache = new Map();
    static process_rotate32_cache = new Map();
    static process_rotate81_cache = new Map();
    static process_rotate82_cache = new Map();
    static processOrCached(cache, hash, process) {
        let v = cache.get(hash);
        if (!v)
            cache.set(hash, v = process());
        return v;
    }
    static process_31(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate31_cache, item.definition.getHash(), () => def().cloneRotate24(8)));
    }
    static process_32(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate32_cache, item.definition.getHash(), () => def().cloneRotate24(24 - 8)));
    }
    static process_81(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate81_cache, item.definition.getHash(), () => def().cloneRotate24(3)));
    }
    static process_82(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate82_cache, item.definition.getHash(), () => def().cloneRotate24(24 - 3)));
    }
    static install(mod) {
        Object.assign(enumRotaterVariants, {
            [var31]: var31,
            [var32]: var32,
            [var81]: var81,
            [var82]: var82,
        });
        const base = (img, angle, ccw) => ({
            name: `ROTATOR (${angle}°)${ccw ? ' (CCW)' : ''}`,
            description: `Rotates shapes ${ccw ? 'counter-' : ''}clockwise by ${angle} degrees.`,
            tutorialImageBase64: RESOURCES[img],
            regularSpriteBase64: RESOURCES[img],
            blueprintSpriteBase64: RESOURCES[img],
            dimensions: new Vector(1, 1),
            additionalStatistics(root) {
                const speed = root.hubGoals.getProcessorBaseSpeed(enumItemProcessorTypes.rotater);
                return [[T.ingame.buildingPlacement.infoTexts.speed, formatItemsPerSecond(speed),],
                ];
            },
        });
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var31, base('rotate31', 120, false));
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var32, base('rotate32', 120, true));
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var81, base('rotate81', 45, false));
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var82, base('rotate82', 45, true));
        // Extend instance methods
        mod.modInterface.extendClass(MetaRotaterBuilding, ({ $old }) => ({
            updateVariants(entity, rotationVariant, variant) {
                if (variant === var31) {
                    entity.components.ItemProcessor.type = var31;
                }
                else if (variant === var32) {
                    entity.components.ItemProcessor.type = var32;
                }
                else if (variant === var81) {
                    entity.components.ItemProcessor.type = var81;
                }
                else if (variant === var82) {
                    entity.components.ItemProcessor.type = var82;
                }
                else {
                    $old.updateVariants.call(this, entity, rotationVariant, variant);
                }
            },
            getAvailableVariants(root) {
                let vars = [];
                if (root.hubGoals.isRewardUnlocked('reward_rotater')) {
                    vars.push(var41, var42);
                }
                if (root.hubGoals.isRewardUnlocked('reward_rotater_ccw')) {
                    vars.push(var31, var32);
                }
                if (root.hubGoals.isRewardUnlocked('reward_rotater_180')) {
                    vars.push(var180, var81, var82);
                }
                return vars;
            },
        }));
        function registerProcessor(variant, speed, processor) {
            Object.assign(enumItemProcessorTypes, {
                [variant]: variant
            });
            Object.assign(MOD_ITEM_PROCESSOR_SPEEDS, {
                [variant]: (root) => root.hubGoals.getProcessorBaseSpeed(speed)
            });
            Object.assign(MOD_ITEM_PROCESSOR_HANDLERS, {
                [variant]: processor
            });
        }
        registerProcessor(var31, 'rotater', Rotator3.process_31);
        registerProcessor(var32, 'rotater', Rotator3.process_32);
        registerProcessor(var81, 'rotater', Rotator3.process_81);
        registerProcessor(var82, 'rotater', Rotator3.process_82);
    }
}

class SzLevel {
    index;
    shapeName;
    shape;
    required;
    reward;
    throughputOnly = false;
    constructor(index, required, shape, reward) {
        this.index = index;
        if (named[shape]) {
            this.shapeName = shape;
            shape = named[shape];
        }
        this.shape = shape;
        this.required = required;
        this.reward = reward;
    }
    static modifyLevelDefinitions(levels) {
        Object.assign(levels, levelDefinitions);
        levels.map(d => {
            d.shape = SzDefinition.getHashfromRawHash(d.shape);
            d.required = ~~(d.required / 3);
        });
    }
    static modifyUpgrades(upgrades) {
        const map = {
            'sz!l!z|q!C-06,C-6c,C-ci,C-io|a!su0o|c!': 'sz!l!z|q!C-0o|a!su0o|c!',
            'sz!l!z|q!R-06,R-6c,R-ci,R-io|a!su0o|c!': 'sz!l!z|q!R-0c,R-co|a!su0o|c!',
            'sz!l!z|q!S-06,S-6c,S-ci,S-io|a!su0o|c!': 'sz!l!z|q!S-4c,S-ck,S-ks|a!su0o|c!',
            'CuCuCuCu': SzInfo.quad.named.circleSpawn,
            'RuRuRuRu': SzInfo.quad.named.squareSpawn,
            'SuSuSuSu': SzInfo.quad.named.starSpawn,
        };
        Object.values(upgrades).flat().flatMap(e => e.required)
            .map(e => {
            e.shape = SzDefinition.getHashfromRawHash(map[e.shape] ?? e.shape);
            if (map[e.shape])
                e.shape = map[e.shape];
            e.amount = Math.ceil(e.amount / 10);
        });
        Object.assign(globalThis, { upgrades });
    }
    static install(mod) {
        mod.signals.modifyLevelDefinitions.add(SzLevel.modifyLevelDefinitions);
        mod.signals.modifyUpgrades.add(SzLevel.modifyUpgrades);
        let r = 'reward_painter_double';
        T.storyRewards[r] = {
            title: 'Multicolor painter',
            desc: `
				You have unlocked <strong>Double Painter</strong>.<br>
				It can use more then a single paint at once to paint shapes in 7 combined colors
			`,
        };
        GameMode.prototype.getBlueprintShapeKey = function () {
            return SzInfo.quad.named.blueprint;
        };
        // const rewardName = T.storyRewards[reward].title;
        // let html = `
        // <div class="rewardName">
        //     ${T.ingame.levelCompleteNotification.unlockText.replace("<reward>", rewardName)}
        // </div>
        // <div class="rewardDesc">
        //     ${T.storyRewards[reward].desc}
        // </div>
    }
}
const named = SzInfo.quad.named;
const levelDefinitions = [
    new SzLevel(1, 30, 'circle1', 'reward_cutter_and_trash'),
    new SzLevel(2, 40, 'circleHalfLeft', 'no_reward'),
    new SzLevel(3, 70, 'square2', 'reward_balancer'),
    new SzLevel(4, 70, 'squareHalfRight', 'reward_rotater'),
    new SzLevel(5, 170, 'circleHalfTop2', 'reward_tunnel'),
    new SzLevel(6, 270, 'squareHalfTop2', 'reward_painter'),
    new SzLevel(7, 300, 'circleRed', 'reward_rotater_ccw'),
    new SzLevel(8, 480, 'square3TopBlue', 'reward_painter_double'),
    new SzLevel(9, 600, 'star3Cyan', 'reward_rotater_180'),
    new SzLevel(10, 800, 'diamond', 'reward_stacker'),
    new SzLevel(11, 1000, 'squid', 'no_reward'),
    new SzLevel(12, 1000, 'bl', 'reward_blueprints'),
    // new SzLevel(12, 1000, 'splikeball48', 'no_reward'),
    // // @ts-expect-error
    // new SzLevel(8, 480, "RbRb----", 'reward_mixer'),
    // // @ts-expect-error
    // new SzLevel(9, 600, "CpCpCpCp", 'reward_merger'),
    // // @ts-expect-error
    // new SzLevel(10, 800, "ScScScSc", 'reward_stacker'),
    // // @ts-expect-error
    // new SzLevel(11, 1000, "CgScScCg", 'reward_miner_chainable'),
    // // @ts-expect-error
    // new SzLevel(12, 1000, "CbCbCbRb:CwCwCwCw", 'reward_blueprints'),
];
// 	// Tunnel Tier 2
// 	{
// 		shape: chinaShapes ? "CuCuCuCu:CwCwCwCw:Sb--Sr--" : "RpRpRpRp:CwCwCwCw", // painting t3
// 		required: 3800,
// 		reward: enumHubGoalRewards.reward_underground_belt_tier_2,
// 	},
// 	// 14
// 	// Belt reader
// 	{
// 		shape: "--Cg----:--Cr----", // unused
// 		required: 8, // Per second!
// 		reward: enumHubGoalRewards.reward_belt_reader,
// 		throughputOnly: true,
// 	},
// 	// 15
// 	// Storage
// 	{
// 		shape: "SrSrSrSr:CyCyCyCy", // unused
// 		required: 10000,
// 		reward: enumHubGoalRewards.reward_storage,
// 	},
// 	// 16
// 	// Quad Cutter
// 	{
// 		shape: "SrSrSrSr:CyCyCyCy:SwSwSwSw", // belts t4 (two variants)
// 		required: 6000,
// 		reward: enumHubGoalRewards.reward_cutter_quad,
// 	},
// 	// 17
// 	// Double painter
// 	{
// 		shape: chinaShapes
// 			? "CyCyCyCy:CyCyCyCy:RyRyRyRy:RuRuRuRu"
// 			: "CbRbRbCb:CwCwCwCw:WbWbWbWb", // miner t4 (two variants)
// 		required: 20000,
// 		reward: enumHubGoalRewards.reward_painter_double,
// 	},
// 	// 18
// 	// Rotater (180deg)
// 	{
// 		shape: "Sg----Sg:CgCgCgCg:--CyCy--", // unused
// 		required: 20000,
// 		reward: enumHubGoalRewards.reward_rotater_180,
// 	},
// 	// 19
// 	// Compact splitter
// 	{
// 		shape: "CpRpCp--:SwSwSwSw",
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_splitter, // X
// 	},
// 	// 20
// 	// WIRES
// 	{
// 		shape: finalGameShape,
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_wires_painter_and_levers,
// 	},
// 	// 21
// 	// Filter
// 	{
// 		shape: "CrCwCrCw:CwCrCwCr:CrCwCrCw:CwCrCwCr",
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_filter,
// 	},
// 	// 22
// 	// Constant signal
// 	{
// 		shape: chinaShapes
// 			? "RrSySrSy:RyCrCwCr:CyCyRyCy"
// 			: "Cg----Cr:Cw----Cw:Sy------:Cy----Cy",
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_constant_signal,
// 	},
// 	// 23
// 	// Display
// 	{
// 		shape: chinaShapes
// 			? "CrCrCrCr:CwCwCwCw:WwWwWwWw:CrCrCrCr"
// 			: "CcSyCcSy:SyCcSyCc:CcSyCcSy",
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_display,
// 	},
// 	// 24 Logic gates
// 	{
// 		shape: chinaShapes
// 			? "Su----Su:RwRwRwRw:Cu----Cu:CwCwCwCw"
// 			: "CcRcCcRc:RwCwRwCw:Sr--Sw--:CyCyCyCy",
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_logic_gates,
// 	},
// 	// 25 Virtual Processing
// 	{
// 		shape: "Rg--Rg--:CwRwCwRw:--Rg--Rg",
// 		required: 25000,
// 		reward: enumHubGoalRewards.reward_virtual_processing,
// 	},
// 	// 26 Freeplay
// 	{
// 		shape: "CbCuCbCu:Sr------:--CrSrCr:CwCwCwCw",
// 		required: 50000,
// 		reward: enumHubGoalRewards.reward_freeplay,
// 	},
// ]),
// ];

class SandboxMode {
    static install(mod) {
        mod.modInterface.replaceMethod(Blueprint, "getCost", function () {
            return 0;
        });
        // mod.modInterface.replaceMethod(HubGoals, "isRewardUnlocked", function () {
        // 	return true;
        // });
        // mod.signals.modifyLevelDefinitions.add((
        // 	levels: {
        // 		shape: string;
        // 		required: number;
        // 		reward: string;
        // 		throughputOnly: boolean;
        // 	}[]
        // ) => {
        // 	levels.map(e => e.required = 1);
        // });
        // mod.signals.modifyUpgrades.add((
        // 	upgrades: Record<string, {
        // 		required: {
        // 			shape: string;
        // 			amount: number;
        // 		}[];
        // 		excludePrevious?: boolean;
        // 	}[]>
        // ) => {
        // 	Object.values(upgrades).flat().flatMap(e => e.required).map(e => e.amount = 1);
        // });
    }
}

const shapePatchChances = {
    circleSpawn: { base: 100, growth: 3, cap: 100 },
    squareSpawn: { base: 70, growth: 2, cap: 100 },
    starSpawn: { base: 30, growth: 1, cap: 100 },
    windmillSpawn: { base: 20, growth: 0.5, cap: 100 },
};
const predefinedPatches = [
    { x: 0, y: 0, item: SzColorItem.fromColor('red'), dx: 7, dy: 7 },
    { x: -1, y: 0, item: SzInfo.quad.named.circleSpawn, dx: -9, dy: 7 },
    { x: 0, y: -1, item: SzInfo.quad.named.squareSpawn, dx: 5, dy: -7 },
    { x: -1, y: -1, item: SzColorItem.fromColor('green') },
    { x: 5, y: -2, item: SzInfo.quad.named.starSpawn, dx: 5, dy: -7 },
];
class SpawnOwerride extends MapChunk {
    internalGenerateColorPatch(rng, colorPatchSize, distanceToOriginInChunks) {
        console.log(this);
        let available = ['red', 'green'];
        if (distanceToOriginInChunks > 2)
            available.push('blue');
        this.internalGeneratePatch(rng, colorPatchSize, SzColorItem.fromColor(rng.choice(available)));
    }
    internalGenerateShapePatch(rng, shapePatchSize, distanceToOriginInChunks) {
        let dToChance = (base, grow, maxTotal) => Math.round(base + clamp(distanceToOriginInChunks * grow, 0, maxTotal - base));
        SzInfo.quad.byName;
        const shapes = Object.fromEntries(Object.entries(shapePatchChances).map(([k, { base, growth, cap }]) => [k, dToChance(base, growth, cap)]));
        let shape = this.internalGenerateRandomSubShape(rng, shapes);
        // @ts-ignore
        const definition = SzDefinition.fromShortKey(SzInfo.quad.named[shape]);
        this.internalGeneratePatch(rng, shapePatchSize, this.root.shapeDefinitionMgr.getShapeItemFromDefinition(definition));
    }
    generatePredefined(rng) {
        let def = predefinedPatches.find(p => p.x == this.x && p.y == this.y);
        if (!def)
            return false;
        let item = def.item instanceof BaseItem ? def.item
            : this.root.shapeDefinitionMgr.getShapeItemFromDefinition(ShapeDefinition.fromShortKey(def.item));
        let dx = def.dx == null ? null : def.dx + (def.dx > 0 ? 0 : globalConfig.mapChunkSize);
        let dy = def.dy == null ? null : def.dy + (def.dy > 0 ? 0 : globalConfig.mapChunkSize);
        this.internalGeneratePatch(rng, 2, item, dx, dy);
        return true;
    }
    static install(mod) {
        ExtendSuperclass(mod, MapChunk, () => SpawnOwerride);
    }
}

const METADATA = {
    website: "",
    author: "Dimava",
    name: "Shapest (working)",
    version: "1.0.0",
    id: "shapest",
    description: "test!",
    minimumGameVersion: ">=1.5.0",
    doesNotAffectSavegame: false,
    settings: {},
};
class Mod extends Mod$1 {
    init() {
        this.use(SandboxMode);
        this.use(SzDefinition);
        this.use(SzShapeItem);
        this.use(SzColorItem);
        this.use(PainterOverride);
        this.use(Balancer22);
        this.use(Rotator3);
        this.use(SpawnOwerride);
        this.use(SzLevel);
    }
    use(module) {
        module.install(this);
        return this;
    }
}
window.$shapez_registerMod(Mod, METADATA);
