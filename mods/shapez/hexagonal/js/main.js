import { SzLevel } from "./levels/levels.js";
import { SzDefinition } from "./shapest/definition.js";
import { SzShapeItem } from "./shapest/item.js";
import { SzInfo } from "./shapest/layer.js";
import { SpawnOwerride } from "./SpawnOverride.js";
import { Blueprint, enumColorsToHexCode, enumShortcodeToColor, HubGoals, Mod as ModBase } from "./types/shapez.js";
export const METADATA = {
    "id": "hexagonal",
    "version": "1.3.0",
    "name": "hexagonal",
    "author": "Dimava",
    "description": "Hexagonal shapes",
    "website": "",
    "settings": {},
};
class TestMode {
    static install(mod) {
        mod.modInterface.replaceMethod(Blueprint, "getCost", function () {
            return 0;
        });
        mod.modInterface.replaceMethod(HubGoals, "isRewardUnlocked", function () {
            return true;
        });
        mod.signals.modifyLevelDefinitions.add((levels) => {
            levels.map(e => e.required = 1);
        });
        mod.signals.modifyUpgrades.add((upgrades) => {
            Object.values(upgrades).flat().flatMap(e => e.required).map(e => e.amount = 0);
        });
    }
}
export default class Mod extends ModBase {
    init() {
        // return;
        this.use(SzDefinition);
        this.use(SzShapeItem);
        // this.use(SzColorItem);
        // this.use(PainterOverride);
        // this.use(Balancer22);
        // this.use(Rotator3);
        this.use(SpawnOwerride);
        this.use(SzLevel);
        // this.use(TestMode);
        for (let c in enumShortcodeToColor) {
            // @ts-ignore
            SzInfo.color.byChar[c].style = enumColorsToHexCode[enumShortcodeToColor[c]];
        }
    }
    use(module) {
        module.install(this);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiJAZGltYXZhL2hleGFnb25hbC8iLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksT0FBTyxFQUFlLE1BQU0sbUJBQW1CLENBQUM7QUFFaEksTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFnQjtJQUNqQyxJQUFJLEVBQUUsV0FBVztJQUNqQixTQUFTLEVBQUUsT0FBTztJQUNsQixNQUFNLEVBQUUsV0FBVztJQUNuQixRQUFRLEVBQUUsUUFBUTtJQUNsQixhQUFhLEVBQUUsa0JBQWtCO0lBQ2pDLFNBQVMsRUFBRSxFQUFFO0lBQ2IsVUFBVSxFQUFFLEVBQVM7Q0FDeEIsQ0FBQTtBQUVELE1BQU0sUUFBUTtJQUNiLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBWTtRQUMxQixHQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFO1lBQ3BELE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLEVBQUU7WUFDNUQsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQ3RDLE1BS0csRUFDRixFQUFFO1lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFHSCxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FDOUIsUUFNSSxFQUNILEVBQUU7WUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQyxDQUFDO0lBR0osQ0FBQztDQUNEO0FBR0QsTUFBTSxDQUFDLE9BQU8sT0FBTyxHQUFJLFNBQVEsT0FBTztJQUN2QyxJQUFJO1FBRUgsVUFBVTtRQUVWLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN0Qix5QkFBeUI7UUFFekIsNkJBQTZCO1FBQzdCLHdCQUF3QjtRQUV4QixzQkFBc0I7UUFFdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBR2xCLHNCQUFzQjtRQUd0QixLQUFLLElBQUksQ0FBQyxJQUFJLG9CQUFvQixFQUFFO1lBQ25DLGFBQWE7WUFDYixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1RTtJQUlGLENBQUM7SUFFRCxHQUFHLENBQUMsTUFBdUM7UUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN6TGV2ZWwgfSBmcm9tIFwiLi9sZXZlbHMvbGV2ZWxzLmpzXCI7XHJcbmltcG9ydCB7IFN6RGVmaW5pdGlvbiB9IGZyb20gXCIuL3NoYXBlc3QvZGVmaW5pdGlvbi5qc1wiO1xyXG5pbXBvcnQgeyBTelNoYXBlSXRlbSB9IGZyb20gXCIuL3NoYXBlc3QvaXRlbS5qc1wiO1xyXG5pbXBvcnQgeyBTekluZm8gfSBmcm9tIFwiLi9zaGFwZXN0L2xheWVyLmpzXCI7XHJcbmltcG9ydCB7IFNwYXduT3dlcnJpZGUgfSBmcm9tIFwiLi9TcGF3bk92ZXJyaWRlLmpzXCI7XHJcbmltcG9ydCB7IEJsdWVwcmludCwgZW51bUNvbG9yc1RvSGV4Q29kZSwgZW51bVNob3J0Y29kZVRvQ29sb3IsIEh1YkdvYWxzLCBNb2QgYXMgTW9kQmFzZSwgTW9kTWV0YWRhdGEgfSBmcm9tIFwiLi90eXBlcy9zaGFwZXouanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBNRVRBREFUQTogTW9kTWV0YWRhdGEgPSB7XHJcbiAgICBcImlkXCI6IFwiaGV4YWdvbmFsXCIsXHJcbiAgICBcInZlcnNpb25cIjogXCIxLjMuMFwiLFxyXG4gICAgXCJuYW1lXCI6IFwiaGV4YWdvbmFsXCIsXHJcbiAgICBcImF1dGhvclwiOiBcIkRpbWF2YVwiLFxyXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkhleGFnb25hbCBzaGFwZXNcIixcclxuICAgIFwid2Vic2l0ZVwiOiBcIlwiLFxyXG4gICAgXCJzZXR0aW5nc1wiOiB7fSBhcyBhbnksXHJcbn1cclxuXHJcbmNsYXNzIFRlc3RNb2RlIHtcclxuXHRzdGF0aWMgaW5zdGFsbChtb2Q6IE1vZEJhc2UpIHtcclxuXHRcdG1vZC5tb2RJbnRlcmZhY2UucmVwbGFjZU1ldGhvZChCbHVlcHJpbnQsIFwiZ2V0Q29zdFwiLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fSk7XHJcblx0XHRtb2QubW9kSW50ZXJmYWNlLnJlcGxhY2VNZXRob2QoSHViR29hbHMsIFwiaXNSZXdhcmRVbmxvY2tlZFwiLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0bW9kLnNpZ25hbHMubW9kaWZ5TGV2ZWxEZWZpbml0aW9ucy5hZGQoKFxyXG5cdFx0XHRsZXZlbHM6IHtcclxuXHRcdFx0XHRzaGFwZTogc3RyaW5nO1xyXG5cdFx0XHRcdHJlcXVpcmVkOiBudW1iZXI7XHJcblx0XHRcdFx0cmV3YXJkOiBzdHJpbmc7XHJcblx0XHRcdFx0dGhyb3VnaHB1dE9ubHk6IGJvb2xlYW47XHJcblx0XHRcdH1bXVxyXG5cdFx0KSA9PiB7XHJcblx0XHRcdGxldmVscy5tYXAoZSA9PiBlLnJlcXVpcmVkID0gMSk7XHJcblx0XHR9KTtcclxuXHJcblxyXG5cdFx0bW9kLnNpZ25hbHMubW9kaWZ5VXBncmFkZXMuYWRkKChcclxuXHRcdFx0dXBncmFkZXM6IFJlY29yZDxzdHJpbmcsIHtcclxuXHRcdFx0XHRyZXF1aXJlZDoge1xyXG5cdFx0XHRcdFx0c2hhcGU6IHN0cmluZztcclxuXHRcdFx0XHRcdGFtb3VudDogbnVtYmVyO1xyXG5cdFx0XHRcdH1bXTtcclxuXHRcdFx0XHRleGNsdWRlUHJldmlvdXM/OiBib29sZWFuO1xyXG5cdFx0XHR9W10+XHJcblx0XHQpID0+IHtcclxuXHRcdFx0T2JqZWN0LnZhbHVlcyh1cGdyYWRlcykuZmxhdCgpLmZsYXRNYXAoZSA9PiBlLnJlcXVpcmVkKS5tYXAoZSA9PiBlLmFtb3VudCA9IDApO1xyXG5cdFx0fSk7XHJcblxyXG5cclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2QgZXh0ZW5kcyBNb2RCYXNlIHtcclxuXHRpbml0KCkge1xyXG5cclxuXHRcdC8vIHJldHVybjtcclxuXHJcblx0XHR0aGlzLnVzZShTekRlZmluaXRpb24pO1xyXG5cdFx0dGhpcy51c2UoU3pTaGFwZUl0ZW0pO1xyXG5cdFx0Ly8gdGhpcy51c2UoU3pDb2xvckl0ZW0pO1xyXG5cclxuXHRcdC8vIHRoaXMudXNlKFBhaW50ZXJPdmVycmlkZSk7XHJcblx0XHQvLyB0aGlzLnVzZShCYWxhbmNlcjIyKTtcclxuXHJcblx0XHQvLyB0aGlzLnVzZShSb3RhdG9yMyk7XHJcblxyXG5cdFx0dGhpcy51c2UoU3Bhd25Pd2VycmlkZSk7XHJcblxyXG5cdFx0dGhpcy51c2UoU3pMZXZlbCk7XHJcblxyXG5cclxuXHRcdC8vIHRoaXMudXNlKFRlc3RNb2RlKTtcclxuXHJcblxyXG5cdFx0Zm9yIChsZXQgYyBpbiBlbnVtU2hvcnRjb2RlVG9Db2xvcikge1xyXG5cdFx0XHQvLyBAdHMtaWdub3JlXHJcblx0XHRcdFN6SW5mby5jb2xvci5ieUNoYXJbY10uc3R5bGUgPSBlbnVtQ29sb3JzVG9IZXhDb2RlW2VudW1TaG9ydGNvZGVUb0NvbG9yW2NdXTtcclxuXHRcdH1cclxuXHRcdFxyXG5cclxuXHJcblx0fVxyXG5cclxuXHR1c2UobW9kdWxlOiB7IGluc3RhbGwobW9kOiBNb2RCYXNlKTogdm9pZCB9KSB7XHJcblx0XHRtb2R1bGUuaW5zdGFsbCh0aGlzKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbiJdfQ==