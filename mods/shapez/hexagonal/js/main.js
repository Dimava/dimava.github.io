import { SzLevel } from "./levels/levels.js";
import { SzDefinition } from "./shapest/definition.js";
import { SzShapeItem } from "./shapest/item.js";
import { SzInfo } from "./shapest/layer.js";
import { SpawnOwerride } from "./SpawnOverride.js";
import { Blueprint, enumColorsToHexCode, enumShortcodeToColor, HubGoals, Mod } from "./types/shapez.js";
export const METADATA = {
    "id": "hexagonal",
    "version": "1.3.0",
    "name": "hexagonal",
    "author": "Dimava",
    "description": "Hexagonal shapes",
    "website": "",
    "settings": {},
};
class TestMode {
    static install(mod) {
        mod.modInterface.replaceMethod(Blueprint, "getCost", function () {
            return 0;
        });
        mod.modInterface.replaceMethod(HubGoals, "isRewardUnlocked", function () {
            return true;
        });
        mod.signals.modifyLevelDefinitions.add((levels) => {
            levels.map(e => e.required = 1);
        });
        mod.signals.modifyUpgrades.add((upgrades) => {
            Object.values(upgrades).flat().flatMap(e => e.required).map(e => e.amount = 0);
        });
    }
}
export default class ModImpl extends Mod {
    init() {
        // return;
        this.use(SzDefinition);
        this.use(SzShapeItem);
        // this.use(SzColorItem);
        // this.use(PainterOverride);
        // this.use(Balancer22);
        // this.use(Rotator3);
        this.use(SpawnOwerride);
        this.use(SzLevel);
        // this.use(TestMode);
        for (let c in enumShortcodeToColor) {
            // @ts-ignore
            SzInfo.color.byChar[c].style = enumColorsToHexCode[enumShortcodeToColor[c]];
        }
    }
    use(module) {
        module.install(this);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUVySCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQWdCO0lBQ2pDLElBQUksRUFBRSxXQUFXO0lBQ2pCLFNBQVMsRUFBRSxPQUFPO0lBQ2xCLE1BQU0sRUFBRSxXQUFXO0lBQ25CLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLGFBQWEsRUFBRSxrQkFBa0I7SUFDakMsU0FBUyxFQUFFLEVBQUU7SUFDYixVQUFVLEVBQUUsRUFBUztDQUN4QixDQUFBO0FBRUQsTUFBTSxRQUFRO0lBQ2IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFRO1FBQ3RCLEdBQUcsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUU7WUFDcEQsT0FBTyxDQUFDLENBQUM7UUFDVixDQUFDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsRUFBRTtZQUM1RCxPQUFPLElBQUksQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO1FBRUgsR0FBRyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FDdEMsTUFLRyxFQUNGLEVBQUU7WUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUdILEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUM5QixRQU1JLEVBQ0gsRUFBRTtZQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEYsQ0FBQyxDQUFDLENBQUM7SUFHSixDQUFDO0NBQ0Q7QUFHRCxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQVEsU0FBUSxHQUFHO0lBQ3ZDLElBQUk7UUFFSCxVQUFVO1FBRVYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RCLHlCQUF5QjtRQUV6Qiw2QkFBNkI7UUFDN0Isd0JBQXdCO1FBRXhCLHNCQUFzQjtRQUV0QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHbEIsc0JBQXNCO1FBR3RCLEtBQUssSUFBSSxDQUFDLElBQUksb0JBQW9CLEVBQUU7WUFDbkMsYUFBYTtZQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVFO0lBSUYsQ0FBQztJQUVELEdBQUcsQ0FBQyxNQUFtQztRQUN0QyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3pMZXZlbCB9IGZyb20gXCIuL2xldmVscy9sZXZlbHMuanNcIjtcclxuaW1wb3J0IHsgU3pEZWZpbml0aW9uIH0gZnJvbSBcIi4vc2hhcGVzdC9kZWZpbml0aW9uLmpzXCI7XHJcbmltcG9ydCB7IFN6U2hhcGVJdGVtIH0gZnJvbSBcIi4vc2hhcGVzdC9pdGVtLmpzXCI7XHJcbmltcG9ydCB7IFN6SW5mbyB9IGZyb20gXCIuL3NoYXBlc3QvbGF5ZXIuanNcIjtcclxuaW1wb3J0IHsgU3Bhd25Pd2VycmlkZSB9IGZyb20gXCIuL1NwYXduT3ZlcnJpZGUuanNcIjtcclxuaW1wb3J0IHsgQmx1ZXByaW50LCBlbnVtQ29sb3JzVG9IZXhDb2RlLCBlbnVtU2hvcnRjb2RlVG9Db2xvciwgSHViR29hbHMsIE1vZCwgTW9kTWV0YWRhdGEgfSBmcm9tIFwiLi90eXBlcy9zaGFwZXouanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBNRVRBREFUQTogTW9kTWV0YWRhdGEgPSB7XHJcbiAgICBcImlkXCI6IFwiaGV4YWdvbmFsXCIsXHJcbiAgICBcInZlcnNpb25cIjogXCIxLjMuMFwiLFxyXG4gICAgXCJuYW1lXCI6IFwiaGV4YWdvbmFsXCIsXHJcbiAgICBcImF1dGhvclwiOiBcIkRpbWF2YVwiLFxyXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkhleGFnb25hbCBzaGFwZXNcIixcclxuICAgIFwid2Vic2l0ZVwiOiBcIlwiLFxyXG4gICAgXCJzZXR0aW5nc1wiOiB7fSBhcyBhbnksXHJcbn1cclxuXHJcbmNsYXNzIFRlc3RNb2RlIHtcclxuXHRzdGF0aWMgaW5zdGFsbChtb2Q6IE1vZCkge1xyXG5cdFx0bW9kLm1vZEludGVyZmFjZS5yZXBsYWNlTWV0aG9kKEJsdWVwcmludCwgXCJnZXRDb3N0XCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9KTtcclxuXHRcdG1vZC5tb2RJbnRlcmZhY2UucmVwbGFjZU1ldGhvZChIdWJHb2FscywgXCJpc1Jld2FyZFVubG9ja2VkXCIsIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9KTtcclxuXHJcblx0XHRtb2Quc2lnbmFscy5tb2RpZnlMZXZlbERlZmluaXRpb25zLmFkZCgoXHJcblx0XHRcdGxldmVsczoge1xyXG5cdFx0XHRcdHNoYXBlOiBzdHJpbmc7XHJcblx0XHRcdFx0cmVxdWlyZWQ6IG51bWJlcjtcclxuXHRcdFx0XHRyZXdhcmQ6IHN0cmluZztcclxuXHRcdFx0XHR0aHJvdWdocHV0T25seTogYm9vbGVhbjtcclxuXHRcdFx0fVtdXHJcblx0XHQpID0+IHtcclxuXHRcdFx0bGV2ZWxzLm1hcChlID0+IGUucmVxdWlyZWQgPSAxKTtcclxuXHRcdH0pO1xyXG5cclxuXHJcblx0XHRtb2Quc2lnbmFscy5tb2RpZnlVcGdyYWRlcy5hZGQoKFxyXG5cdFx0XHR1cGdyYWRlczogUmVjb3JkPHN0cmluZywge1xyXG5cdFx0XHRcdHJlcXVpcmVkOiB7XHJcblx0XHRcdFx0XHRzaGFwZTogc3RyaW5nO1xyXG5cdFx0XHRcdFx0YW1vdW50OiBudW1iZXI7XHJcblx0XHRcdFx0fVtdO1xyXG5cdFx0XHRcdGV4Y2x1ZGVQcmV2aW91cz86IGJvb2xlYW47XHJcblx0XHRcdH1bXT5cclxuXHRcdCkgPT4ge1xyXG5cdFx0XHRPYmplY3QudmFsdWVzKHVwZ3JhZGVzKS5mbGF0KCkuZmxhdE1hcChlID0+IGUucmVxdWlyZWQpLm1hcChlID0+IGUuYW1vdW50ID0gMCk7XHJcblx0XHR9KTtcclxuXHJcblxyXG5cdH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZEltcGwgZXh0ZW5kcyBNb2Qge1xyXG5cdGluaXQoKSB7XHJcblxyXG5cdFx0Ly8gcmV0dXJuO1xyXG5cclxuXHRcdHRoaXMudXNlKFN6RGVmaW5pdGlvbik7XHJcblx0XHR0aGlzLnVzZShTelNoYXBlSXRlbSk7XHJcblx0XHQvLyB0aGlzLnVzZShTekNvbG9ySXRlbSk7XHJcblxyXG5cdFx0Ly8gdGhpcy51c2UoUGFpbnRlck92ZXJyaWRlKTtcclxuXHRcdC8vIHRoaXMudXNlKEJhbGFuY2VyMjIpO1xyXG5cclxuXHRcdC8vIHRoaXMudXNlKFJvdGF0b3IzKTtcclxuXHJcblx0XHR0aGlzLnVzZShTcGF3bk93ZXJyaWRlKTtcclxuXHJcblx0XHR0aGlzLnVzZShTekxldmVsKTtcclxuXHJcblxyXG5cdFx0Ly8gdGhpcy51c2UoVGVzdE1vZGUpO1xyXG5cclxuXHJcblx0XHRmb3IgKGxldCBjIGluIGVudW1TaG9ydGNvZGVUb0NvbG9yKSB7XHJcblx0XHRcdC8vIEB0cy1pZ25vcmVcclxuXHRcdFx0U3pJbmZvLmNvbG9yLmJ5Q2hhcltjXS5zdHlsZSA9IGVudW1Db2xvcnNUb0hleENvZGVbZW51bVNob3J0Y29kZVRvQ29sb3JbY11dO1xyXG5cdFx0fVxyXG5cdFx0XHJcblxyXG5cclxuXHR9XHJcblxyXG5cdHVzZShtb2R1bGU6IHsgaW5zdGFsbChtb2Q6IE1vZCk6IHZvaWQgfSkge1xyXG5cdFx0bW9kdWxlLmluc3RhbGwodGhpcyk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn1cclxuXHJcblxyXG4iXX0=