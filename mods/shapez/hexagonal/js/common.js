export function strToH(s) {
    let hash = 0;
    for (let c of s) {
        hash = (((hash << 5) - hash) + c.charCodeAt(0)) | 0;
    }
    return hash.toString(16);
}
export function override(cls, name, fn) {
    let oldFnName = name;
    while (cls.prototype[oldFnName])
        oldFnName = '_' + oldFnName;
    cls.prototype[oldFnName] = cls.prototype[name];
    cls.prototype[name] = fn(oldFnName);
}
export function ExtendSuperclass(mod, cls, makeSubclass) {
    mod.modInterface.extendClass(cls, (old) => {
        return makeSubclass(old).prototype;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IkBkaW1hdmEvaGV4YWdvbmFsLyIsInNvdXJjZXMiOlsiY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLE1BQU0sVUFBVSxNQUFNLENBQUMsQ0FBUztJQUMvQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFDYixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNoQixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDcEQ7SUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUlELE1BQU0sVUFBVSxRQUFRLENBRXRCLEdBQU0sRUFBRSxJQUFPLEVBQUUsRUFBMEI7SUFDNUMsSUFBSSxTQUFTLEdBQUcsSUFBYyxDQUFDO0lBQy9CLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFBRSxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQztJQUM3RCxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBYyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUdELE1BQU0sVUFBVSxnQkFBZ0IsQ0FJOUIsR0FBUSxFQUFFLEdBQU0sRUFBRSxZQUFxQztJQUN4RCxHQUFHLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUN6QyxPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kIH0gZnJvbSBcIi4vdHlwZXMvc2hhcGV6LmpzXCI7XHJcblxyXG5cclxuZGVjbGFyZSBtb2R1bGUgXCJzaGFwZXovZ2FtZS9jb21wb25lbnRzL2l0ZW1fcHJvY2Vzc29yXCIge1xyXG5cdGV4cG9ydCBpbnRlcmZhY2UgZW51bUl0ZW1Qcm9jZXNzb3JUeXBlcyB7XHJcblx0XHRmbGlwcGVyOiAnZmxpcHBlJztcclxuXHRcdHByaW9yaXR5X2JhbGFuY2VyOiAncHJpb3JpdHlfYmFsYW5jZXInO1xyXG5cdH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyVG9IKHM6IHN0cmluZyk6IHN0cmluZyB7XHJcblx0bGV0IGhhc2ggPSAwO1xyXG5cdGZvciAobGV0IGMgb2Ygcykge1xyXG5cdFx0aGFzaCA9ICgoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGMuY2hhckNvZGVBdCgwKSkgfCAwO1xyXG5cdH1cclxuXHRyZXR1cm4gaGFzaC50b1N0cmluZygxNik7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG92ZXJyaWRlPFxyXG5cdEMgZXh0ZW5kcyBhYnN0cmFjdCBuZXcgKC4uLmFyZ3M6IGFueSkgPT4gYW55LCBUIGV4dGVuZHMgSW5zdGFuY2VUeXBlPEM+LCBLIGV4dGVuZHMga2V5b2YgVFxyXG4+KGNsczogQywgbmFtZTogSywgZm46IChvbGRGbk5hbWU6IEspID0+IFRbS10pIHtcclxuXHRsZXQgb2xkRm5OYW1lID0gbmFtZSBhcyBzdHJpbmc7XHJcblx0d2hpbGUgKGNscy5wcm90b3R5cGVbb2xkRm5OYW1lXSkgb2xkRm5OYW1lID0gJ18nICsgb2xkRm5OYW1lO1xyXG5cdGNscy5wcm90b3R5cGVbb2xkRm5OYW1lXSA9IGNscy5wcm90b3R5cGVbbmFtZV07XHJcblx0Y2xzLnByb3RvdHlwZVtuYW1lXSA9IGZuKG9sZEZuTmFtZSBhcyBLKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBFeHRlbmRTdXBlcmNsYXNzPFxyXG5cdEMgZXh0ZW5kcyBhYnN0cmFjdCBuZXcgKC4uLmFyZ3M6IGFueSkgPT4gYW55LFxyXG5cdFQgZXh0ZW5kcyBJbnN0YW5jZVR5cGU8Qz4sXHJcblx0TyBleHRlbmRzIENcclxuPihtb2Q6IE1vZCwgY2xzOiBDLCBtYWtlU3ViY2xhc3M6IChvbGQ6IHsgJG9sZDogVCB9KSA9PiBPKSB7XHJcblx0bW9kLm1vZEludGVyZmFjZS5leHRlbmRDbGFzcyhjbHMsIChvbGQpID0+IHtcclxuXHRcdHJldHVybiBtYWtlU3ViY2xhc3Mob2xkKS5wcm90b3R5cGU7XHJcblx0fSk7XHJcbn0iXX0=