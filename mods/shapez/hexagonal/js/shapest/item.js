import { ShapeDefinitionManager, ShapeItem, THEME, types } from "../types/shapez.js";
import { SzDefinition } from "./definition.js";
export class SzShapeItem extends ShapeItem {
    static getId() {
        return 'szItem';
    }
    // @ts-ignore
    definition;
    constructor(definition) {
        if (SzShapeItem.constructorCache.has(definition.getHash())) {
            return SzShapeItem.constructorCache.get(definition.getHash());
        }
        super(null);
        this.definition = definition;
        this.definition.getHash();
        SzShapeItem.constructorCache.set(definition.getHash(), this);
    }
    static constructorCache = new Map();
    static getSchema() {
        return types.string;
    }
    getItemType() {
        return 'shape';
    }
    equals(other) {
        return other.getItemType() == this.getItemType() && other.definition == this.definition;
    }
    drawItemCenteredClipped(x, y, parameters, diameter) {
        if (!parameters.visibleRect.containsCircle(x, y, diameter / 2))
            return;
        if (!diameter)
            throw new Error();
        this.drawItemCenteredImpl(x, y, parameters, diameter);
    }
    getBackgroundColorAsResource() {
        return THEME.map.resources.shape;
    }
    static deserialize(data) {
        // debugger;
        console.log('deserialize', data);
        if (data.length < 4)
            debugger;
        // this.definition = SzDefinition.fromShortKey(data);
        return new SzShapeItem(new SzDefinition(data));
    }
    serialize() {
        let h = this.definition.getHash();
        if (h.length < 4)
            debugger;
        // console.log('serialize', h);
        return h;
    }
    // deserialize(data: any, root?: GameRoot): string | void {
    // 	throw new Error("Method not implemented.");
    // }
    getAsCopyableKey() {
        throw new Error("Method not implemented.");
    }
    equalsImpl(other) {
        throw new Error("Method not implemented.");
    }
    drawFullSizeOnCanvas(context, size) {
        this.definition.drawFullSizeOnCanvas(context, size);
    }
    drawItemCenteredImpl(x, y, parameters, diameter) {
        this.definition.drawCentered(x, y, parameters, diameter);
    }
    static install(mod) {
        mod.modInterface.extendClass(ShapeDefinitionManager, ({ $old }) => ({
            getShapeItemFromDefinition(definition) {
                if (!(definition instanceof SzDefinition)) {
                    return $old.getShapeItemFromDefinition.call(this, definition);
                }
                return this.shapeKeyToItem[definition.getHash()] ??= new SzShapeItem(definition);
            }
        }));
        mod.modInterface.registerItem(SzShapeItem, data => SzShapeItem.deserialize(data));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5qcyIsInNvdXJjZVJvb3QiOiJAZGltYXZhL2hleGFnb25hbC8iLCJzb3VyY2VzIjpbInNoYXBlc3QvaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlDLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRy9DLE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBUztJQUN6QyxNQUFNLENBQUMsS0FBSztRQUNYLE9BQU8sUUFBUSxDQUFDO0lBQ2pCLENBQUM7SUFDRCxhQUFhO0lBQ2IsVUFBVSxDQUFnQjtJQUMxQixZQUFZLFVBQXdCO1FBQ25DLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtZQUMzRCxPQUFPLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFFLENBQUM7U0FDL0Q7UUFDRCxLQUFLLENBQUMsSUFBVyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQixXQUFXLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQ0QsTUFBTSxDQUFDLGdCQUFnQixHQUE2QixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRTlELE1BQU0sQ0FBQyxTQUFTO1FBQ2YsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFDRCxXQUFXO1FBQ1YsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFlO1FBQ3JCLE9BQU8sS0FBSyxDQUFD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QmFzZUl0ZW0sIERyYXdQYXJhbWV0ZXJzLCBNb2QsIFNoYXBlRGVmaW5pdGlvbk1hbmFnZXIsIFNoYXBlSXRlbSwgVEhFTUUsIHR5cGVzIH0gZnJvbSBcIi4uL3R5cGVzL3NoYXBlei5qc1wiO1xyXG5pbXBvcnQgeyBTekRlZmluaXRpb24gfSBmcm9tIFwiLi9kZWZpbml0aW9uLmpzXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFN6U2hhcGVJdGVtIGV4dGVuZHMgU2hhcGVJdGVtIGltcGxlbWVudHMgU2hhcGVJdGVtIHtcclxuXHRzdGF0aWMgZ2V0SWQoKSB7XHJcblx0XHRyZXR1cm4gJ3N6SXRlbSc7XHJcblx0fVxyXG5cdC8vIEB0cy1pZ25vcmVcclxuXHRkZWZpbml0aW9uITogU3pEZWZpbml0aW9uO1xyXG5cdGNvbnN0cnVjdG9yKGRlZmluaXRpb246IFN6RGVmaW5pdGlvbikge1xyXG5cdFx0aWYgKFN6U2hhcGVJdGVtLmNvbnN0cnVjdG9yQ2FjaGUuaGFzKGRlZmluaXRpb24uZ2V0SGFzaCgpKSkge1xyXG5cdFx0XHRyZXR1cm4gU3pTaGFwZUl0ZW0uY29uc3RydWN0b3JDYWNoZS5nZXQoZGVmaW5pdGlvbi5nZXRIYXNoKCkpITtcclxuXHRcdH1cclxuXHRcdHN1cGVyKG51bGwgYXMgYW55KTtcclxuXHRcdHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XHJcblx0XHR0aGlzLmRlZmluaXRpb24uZ2V0SGFzaCgpO1xyXG5cdFx0U3pTaGFwZUl0ZW0uY29uc3RydWN0b3JDYWNoZS5zZXQoZGVmaW5pdGlvbi5nZXRIYXNoKCksIHRoaXMpO1xyXG5cdH1cclxuXHRzdGF0aWMgY29uc3RydWN0b3JDYWNoZTogTWFwPHN0cmluZywgU3pTaGFwZUl0ZW0+ID0gbmV3IE1hcCgpO1xyXG5cclxuXHRzdGF0aWMgZ2V0U2NoZW1hKCkge1xyXG5cdFx0cmV0dXJuIHR5cGVzLnN0cmluZztcclxuXHR9XHJcblx0Z2V0SXRlbVR5cGUoKSB7XHJcblx0XHRyZXR1cm4gJ3NoYXBlJztcclxuXHR9XHJcblx0ZXF1YWxzKG90aGVyOiBCYXNlSXRlbSk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIG90aGVyLmdldEl0ZW1UeXBlKCkgPT0gdGhpcy5nZXRJdGVtVHlwZSgpICYmIChvdGhlciBhcyBTelNoYXBlSXRlbSkuZGVmaW5pdGlvbiA9PSB0aGlzLmRlZmluaXRpb247XHJcblx0fVxyXG5cdGRyYXdJdGVtQ2VudGVyZWRDbGlwcGVkKHg6IG51bWJlciwgeTogbnVtYmVyLCBwYXJhbWV0ZXJzOiBEcmF3UGFyYW1ldGVycywgZGlhbWV0ZXI/OiBudW1iZXIpOiB2b2lkIHtcclxuXHRcdGlmICghcGFyYW1ldGVycy52aXNpYmxlUmVjdC5jb250YWluc0NpcmNsZSh4LCB5LCBkaWFtZXRlciEgLyAyKSkgcmV0dXJuO1xyXG5cdFx0aWYgKCFkaWFtZXRlcikgdGhyb3cgbmV3IEVycm9yKCk7XHJcblx0XHR0aGlzLmRyYXdJdGVtQ2VudGVyZWRJbXBsKHgsIHksIHBhcmFtZXRlcnMsIGRpYW1ldGVyKTtcclxuXHR9XHJcblx0Z2V0QmFja2dyb3VuZENvbG9yQXNSZXNvdXJjZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIFRIRU1FLm1hcC5yZXNvdXJjZXMuc2hhcGU7XHJcblx0fVxyXG5cclxuXHJcblx0c3RhdGljIGRlc2VyaWFsaXplKGRhdGE6IGFueSkge1xyXG5cdFx0Ly8gZGVidWdnZXI7XHJcblx0XHRjb25zb2xlLmxvZygnZGVzZXJpYWxpemUnLCBkYXRhKTtcclxuXHRcdGlmIChkYXRhLmxlbmd0aCA8IDQpIGRlYnVnZ2VyO1xyXG5cdFx0Ly8gdGhpcy5kZWZpbml0aW9uID0gU3pEZWZpbml0aW9uLmZyb21TaG9ydEtleShkYXRhKTtcclxuXHRcdHJldHVybiBuZXcgU3pTaGFwZUl0ZW0obmV3IFN6RGVmaW5pdGlvbihkYXRhKSk7XHJcblx0fVxyXG5cdHNlcmlhbGl6ZSgpOiBzdHJpbmcgfCBudW1iZXIgfCBvYmplY3Qge1xyXG5cdFx0bGV0IGggPSB0aGlzLmRlZmluaXRpb24uZ2V0SGFzaCgpO1xyXG5cdFx0aWYgKGgubGVuZ3RoIDwgNCkgZGVidWdnZXI7XHJcblx0XHQvLyBjb25zb2xlLmxvZygnc2VyaWFsaXplJywgaCk7XHJcblx0XHRyZXR1cm4gaDtcclxuXHR9XHJcblx0Ly8gZGVzZXJpYWxpemUoZGF0YTogYW55LCByb290PzogR2FtZVJvb3QpOiBzdHJpbmcgfCB2b2lkIHtcclxuXHQvLyBcdHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG5cdC8vIH1cclxuXHJcblxyXG5cdGdldEFzQ29weWFibGVLZXkoKTogc3RyaW5nIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG5cdH1cclxuXHRlcXVhbHNJbXBsKG90aGVyOiBCYXNlSXRlbSk6IGJvb2xlYW4ge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcblx0fVxyXG5cdGRyYXdGdWxsU2l6ZU9uQ2FudmFzKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcblx0XHR0aGlzLmRlZmluaXRpb24uZHJhd0Z1bGxTaXplT25DYW52YXMoY29udGV4dCwgc2l6ZSk7XHJcblx0fVxyXG5cdGRyYXdJdGVtQ2VudGVyZWRJbXBsKHg6IG51bWJlciwgeTogbnVtYmVyLCBwYXJhbWV0ZXJzOiBEcmF3UGFyYW1ldGVycywgZGlhbWV0ZXI6IG51bWJlcik6IHZvaWQge1xyXG5cdFx0dGhpcy5kZWZpbml0aW9uLmRyYXdDZW50ZXJlZCh4LCB5LCBwYXJhbWV0ZXJzLCBkaWFtZXRlcik7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cdHN0YXRpYyBpbnN0YWxsKG1vZDogTW9kKSB7XHJcblxyXG5cdFx0bW9kLm1vZEludGVyZmFjZS5leHRlbmRDbGFzcyhTaGFwZURlZmluaXRpb25NYW5hZ2VyLCAoeyAkb2xkIH0pID0+ICh7XHJcblx0XHRcdGdldFNoYXBlSXRlbUZyb21EZWZpbml0aW9uKHRoaXM6IFNoYXBlRGVmaW5pdGlvbk1hbmFnZXIsIGRlZmluaXRpb24pOiBTaGFwZUl0ZW0ge1xyXG5cdFx0XHRcdGlmICghKGRlZmluaXRpb24gaW5zdGFuY2VvZiBTekRlZmluaXRpb24pKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJG9sZC5nZXRTaGFwZUl0ZW1Gcm9tRGVmaW5pdGlvbi5jYWxsKHRoaXMsIGRlZmluaXRpb24pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gKHRoaXMuc2hhcGVLZXlUb0l0ZW0gYXMgUmVjb3JkPHN0cmluZywgU2hhcGVJdGVtPilbZGVmaW5pdGlvbi5nZXRIYXNoKCldID8/PSBuZXcgU3pTaGFwZUl0ZW0oZGVmaW5pdGlvbik7XHJcblx0XHRcdH1cclxuXHRcdH0pKTtcclxuXHJcblx0XHRtb2QubW9kSW50ZXJmYWNlLnJlZ2lzdGVySXRlbShTelNoYXBlSXRlbSwgZGF0YSA9PiBTelNoYXBlSXRlbS5kZXNlcmlhbGl6ZShkYXRhKSk7XHJcblx0fVxyXG5cclxufVxyXG5cclxuIl19