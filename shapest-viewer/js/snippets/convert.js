"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_jetpack_1 = __importDefault(require("fs-jetpack"));
const sharp_1 = __importDefault(require("sharp"));
const probe_image_size_1 = __importDefault(require("probe-image-size"));
const process_1 = require("process");
// let path = "C:/Users/Dimava/Desktop/projects/@seamless/dist/img-src/dl/1644414666192289895.png";
// let dir = 'C:/Users/Dimava/Desktop/projects/@seamless/dist/img-src/dl';
// let jp = jetpack.cwd(dir);
const supportedImageTypes = 'JPG, GIF, PNG, WebP, BMP, TIFF, SVG, PSD, ICO, AVIF, HEIC, HEIF.'.match(/\w+/g);
let count = 0;
let total = 0;
let copyOrSkip = 'ignore';
function empty() {
    let resolve;
    let reject;
    let p = new Promise((r, j) => {
        resolve = r;
        reject = j;
    });
    p.resolve = p.r = resolve;
    p.reject = p.j = reject;
    return p;
}
async function pmap(_this, mapper, threads = 5) {
    if (!(threads > 0))
        throw new Error();
    let tasks = _this.map((e, i, a) => [e, i, a]);
    let results = Array(tasks.length);
    let anyResolved = empty();
    let freeThreads = threads;
    async function runTask(task) {
        try {
            return await mapper(...task);
        }
        catch (err) {
            return err;
        }
    }
    async function run(task) {
        freeThreads--;
        results[task[1]] = await runTask(task);
        freeThreads++;
        let oldAnyResolved = anyResolved;
        anyResolved = empty();
        oldAnyResolved.r(undefined);
    }
    for (let task of tasks) {
        if (freeThreads == 0) {
            await anyResolved;
        }
        run(task);
    }
    while (freeThreads < threads) {
        await anyResolved;
    }
    return results;
}
let gifQueue = Promise.resolve();
let threader = (() => {
    let startList = Array(10000).fill(0).map(e => empty());
    let finishList = Array(10000).fill(0).map(e => empty());
    pmap(startList, (e, i, a) => {
        startList[i].resolve(0);
        return finishList[i];
    });
    let i = 0;
    return function () {
        let r = { start: startList[i], finish: finishList[i] };
        i++;
        return r;
    };
})();
async function convertImage(name, cwd_inp, cwd_out) {
    let inp = cwd_inp.path(name);
    let out = cwd_out.path(name);
    let fileType = name.split('.').pop().toUpperCase();
    if (fileType == 'GIF') {
        // 	let inpData = cwd_inp.inspect(inp)!;
        // 	let outData = cwd_out.inspect(out);
        // 	if (inpData.size != outData?.size) {
        // 		cwd_inp.copy(inp, out, { overwrite: true });
        // 		if (!outData) count++;
        // 		return;
        // 	}
    }
    if (cwd_out.exists(name)) {
        return;
    }
    // console.log(name);
    let { start, finish } = threader();
    await start;
    function logResult() {
        let inpData = cwd_inp.inspect(inp);
        let outData = cwd_out.inspect(out);
        let f = (x) => ((x?.size ?? 0) / 1e6).toFixed(2).padStart(6);
        count++;
        let cs = count.toString().padStart(total.toString().length);
        console.log(`${cs}/${total}       ${f(inpData)} > ${f(outData)} MB    ${inp}`);
        return (outData?.size ?? 0) / inpData.size;
    }
    if (!supportedImageTypes.includes(fileType)) {
        if (copyOrSkip == 'copy') {
            cwd_inp.copy(inp, out, { overwrite: true });
            logResult();
            console.log(`==copy`);
        }
        if (copyOrSkip == 'skip') {
            logResult();
            console.log(`==skip`);
        }
        finish.r(0);
        return;
    }
    let imgdata = await (0, probe_image_size_1.default)(cwd_inp.createReadStream(name)).catch(err => {
        throw name + '\n' + err;
    });
    let height = imgdata.height > 1080 * 1.5 ? 1080 : undefined;
    await (0, sharp_1.default)(inp, { animated: true })
        .resize({ height, fastShrinkOnLoad: false, withoutEnlargement: true })
        .webp({ lossless: true, reductionEffort: 6 })
        .toFile(out);
    let imgdata2 = await (0, probe_image_size_1.default)(cwd_out.createReadStream(name));
    let pc = logResult();
    if (pc < 1.5) {
        console.log(`compress: ${((1 - pc) * 100).toFixed(2)}%   ${imgdata.height} > ${imgdata2.height} px`);
    }
    else {
        console.log(`bad: x${pc}`);
        cwd_inp.copy(inp, out, { overwrite: true });
    }
    finish.r(0);
}
async function convertDir(name, cwd_inp, cwd_out) {
    async function convertNode(node, cwd_inp, cwd_out) {
        if (node.type == 'file') {
            await convertImage(node.name, cwd_inp, cwd_out);
        }
        if (node.type == 'dir') {
            await Promise.all(node.children.map(child => convertNode(child, cwd_inp.cwd(node.name), cwd_out.cwd(node.name))));
            // for (let child of node.children) {
            // 	await convertNode(child, cwd_inp.cwd(node.name), cwd_out.cwd(node.name))
            // }
        }
    }
    let info = {};
    let exists = 0;
    function countNodes(node, cwd_out) {
        if (node.type == 'dir') {
            cwd_out = cwd_out.dir(node.name);
            return node.children.reduce((v, e) => v + countNodes(e, cwd_out), 0);
        }
        if (node.type == cwd_out.exists(node.name)) {
            exists++;
            return 0;
        }
        if (copyOrSkip == 'ignore') {
            let fileType = node.name.split('.').pop().toUpperCase();
            if (!supportedImageTypes.includes(fileType)) {
                return 0;
            }
        }
        return 1;
    }
    let inpTree = cwd_inp.inspectTree(name, { symlinks: 'follow' });
    let outTree = cwd_out.inspectTree(name, { symlinks: 'follow' });
    count = 0;
    total = countNodes(inpTree, cwd_out);
    console.log({ exists, total, name });
    await convertNode(inpTree, cwd_inp, cwd_out);
}
let targetDir = process_1.argv[2] ?? 'dl';
// convertDir(targetDir,
// 	jetpack.dir('dist/img-src'),
// 	jetpack.dir('dist/img-dist'),
// )
let folders = [
    'Gweda Collection [Uncensored]',
    "AANiX",
    "Akt 2021",
    "Animations",
    "AnimeFlux",
    "ARTIST Lasterk",
    "bisiro MMD",
    "Bulging Senpai",
    "Chronicles of Wormwood",
    "dl",
    "Exga Collection",
    "Fallen Lady 2",
    "Fukuro",
    "Gecko",
    "generalbutch",
    "Hado",
    "Hell and Heaven",
    "lambda",
    "Mantis-X Animations",
    "MdaStarou1107",
    "MdaStarou788",
    "Melkor Mancin",
    "metafulgurlux2",
    "Nagoonimation",
    "Nagoonimation collection 1080p",
    "NeoArtCore",
    "OttosFoxHole",
    "Oyuwari",
    "Personalami",
    "PetAniBG",
    "Sayika",
    "Sensual Adventures Episode 6 The Revelation",
    "Skuddbutt",
    "src",
    "sys3.6.3",
    "titles",
    "Vaesark - part 5",
    "VG Erotica",
    "xxNIKICHENxx",
    "[DMM.com] Ayakashi Rumble X",
    "[DMM.com] Ayakashi Rumble X [2021-11-30]",
    "[FANBOX] Fumihiko",
    "[Hopuhopu team] PE Uniform and Preppy Girl [RUS]",
    "[Kiga Natsuno] 2020 Compilation 14 Work Set",
    "[seismic] Sweet Mami 2 [Puella Magi Madoka Magica][animated gif]",
    "[兔子老大 (Sayika)]"
];
// folders = ['dl']
void async function () {
    for (let targetDir of folders) {
        await convertDir(targetDir, fs_jetpack_1.default.dir('dist/img-src'), fs_jetpack_1.default.dir('dist/img-dist'));
    }
}();
// void async function () {
// 	for (let path of list) {
// 		let out = jp.path(path, '../webp1080', path);
// 		path = jp.path(path);
// 		console.log({ path, out });
// 		let imgdata = await isize(jp.createReadStream(path));
// 		let height = imgdata.height > 1080 * 1.5 ? 1080 : undefined;
// 		await sharp(path)
// 			.resize({ height, fastShrinkOnLoad: false, withoutEnlargement: true })
// 			.webp({ lossless: true, reductionEffort: 6 })
// 			.toFile(out)
// 	}
// }();
//# sourceMappingURL=data:application/json;base64,