"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PMap = void 0;
function empty() {
    let resolve;
    let reject;
    let p = new Promise((r, j) => {
        resolve = r;
        reject = j;
    });
    return Object.assign(p, { resolve, reject, r: resolve, j: reject });
}
class PMap {
    /** Original array */
    source = [];
    /** Async element converter function */
    mapper = (e) => e;
    /** Max number of requests at once.
     *  *May* be changed in runtime */
    threads = 5;
    /** Max distance between the olders incomplete and newest active elements.
     *  *May* be changed in runtime */
    window = Infinity;
    /** Unfinished result array */
    results = [];
    /** Promises for every element */
    requests = [];
    beforeStart = () => { };
    afterComplete = () => { };
    /** Length of the array */
    length = -1;
    /** The number of elements finished converting */
    completed = -1;
    /** Threads currently working
     *  in the mapper function: including the current one */
    activeThreads = -1;
    lastStarted = -1;
    allTasksDone;
    anyTaskResolved;
    constructor(source) {
        this.allTasksDone = Object.assign(this.emptyResult(), { pmap: this });
        this.anyTaskResolved = this.emptyResult();
        for (let k of Object.keys(this)) {
            if (typeof source[k] == typeof this[k]) {
                this[k] = source[k];
            }
            else if (source[k]) {
                throw new Error(`PMap: invalid constructor parameter: property ${k}: expected ${typeof this[k]}, but got ${typeof source[k]}`);
            }
        }
    }
    async startTask(arrayIndex) {
        this.activeThreads++;
        this.beforeStart(this.source[arrayIndex], arrayIndex, this.source, this);
        this.lastStarted = arrayIndex;
        let v = await this.mapper(this.source[arrayIndex], arrayIndex, this.source, this).catch(e => e);
        this.results[arrayIndex] = v;
        this.requests[arrayIndex].resolve(v);
        this.completed++;
        this.afterComplete(this.source[arrayIndex], arrayIndex, this.source, this);
        this.activeThreads--;
        this.anyTaskResolved.resolve();
    }
    async run_internal() {
        for (let arrayIndex = 0; arrayIndex < this.length; arrayIndex++) {
            while (this.activeThreads >= this.threads)
                await this.anyTaskResolved;
            this.anyTaskResolved = this.emptyResult();
            await this.requests[arrayIndex - this.window];
            this.startTask(arrayIndex);
        }
        this.allTasksDone.resolve(this.results);
        return this.allTasksDone;
    }
    run() {
        this.prepare();
        this.run_internal();
        return this.allTasksDone;
    }
    prepare() {
        if (this.length == -1)
            this.length = this.source.length;
        if (this.results.length == 0) {
            this.results = Array(this.length);
        }
        if (this.requests.length == 0) {
            this.requests = this.source.map(e => this.emptyResult());
        }
        if (this.completed < 0)
            this.completed = 0;
        if (this.activeThreads < 0)
            this.activeThreads = 0;
        if (this.lastStarted < -1)
            this.lastStarted = -1;
        this.anyTaskResolved = this.emptyResult();
        Object.assign(this.allTasksDone, { pmap: this });
        return this;
    }
    emptyResult() {
        let resolve;
        let reject;
        let p = new Promise((r, j) => {
            resolve = r;
            reject = j;
        });
        return Object.assign(p, { resolve, reject, r: resolve, j: reject });
    }
    static this_pmap(array, mapper, options = {}) {
        let pmap = new PMap({ source: array, mapper, ...options });
        return pmap.run();
    }
    static pmap(array, mapper, options = {}) {
        let pmap = new PMap({ source: array, mapper, ...options });
        return pmap.run();
    }
}
exports.PMap = PMap;
//# sourceMappingURL=data:application/json;base64,