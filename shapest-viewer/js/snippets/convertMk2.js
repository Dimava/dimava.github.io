"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_jetpack_1 = __importDefault(require("fs-jetpack"));
const pmap_1 = require("./pmap");
const DoubleTreeNode_1 = require("./DoubleTreeNode");
// let path = "C:/Users/Dimava/Desktop/projects/@seamless/dist/img-src/dl/1644414666192289895.png";
// let dir = 'C:/Users/Dimava/Desktop/projects/@seamless/dist/img-src/dl';
// let jp = jetpack.cwd(dir);
function deepToList(node, getChildren, list = []) {
    list.push(node);
    for (let c of getChildren(node))
        deepToList(c, getChildren, list);
    return list;
}
async function convertFolder(dir) {
    console.log(`building tree: ${dir}`);
    console.time(`building tree: ${dir}`);
    if (DoubleTreeNode_1.rootSrc.exists(dir) != 'dir') {
        console.log(`does not exist: ${dir}`);
        return;
    }
    let tree = await new DoubleTreeNode_1.DoubleTreeNode(dir);
    let leftTree = fs_jetpack_1.default.inspectTree(tree.leftPath, { symlinks: 'follow' });
    let rightTree = fs_jetpack_1.default.inspectTree(tree.rightPath, { symlinks: 'follow' });
    if (Math.abs(leftTree.size - rightTree.size) < 1e6) {
        console.log(`same size: ${dir}  (${leftTree.size - rightTree.size})`);
        return;
    }
    console.timeEnd(`building tree: ${dir}`);
    let doubleFilesAll = deepToList(tree, e => e.children ?? []).filter(e => e.type == 'file');
    let validFiles = doubleFilesAll.filter(pair => {
        if (!pair.left)
            return false;
        if (pair.extType == 'ignored')
            return false;
        return true;
    });
    // console.log(doubleFiles);
    // console.log(doubleFiles.filter(e => e.left && !e.right))
    // console.log(doubleFiles.filter(e => !e.left && e.right))
    // console.log(doubleFiles.filter(e => !e.left?.width && !videoTypes.includes(e.ext)))
    function isDone(pair) {
        if (pair.isHardLink)
            return true;
        if (!pair.left)
            return true;
        if (pair.right && pair.left && pair.right.size < 1.5 * pair.left.size)
            return true;
        return false;
    }
    let filesToDo = validFiles.filter(pair => {
        return !isDone(pair);
        // if (!pair.left) return false;
        // if (!pair.right?.size) return true;
        // if (pair.right.size > 1.5 * (pair.left?.size ?? 0)) return true;
        // return false;
    });
    let doneFiles = validFiles.filter(e => {
        return isDone(e);
    });
    let total = filesToDo.length;
    let count = 0;
    let s = `files done: ${doneFiles.length}/${validFiles.length} (of ${doubleFilesAll.length}) (todo: ${filesToDo.length})    ${((leftTree?.size ?? 0) / 1e9).toFixed(3)} -> ${((rightTree?.size ?? 0) / 1e9).toFixed(3)} GB    ${DoubleTreeNode_1.rootSrc.exists(`${dir}/.delete`) ? 'DELETE' : ''}`;
    console.log(s, filesToDo);
    if (doneFiles.length == validFiles.length && doubleFilesAll.length) {
        DoubleTreeNode_1.rootSrc.file(`${dir}/.delete`, { content: s });
    }
    else {
        DoubleTreeNode_1.rootSrc.remove(`${dir}/.delete`);
    }
    // conversion:
    // for (let pair of doubleFiles) {
    // 	if (pair.extType == 'image') await copyImage(pair);
    // 	if (pair.extType == 'video') await copyVideo(pair);
    // 	if (pair.extType == 'other') await copyOther(pair);
    // 	if (pair.extType == 'ignored') await copyIgnored(pair);
    // }
    await pmap_1.PMap.pmap(filesToDo, async (pair) => {
        if (pair.extType == 'image')
            return copyImage(pair);
        if (pair.extType == 'video')
            return copyVideo(pair);
        if (pair.extType == 'other')
            return copyOther(pair);
        if (pair.extType == 'ignored')
            return copyIgnored(pair);
        console.log('what:', pair);
    }, { threads: 100, window: 10 });
    function logResult(updPair) {
        let f = (x) => ((x?.size ?? 0) / 1e6).toFixed(2).padStart(6);
        count++;
        let cs = count.toString().padStart(total.toString().length);
        let pc = (updPair.right?.size ?? 0) / (updPair.left?.size ?? 0);
        let sign = pc == 1 ? '==' : pc > 1.5 ? '<<' : pc > 1 ? '<' : '>';
        console.log(`${cs}/${total}       ${f(updPair.left)} ${sign}${f(updPair.right)} MB    ${updPair.path}`);
    }
    async function copyImage(pair) {
        let updPair = await pair.makeSmallerImage();
        logResult(updPair);
        let pc = updPair.right.size / updPair.left.size;
        if (pc < 1.5) {
            console.log(`compress: ${((1 - pc) * 100).toFixed(2)}%   ${updPair.left.height} > ${updPair.right.height} px`);
        }
        else {
            console.log(`bad: x${pc.toFixed(2)}`);
            count--;
            DoubleTreeNode_1.rootSrc.copy(pair.leftPath, pair.rightPath, { overwrite: true });
            let updPair = await pair.makeCopy();
            logResult(updPair);
        }
    }
    async function copyVideo(pair) {
        let updPair = await pair.makeHardlink();
        logResult(updPair);
    }
    async function copyOther(pair) {
        let updPair = await pair.makeHardlink();
        logResult(updPair);
    }
    async function copyIgnored(pair) {
        logResult(pair);
    }
}
void async function () {
    // let folders = ['dl']
    for (let f of DoubleTreeNode_1.folders) {
        await convertFolder(f);
    }
}();
//# sourceMappingURL=data:application/json;base64,