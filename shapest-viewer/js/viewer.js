var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { SzLayer, SzLayerQuad, SzInfo, SzLayerArea } from './shapest/layer.js';
import { SzContext2D } from './shapest/SzContext2D.js';
let layer = // new SzLayer();
 SzLayer.fromShortKey('l!z|q!C-06C-6cC-ciC-io|a!su06su6csucisuio|c!');
// SzInfo.quad.exampleLayer('circle');
// new SzLayer();
// new SzLayer(testTemplate);
let savedShapes = JSON.parse(localStorage.getItem('szSavedShapes') ?? '["sz!l!z|q!C-06C-6cC-ciC-io|a!su06su6csucisuio|c!"]');
let rawData = {
    layer, layers: [layer], savedShapes
};
let data = Vue.reactive({ source: rawData });
Object.assign(globalThis, { layer, data, rawData });
// let layer = SzLayer.createTest();
// layer.drawCenteredNormalized(sctx);
function registerQuad(name, code, path) {
    let quad = { name: name, code, path };
    SzInfo.quad.list.push(quad);
    SzInfo.quad.byName[quad.name] = quad;
    SzInfo.quad.byChar[quad.code] = quad;
    SzInfo.quad.quadList.push(quad.name);
}
registerQuad('test', 'X', (ctx, { from, to }) => {
    ctx.lineToR(0.8, from);
    ctx.lineToR(Math.SQRT2, (from + to) / 2);
    ctx.lineToR(0.4, to);
});
let LayerCanvasVue = class LayerCanvasVue extends VueImpl.with(makeClass({
    hash: [String],
    layer: [SzLayer],
    layers: [Array],
    size: Number,
})) {
    get _t() {
        return `
			<canvas ref="cv"
				:width="size" :height="size"
				style="border: 1px solid black;"
				:style="{width: size + 'px', height: size + 'px'}"
				@click=redraw() />
		`;
    }
    v_ctx = null;
    get ctx() {
        if (this.v_ctx)
            return this.v_ctx;
        if (!this.$refs.cv)
            return null;
        return this.v_ctx = SzContext2D.fromCanvas(this.$refs.cv);
    }
    mounted() {
        this.redraw();
    }
    redraw() {
        if (!this.ctx)
            return;
        this.ctx.clear();
        if (this.layer) {
            this.layer.drawCenteredNormalized(this.ctx);
        }
        if (this.layers) {
            this.layers.map((e, i) => {
                e.drawCenteredLayerScaled(this.ctx, i);
            });
        }
        if (this.hash) {
            let layers = this.hash.startsWith('sz!') ? this.hash.slice(3).split(':').map(SzLayer.fromShortKey)
                : this.hash.split(':').map(SzLayer.fromShapezHash);
            layers.map((e, i) => {
                e.drawCenteredLayerScaled(this.ctx, i);
            });
        }
    }
};
__decorate([
    Template
], LayerCanvasVue.prototype, "_t", null);
LayerCanvasVue = __decorate([
    GlobalComponent({
        watch: {
            layers: {
                handler: function (val) {
                    this.redraw();
                },
                deep: true,
            }
        }
    })
], LayerCanvasVue);
let QuadEditorVue = class QuadEditorVue extends VueImpl.with(makeClass({
    quad: [SzLayerQuad],
    area: [SzLayerArea],
    parent: SzLayer,
})) {
    get _t() {
        let c = this.allColors[0];
        let q = this.allQuads[0];
        return `
			<a-row>
				<LayerCanvasVue :size="64" :layer="layer" :key="layer.getHash()"
					@contextmenu.prevent="${this.remove()}" />
				&emsp;
				<div style="line-height:0" >
					<LayerCanvasVue :size="32" v-if="quad"
						v-for="${q} of ${this.allQuads}"
						:title="${q}"
						:layer="${this.quadLayer(q)}"
						:class="${this.quad.shape == q ? 'selected' : 'unselected'}"
						@click="${this.quad.shape = q}" />
					<br>
					<LayerCanvasVue :size="32" v-if="area"
						v-for="${c} of ${this.allColors}"
						:title="${c}"
						:layer="${this.colorLayer(c)}"
						:class="${this.area.color == c ? 'selected' : 'unselected'}"
						@click="${this.area.color = c}" />
					<br>
					<a-slider
						range :min="0" :max="30" :step="2"
						 :marks="${{ 0: '', 6: '', 12: '', 18: '', 24: '', 30: '' }}"
						v-model:value="fromTo"
						style="width: 300px" />
				</div>
			</a-row>
		`;
    }
    rnd = 0;
    get layer() {
        this.rnd;
        if (this.quad) {
            return new SzLayer({
                quads: [this.quad],
                areas: [new SzLayerArea({ from: 0, to: 24, color: 'grey', shape: 'sector' })],
            });
        }
        if (this.area) {
            return new SzLayer({
                quads: [new SzLayerQuad({ to: 24 })],
                areas: [this.area],
            });
        }
        return SzInfo.color.exampleLayer('grey');
    }
    get allColors() {
        return SzInfo.color.colorList;
    }
    get allQuads() {
        console.log(SzInfo.quad.quadList);
        return SzInfo.quad.quadList;
    }
    colorLayer(color) {
        return SzInfo.color.exampleLayer(color);
    }
    quadLayer(shape) {
        return SzInfo.quad.exampleLayer(shape);
    }
    get fromTo() {
        let e = this.quad || this.area;
        return [e.from, e.to];
    }
    set fromTo([from, to]) {
        let e = this.quad || this.area;
        if (e.to == to) {
            e.to += from - e.from;
            e.from = from;
        }
        else {
            e.to = to;
        }
    }
    remove() {
        this.quad && this.parent.quads.splice(this.parent.quads.indexOf(this.quad), 1);
        this.area && this.parent.areas.splice(this.parent.areas.indexOf(this.area), 1);
    }
};
__decorate([
    Template
], QuadEditorVue.prototype, "_t", null);
QuadEditorVue = __decorate([
    GlobalComponent
], QuadEditorVue);
class LayerVue extends VueImpl.with(makeClass({
    source: null,
})) {
    get _t() {
        return `
			<APP>
				<h1> Shapest viewer </h1>
				<a-row>
					<a-col>
						<LayerCanvasVue :size="256" :layers="layers" />
						<template v-for="(l, i) of layers" :key="i + hash.split(':')[i]">
							<br v-if="i % 2 == 0">
							<LayerCanvasVue :size="128" :layer="l"								
								:class="l == selectedLayer ? 'selected' : 'unselected'"
								@click="selectedLayerIndex = i"
								/>
						</template>
						<br>
						<button @click="${this.popLayer}"> - </button>
						<button @click="${this.pushLayer}"> + </button>
						<button @click="hash = hash" :class="[!isNormalized && 'selected']"> â†º </button>
						<br>
						<input :value="${this.hash}" @change="hash=$event.target.value" style="width: 100%;font-family: monospace;font-size: small;" />
					</a-col>
					<a-col> <a-col>
						<textarea v-model="customQuad" style="resize:both;width:400px;height:200px"></textarea>
						<QuadEditorVue
							v-for="(quad, i) of selectedLayer?.quads" :key="i"
							:quad="quad" :parent="selectedLayer" />
						<button @click="${this.popQuad}"> - </button>
						<button @click="${this.pushQuad}"> + </button>
					</a-col> <a-col>
						<QuadEditorVue
							v-for="(area, i) of selectedLayer?.areas" :key="i"
							:area="area" :parent="selectedLayer" />
						<button @click="${this.popArea}"> - </button>
						<button @click="${this.pushArea}"> + </button>
					</a-col> </a-col>
				</a-row>
				<a-row>
					<button @click="this.saveShape()"> Save current shape </button>
					<LayerCanvasVue :size="64"
						v-for="hash of ${this.source.savedShapes}"
						:hash="hash" :key="hash"
						@click="this.hash = hash"
						@contextmenu.prevent="unsaveShape(hash)" />
				</a-row>
				<a-row>
					<LayerCanvasVue :size="64"
						v-for="(hash, name) in ${this.named}"
						:title="name"
						:hash="hash" :key="hash"
						@click="this.hash = hash"
						@contextmenu.prevent="unsaveShape(hash)" />
				</a-row>
			</APP>
		`;
    }
    ;
    get layers() {
        return this.source.layers;
    }
    selectedLayerIndex = 0;
    get selectedLayer() {
        return this.layers[this.selectedLayerIndex];
    }
    mounted() {
        Object.assign(globalThis, { view: this });
    }
    ctx = null;
    setFromTo(quad, v) {
        quad.from = v[0];
        quad.to = v[1];
    }
    popQuad() {
        this.selectedLayer.quads.pop();
    }
    pushQuad() {
        let from = this.selectedLayer.quads.slice(-1)[0]?.to ?? 0;
        this.selectedLayer.quads.push(new SzLayerQuad({ from, to: from + 6 }));
    }
    popArea() {
        this.selectedLayer.areas.pop();
    }
    pushArea() {
        let from = this.selectedLayer.areas.slice(-1)[0]?.to ?? 0;
        this.selectedLayer.areas.push(new SzLayerArea({ from, to: from + 6 }));
    }
    popLayer() { this.layers.pop(); }
    pushLayer() {
        this.layers.push(SzLayer.fromShortKey('l!z|q!C-06,C-6c,C-ci,C-io|a!su0o|c!'));
    }
    get named() {
        return [
            SzInfo.quad.named,
            SzInfo.quad.named4,
            SzInfo.quad.named6,
        ].flatMap(e => Object.values(e));
    }
    get hash() {
        return this.layers.map(e => e.clone().getHash()).join(':');
    }
    set hash(v) {
        this.source.layers =
            v.startsWith('sz!') ? v.slice(3).split(':').map(SzLayer.fromShortKey)
                : v.split(':').map(SzLayer.fromShapezHash);
    }
    saveShape() {
        this.unsaveShape(this.hash);
        this.source.savedShapes.push(this.hash);
        localStorage.setItem('szSavedShapes', JSON.stringify(this.source.savedShapes));
    }
    unsaveShape(hash) {
        if (this.source.savedShapes.includes(hash)) {
            this.source.savedShapes.splice(this.source.savedShapes.indexOf(hash), 1);
            localStorage.setItem('szSavedShapes', JSON.stringify(this.source.savedShapes));
        }
    }
    get isNormalized() {
        return this.layers.every(e => e.isNormalized());
    }
    path = `
ctx.lineToR(0.8, from);
ctx.lineToR(Math.SQRT2, (from + to) / 2);
ctx.lineToR(0.4, to);
	`.trim();
    get customQuad() {
        return this.path;
    }
    set customQuad(v) {
        console.log(v);
        try {
            let s = `
				function f() {
					return (ctx, { from, to }) => {
						${v}
					}
				}
				f
			`;
            let path = eval(s)();
            let X = SzInfo.quad.byChar.X;
            console.log({ path });
            X.path = path;
        }
        catch (e) {
            console.error(e);
        }
        ;
        this.hash = this.hash;
        this.path = v;
    }
}
__decorate([
    Template
], LayerVue.prototype, "_t", null);
createApp(LayerVue, data).use(antd).mount('body');
//# sourceMappingURL=data:application/json;base64,