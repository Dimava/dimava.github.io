import { SzLayer } from "./layer.js";
import { SzContext2D } from "./SzContext2D.js";
let cv = document.createElement('canvas');
document.body.append(cv);
cv.style.border = '3px solid #aaa';
cv.height = cv.width = 256;
let ctx = cv.getContext('2d');
const PI = Math.PI;
const PI12 = -PI / 12;
function log(...a) {
    for (let o of a)
        document.body.append(JSON.stringify(o));
}
ctx.scale(cv.width / 2, cv.height / 2);
ctx.translate(1, 1);
ctx.rotate(-Math.PI / 2);
ctx.scale(1 / 1.15, 1 / 1.15);
ctx.lineCap = 'round';
ctx.lineJoin = 'round';
let sctx = new SzContext2D(ctx);
const testTemplate = {
    cuts: [
        { from: 10, to: 10, shape: 'line', color: 'blue' },
        { from: 14, to: 14, shape: 'line', color: 'blue' },
    ],
    quads: [
        { shape: 'square', color: 'green', from: 2, to: 4 },
        { shape: 'circle', color: 'pink', from: 5, to: 19 },
        { shape: 'square', color: 'green', from: 20, to: 22 },
    ],
    areas: [
        { shape: 'sector', color: '#ff0000', from: 11, to: 13 },
    ],
};
let layer = new SzLayer(testTemplate);
// let layer = SzLayer.createTest();
layer.drawCenteredNormalized(sctx);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdF9kcmF3aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zaGFwZXN0L18vdGVzdF9kcmF3aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVksT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUsvQyxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLGdCQUFnQixDQUFBO0FBQ2xDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDM0IsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUUsQ0FBQztBQUMvQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ25CLE1BQU0sSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUN0QixTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQVE7SUFDdkIsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFFRCxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdkMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDcEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM5QixHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN0QixHQUFHLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUV2QixJQUFJLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUdoQyxNQUFNLFlBQVksR0FBYTtJQUM5QixJQUFJLEVBQUU7UUFDTCxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDbEQsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0tBQ2xEO0lBQ0QsS0FBSyxFQUFFO1FBQ04sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ25ELEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUNuRCxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7S0FDckQ7SUFDRCxLQUFLLEVBQUU7UUFDTixFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7S0FDdkQ7Q0FDRCxDQUFBO0FBRUQsSUFBSSxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdEMsb0NBQW9DO0FBRXBDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTekxheWVyLCBTekxheWVyIH0gZnJvbSBcIi4vbGF5ZXIuanNcIjtcclxuaW1wb3J0IHsgU3pDb250ZXh0MkQgfSBmcm9tIFwiLi9TekNvbnRleHQyRC5qc1wiO1xyXG5cclxuXHJcblxyXG5cclxubGV0IGN2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbmRvY3VtZW50LmJvZHkuYXBwZW5kKGN2KTtcclxuY3Yuc3R5bGUuYm9yZGVyID0gJzNweCBzb2xpZCAjYWFhJ1xyXG5jdi5oZWlnaHQgPSBjdi53aWR0aCA9IDI1NjtcclxubGV0IGN0eCA9IGN2LmdldENvbnRleHQoJzJkJykhO1xyXG5jb25zdCBQSSA9IE1hdGguUEk7XHJcbmNvbnN0IFBJMTIgPSAtUEkgLyAxMjtcclxuZnVuY3Rpb24gbG9nKC4uLmE6IGFueVtdKSB7XHJcblx0Zm9yIChsZXQgbyBvZiBhKVxyXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmQoSlNPTi5zdHJpbmdpZnkobykpO1xyXG59XHJcblxyXG5jdHguc2NhbGUoY3Yud2lkdGggLyAyLCBjdi5oZWlnaHQgLyAyKTtcclxuY3R4LnRyYW5zbGF0ZSgxLCAxKTtcclxuY3R4LnJvdGF0ZSgtTWF0aC5QSSAvIDIpO1xyXG5jdHguc2NhbGUoMSAvIDEuMTUsIDEgLyAxLjE1KTtcclxuY3R4LmxpbmVDYXAgPSAncm91bmQnO1xyXG5jdHgubGluZUpvaW4gPSAncm91bmQnO1xyXG5cclxubGV0IHNjdHggPSBuZXcgU3pDb250ZXh0MkQoY3R4KTtcclxuXHJcblxyXG5jb25zdCB0ZXN0VGVtcGxhdGU6IElTekxheWVyID0ge1xyXG5cdGN1dHM6IFtcclxuXHRcdHsgZnJvbTogMTAsIHRvOiAxMCwgc2hhcGU6ICdsaW5lJywgY29sb3I6ICdibHVlJyB9LFxyXG5cdFx0eyBmcm9tOiAxNCwgdG86IDE0LCBzaGFwZTogJ2xpbmUnLCBjb2xvcjogJ2JsdWUnIH0sXHJcblx0XSxcclxuXHRxdWFkczogW1xyXG5cdFx0eyBzaGFwZTogJ3NxdWFyZScsIGNvbG9yOiAnZ3JlZW4nLCBmcm9tOiAyLCB0bzogNCB9LFxyXG5cdFx0eyBzaGFwZTogJ2NpcmNsZScsIGNvbG9yOiAncGluaycsIGZyb206IDUsIHRvOiAxOSB9LFxyXG5cdFx0eyBzaGFwZTogJ3NxdWFyZScsIGNvbG9yOiAnZ3JlZW4nLCBmcm9tOiAyMCwgdG86IDIyIH0sXHJcblx0XSxcclxuXHRhcmVhczogW1xyXG5cdFx0eyBzaGFwZTogJ3NlY3RvcicsIGNvbG9yOiAnI2ZmMDAwMCcsIGZyb206IDExLCB0bzogMTMgfSxcclxuXHRdLFxyXG59XHJcblxyXG5sZXQgbGF5ZXIgPSBuZXcgU3pMYXllcih0ZXN0VGVtcGxhdGUpO1xyXG4vLyBsZXQgbGF5ZXIgPSBTekxheWVyLmNyZWF0ZVRlc3QoKTtcclxuXHJcbmxheWVyLmRyYXdDZW50ZXJlZE5vcm1hbGl6ZWQoc2N0eCk7Il19